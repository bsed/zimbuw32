#
# The Zimbu compiler written in Zimbu
#
# ClassRefType class.
#
# A Type used for objects and iobjects: Reference to an object or interface.
#
# Copyright 2011 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT.PROTO "zui.proto"

IMPORT "ClassType.zu"
IMPORT "Declaration.zu"
IMPORT "MethodType.zu"
IMPORT "SContext.zu"
IMPORT "SymUse.zu"
IMPORT "Type.zu"

CLASS TypedefType EXTENDS Type @items=public
  Type      $typedef

  # Cached value of $getValueType()
  TypedefType $valueType

  NEW(string name, Type typedef) @replace
    NEW(Type.Enum.typedef, name)
    $typedef = typedef
  }

  FUNC $typeToString() string @replace
    RETURN $name .. " (" .. $typedef.typeToString() .. ")"
  }

  # Return something nicer than "ref".
  FUNC $typeName(bool long) string @replace @default
    RETURN $typeToString()
  }

  # Make a copy of this Type.  Every subclass must redefine it.
  FUNC $copyType() Type @replace @default
    TypedefType ret = NEW($name, $typedef)
    $copyObjectValues(ret)
    RETURN ret
  }

  # Copy the values of this object into |ret|.
  PROC $copyObjectValues(TypedefType ret) @default
    ret.typedef = $typedef
  }

  # If this type is a Class, Enum, Bits or Method, return a reference to it.
  # Otherwise return THIS.
  FUNC $getValueType(SContext ctx) Type @replace
    Type vt = $typedef.getValueType(ctx)
    IF vt IS $typedef
      # type itself is a value type
      RETURN THIS
    }

    IF $valueType == NIL
      $valueType = NEW(Type.Enum.typedef,
               ($getClassType(ctx) == NIL ? "value of " : "object of ")
                                                                     .. $name)
    }

    # Always set the value type, for classes it may change from object to
    # iobject.
    $valueType.typedef = vt

    RETURN $valueType
  }

  # Return the name for the object declaration table.
  # Return NIL if this is not an object.
  FUNC $getTypeName(SContext ctx) string @replace
    RETURN $typedef.getTypeName(ctx)
  }

  # Return TRUE for types that use managed memory.  This excludes pointers to
  # callbacks, these are in static memory.  Also exclude references, e.g. an
  # "&undef" argument.
  FUNC $isManaged() bool @replace
    RETURN $typedef.isManaged()
  }

  # Return the $ttype.  For a typedef it is the defined type.
  FUNC $getTtype() Enum @replace
    RETURN $typedef.getTtype()
  }

  # Return the effective type.  For a typedef it is the defined type.
  FUNC $getEffType() Type @replace
    RETURN $typedef
  }

  # For an object, iobject and class: return the class type.
  # Otherwise return NIL
  FUNC $getClassType(SContext ctx) ClassType @replace @default
    # TODO
    RETURN $typedef.getClassType(ctx)
  }

  FUNC $isValueType() bool @replace
    RETURN $typedef.isValueType()
  }

  FUNC $isNumberType() bool @replace
    RETURN $typedef.isNumberType()
  }

  FUNC $isIntType() bool @replace
    RETURN $typedef.isIntType()
  }

  FUNC $isFloatType() bool @replace
    RETURN $typedef.isFloatType()
  }

  # Return TRUE if this is a method.
  FUNC $isMethodType() bool @replace
    RETURN $typedef.isMethodType()
  }
  # Return TRUE when this is a class used to store an allocated variable, used
  # in a USE &argument.
  FUNC $isAllocType(SContext ctx) bool @replace
    RETURN $typedef.isAllocType(ctx)
  }

  # Get the list of object declarations.
  FUNC $getObjectDeclDict() multiDict<string, Declaration> @replace @default
    RETURN $typedef.getObjectDeclDict()
  }

  # For a method reference return the argument list.
  # Otherwise return NIL
  FUNC $getArgList() list<Declaration.C> @replace @default
    RETURN $typedef.getArgList()
  }

  # For a proc, func, procRef, funcRef: return the method type.
  # Otherwise return NIL
  FUNC $getMethod() MethodType @replace
    RETURN $typedef.getMethod()
  }

  # For a method reference return the return type.
  # Otherwise return NIL
  FUNC $getReturnType() Type @replace @default
    RETURN $typedef.getReturnType()
  }

  # Return the types as they are used in a typespec.
  FUNC $getTypespecType(int idx) Type @replace @default
    RETURN $typedef.getTypespecType(idx)
  }

  FUNC $hasAnyMembers() bool @replace
    RETURN $typedef.hasAnyMembers()
  }

  # Search for |name| in the object member dict, checking for usage with 
  # |symUse|.  Only search parents when |options.searchParent| is TRUE.
  FUNC $findObjectMember(string name,
                         SymUse symUse,
                         MethodType.FindFuncOptions options,
                         bool inParent
                        ) Declaration @replace
    RETURN $typedef.findObjectMember(name, symUse, options, inParent)
  }

  # Find methods with name |method| that match the arguments |argList|.
  # Skip |skip.method|.
  # This only works for objects.
  PROC $findMatchingMethods(string method,
                            bool objectMethod,
                            list<Declaration.C> argList,
                            MethodType.Skip skip,
                            MethodType.FindFuncOptions options,
                            int &undef,
                            multiDict<int, Declaration> funcs,
                            SContext ctx
                           ) @replace @default
    $typedef.findMatchingMethods(method, objectMethod, argList,
                                             skip, options, undef, funcs, ctx)
  }

  # Return the NEW() method that accepts a list of items.
  FUNC $findNewFromContainerMethod(Zui.Expression expr,
                              Type.Enum ttype, string tName,
                                             SContext ctx) MethodType @replace
    RETURN $typedef.findNewFromContainerMethod(expr, ttype, tName, ctx)
  }

}
