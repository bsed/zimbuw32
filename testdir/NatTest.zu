#
# Test for the Zimbu compiler written in Zimbu
#
# Test file for nat-like types: nat, byte, nat16, nat32
#
# Copyright 2014 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

MODULE NatTest @public

  PROC test() @public
    IO.print("testdir/NatTest.zu")
    testMinMax()
    testConstants()
    testPadding()
    testToHex()
    testFloatfuncs()
    testPredefMethods()
  }

  PROC testMinMax()
    IO.print("T.nat.min: " .. T.nat.min)
    IO.print("T.nat.max: " .. T.nat.max)
    IO.print("T.byte.min: " .. T.byte.min)
    IO.print("T.byte.max: " .. T.byte.max)
    IO.print("T.nat16.min: " .. T.nat16.min)
    IO.print("T.nat16.max: " .. T.nat16.max)
    IO.print("T.nat32.min: " .. T.nat32.min)
    IO.print("T.nat32.max: " .. T.nat32.max)
  }
  
  PROC testConstants()
    byte n1 = 255
    IO.print(n1)
    IO.print(n1 .. "UL")

    nat16 n2 = 256 * 256 - 1
    IO.print(n2)
    IO.print(n2 .. "UL")

    nat32 n4 = 256 * 256 * 256 * 256 - 1
    IO.print(n4)
    IO.print(n4 .. "UL")

    nat n8 = 256 * 256 * 256 * 256 * 256 * 256 * 256 * 128
           + 256 * 256 * 256 * 256 * 256 * 256 * 256 * 127
    IO.print(n8)
    IO.print(n8 .. "UL")

    int i8 = n8
    IO.print(i8)
  }

  PROC testPadding()
    nat pos = 123
    IO.print(pos.ToString())
    IO.print(pos.ToString("0d"))
    IO.print(pos.ToString("03d"))
    IO.print(pos.ToString("04d"))
    IO.print(pos.ToString("05d"))
    IO.print(pos.ToString("012d"))

    nat hex = 0xef
    IO.print(hex.ToString("0x"))
    IO.print(hex.ToString("04x"))
    hex = 0x1234
    IO.print(hex.ToString("08x"))
    hex = 0x1234'5678
    IO.print(hex.ToString("08x"))
  }

  PROC testToHex()
    nat n0
    IO.print(n0.toHex())             # 0
    nat n3 = 3
    IO.print(n3.toHex())             # 3
    nat n11 = 11
    IO.print(n11.toHex())            # b
    nat n127 = 127
    IO.print(n127.toHex())           # 7f
    nat n255 = 255
    IO.print(n255.toHex())           # ff
    nat n256 = (256 * 256 - 1)
    IO.print(n256.toHex())            # ffff
    nat n268435455 = 268435455
    IO.print(n268435455.toHex())       # fffffff
    nat n2147483647 = 2147483647
    IO.print(n2147483647.toHex())      # 7fffffff

    IO.print(n0.toHex(3))               # 000
    IO.print(n3.toHex(2))               # 03
    IO.print(n11.toHex(8))              # 0000000b
    IO.print(n127.toHex(4))             # 007f
    IO.print(n255.toHex(3))             # 0ff
    IO.print(n256.toHex(20))            # 0000000000000000ffff
    IO.print(n268435455.toHex(3))        # fffffff
    IO.print(n2147483647.toHex(8))       # 7fffffff

    nat n43981 = 43981
    IO.print(n43981.toHexUpper())        # ABCD
    IO.print(n43981.toHexUpper(6))       # 00ABCD
  }


  PROC testFloatfuncs()
    nat f1 = 1
    int f2 = -1
    nat f3 = 3
    IO.print("floor(): " .. f1.floor())
    IO.print("ceil(): " .. f1.ceil())
    IO.print("round(): " .. f1.round())
    IO.print("trunc(): " .. f1.trunc())
    IO.print("abs(): " .. f1.abs())

    IO.print("exp(): " .. f1.exp() .. " , " .. f3.exp())
    IO.print("log(): " .. f1.log() .. " , " .. f3.log())
    IO.print("log10(): " .. f1.log10() .. " , " .. f3.log10())
    IO.print("sqrt(): " .. f1.sqrt() .. " , " .. f3.sqrt())
    IO.print("pow(): " .. f1.pow(f2) .. " , " .. f3.pow(f2))

    IO.print("sin(): " .. f1.sin())
    IO.print("sinh(): " .. f1.sinh())
    IO.print("tan(): " .. f1.tan())
    IO.print("tanh(): " .. f1.tanh())
    IO.print("cos(): " .. f1.cos())
    IO.print("cosh(): " .. f1.cosh())
    IO.print("acos(): " .. f1.acos())
    IO.print("asin(): " .. f1.asin())
    IO.print("atan(): " .. f1.atan())
    IO.print("atan2(): " .. f1.atan2(f2))
  }

  PROC testPredefMethods()
    nat n = 1234
    IO.print(n.Size())
    IO.print(n.ToString())
    IO.print(n.Type().ToString())
    byte n8 = 123
    IO.print(n8.Size())
    IO.print(n8.ToString())
    IO.print(n8.ToString("4d"))
    n8 = 0x9f
    IO.print(n8.ToString("04x"))
    n8 = 0xf
    IO.print(n8.ToString("02x"))
    IO.print(n8.Type().ToString())
    nat16 n16 = 1234
    IO.print(n16.Size())
    IO.print(n16.ToString())
    IO.print(n16.Type().ToString())
    nat32 n32 = 1234
    IO.print(n32.Size())
    IO.print(n32.ToString())
    IO.print(n32.Type().ToString())

    nat four = 4
    nat otherFour = 4
    nat eight = 8
    IO.print("4.Compare(4): " .. (four.Compare(four)))
    IO.print("4.Compare(8): " .. (four.Compare(eight)))
    IO.print("8.Compare(4): " .. (eight.Compare(four)))
    IO.print("max.Compare(max): " .. (T.nat.max.Compare(T.nat.max)))
    IO.print("max.Compare(min): " .. (T.nat.max.Compare(T.nat.min)))
    IO.print("min.Compare(min): " .. (T.nat.min.Compare(T.nat.min)))
    IO.print("min.Compare(max): " .. (T.nat.min.Compare(T.nat.max)))

    IO.print("4.Equal(4): " .. (four.Equal(otherFour)))
    IO.print("8.Equal(4): " .. (eight.Equal(four)))
  }
}
