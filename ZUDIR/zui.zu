# Generated from zui.proto

IMPORT "$PLUGIN/proto/Proto.zu"
IMPORT "$PLUGIN/proto/Message.zu"

MODULE Zui @public @items=public
  CLASS Header EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Header"
    }
    string $f_fileName
    FUNC $setFileName(string v) Header @primitive
      $f_fileName = v
      RETURN THIS
    }
    FUNC $getFileName() string @primitive
      IF $f_fileName == NIL
        RETURN ""
      }
      RETURN $f_fileName
    }
    FUNC $hasFileName() bool @primitive
      RETURN $f_fileName != NIL
    }
    FUNC $clearFileName() Header @primitive
      $f_fileName = NIL
      RETURN THIS
    }
    int $f_byteSize
    bool $has_byteSize
    FUNC $setByteSize(int v) Header @primitive
      $f_byteSize = v
      $has_byteSize = TRUE
      RETURN THIS
    }
    FUNC $getByteSize() int @primitive
      IF !$has_byteSize
        RETURN 0
      }
      RETURN $f_byteSize
    }
    FUNC $hasByteSize() bool @primitive
      RETURN $has_byteSize
    }
    FUNC $clearByteSize() Header @primitive
      $f_byteSize = 0
      $has_byteSize = FALSE
      RETURN THIS
    }
    int $f_timeStamp
    bool $has_timeStamp
    FUNC $setTimeStamp(int v) Header @primitive
      $f_timeStamp = v
      $has_timeStamp = TRUE
      RETURN THIS
    }
    FUNC $getTimeStamp() int @primitive
      IF !$has_timeStamp
        RETURN 0
      }
      RETURN $f_timeStamp
    }
    FUNC $hasTimeStamp() bool @primitive
      RETURN $has_timeStamp
    }
    FUNC $clearTimeStamp() Header @primitive
      $f_timeStamp = 0
      $has_timeStamp = FALSE
      RETURN THIS
    }
    string $f_signature
    FUNC $setSignature(string v) Header @primitive
      $f_signature = v
      RETURN THIS
    }
    FUNC $getSignature() string @primitive
      IF $f_signature == NIL
        RETURN ""
      }
      RETURN $f_signature
    }
    FUNC $hasSignature() bool @primitive
      RETURN $f_signature != NIL
    }
    FUNC $clearSignature() Header @primitive
      $f_signature = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_fileName = NIL
      $f_byteSize = 0
      $f_timeStamp = 0
      $f_signature = NIL
      $has_byteSize = FALSE
      $has_timeStamp = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN $hasFileName() && $hasByteSize() && $hasTimeStamp()
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_byteSize
        CASE 3; RETURN $f_timeStamp
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_byteSize = value; $has_byteSize = TRUE
        CASE 3; $f_timeStamp = value; $has_timeStamp = TRUE
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_fileName
        CASE 4; RETURN $f_signature
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_fileName = value
        CASE 4; $f_signature = value
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasFileName()
        CASE 2; RETURN $hasByteSize()
        CASE 3; RETURN $hasTimeStamp()
        CASE 4; RETURN $hasSignature()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Header
      Header ret = NEW()
      ret.f_fileName = $f_fileName
      IF $has_byteSize
        ret.has_byteSize = TRUE
        ret.f_byteSize = $f_byteSize
      }
      IF $has_timeStamp
        ret.has_timeStamp = TRUE
        ret.f_timeStamp = $f_timeStamp
      }
      ret.f_signature = $f_signature
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Header
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Header
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Header
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Header
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Header
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Header
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Header
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("fileName", 1, Proto.Type.string, FALSE),
        NEW("byteSize", 2, Proto.Type.int64, FALSE),
        NEW("timeStamp", 3, Proto.Type.int64, FALSE),
        NEW("signature", 4, Proto.Type.string, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Header.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Header
        RETURN Header.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Header
        RETURN Header.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Header
        RETURN Header.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Header
        RETURN Header.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Header
        RETURN Header.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Contents EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Contents"
    }
    list<Import> $f_import
    FUNC $addImport(Import v) Contents
      IF $f_import == NIL
        $f_import = NEW()
      }
      $f_import.add(v)
      RETURN THIS
    }
    FUNC $addNewImport() Import
      Import v = NEW()
      $addImport(v)
      RETURN v
    }
    FUNC $getImport(int i) Import @primitive
      IF i < 0 || $f_import == NIL || i >= $f_import.Size()
        THROW "list index out of range for import: " .. i
      }
      RETURN $f_import[i]
    }
    FUNC $getImportList() list<Import> @primitive
      RETURN $f_import
    }
    FUNC $setImportList(list<Import> l) Contents @primitive
      $f_import = l
      RETURN THIS
    }
    FUNC $sizeImport() int @primitive
      RETURN $f_import == NIL ? 0 : $f_import.Size()
    }
    FUNC $hasImport() bool @primitive
      RETURN $f_import != NIL && $f_import.Size() > 0
    }
    FUNC $hasImport(int i) bool @primitive
      RETURN i >= 0 && $f_import != NIL && i < $f_import.Size()
    }
    FUNC $clearImport() Contents @primitive
      $f_import = NIL
      RETURN THIS
    }
    list<string> $f_builtin
    FUNC $addBuiltin(string v) Contents
      IF $f_builtin == NIL
        $f_builtin = NEW()
      }
      $f_builtin.add(v)
      RETURN THIS
    }
    FUNC $getBuiltin(int i) string @primitive
      IF i < 0 || $f_builtin == NIL || i >= $f_builtin.Size()
        THROW "list index out of range for builtin: " .. i
      }
      RETURN $f_builtin[i]
    }
    FUNC $getBuiltinList() list<string> @primitive
      RETURN $f_builtin
    }
    FUNC $setBuiltinList(list<string> l) Contents @primitive
      $f_builtin = l
      RETURN THIS
    }
    FUNC $sizeBuiltin() int @primitive
      RETURN $f_builtin == NIL ? 0 : $f_builtin.Size()
    }
    FUNC $hasBuiltin() bool @primitive
      RETURN $f_builtin != NIL && $f_builtin.Size() > 0
    }
    FUNC $hasBuiltin(int i) bool @primitive
      RETURN i >= 0 && $f_builtin != NIL && i < $f_builtin.Size()
    }
    FUNC $clearBuiltin() Contents @primitive
      $f_builtin = NIL
      RETURN THIS
    }
    list<Statement> $f_statement
    FUNC $addStatement(Statement v) Contents
      IF $f_statement == NIL
        $f_statement = NEW()
      }
      $f_statement.add(v)
      RETURN THIS
    }
    FUNC $addNewStatement() Statement
      Statement v = NEW()
      $addStatement(v)
      RETURN v
    }
    FUNC $getStatement(int i) Statement @primitive
      IF i < 0 || $f_statement == NIL || i >= $f_statement.Size()
        THROW "list index out of range for statement: " .. i
      }
      RETURN $f_statement[i]
    }
    FUNC $getStatementList() list<Statement> @primitive
      RETURN $f_statement
    }
    FUNC $setStatementList(list<Statement> l) Contents @primitive
      $f_statement = l
      RETURN THIS
    }
    FUNC $sizeStatement() int @primitive
      RETURN $f_statement == NIL ? 0 : $f_statement.Size()
    }
    FUNC $hasStatement() bool @primitive
      RETURN $f_statement != NIL && $f_statement.Size() > 0
    }
    FUNC $hasStatement(int i) bool @primitive
      RETURN i >= 0 && $f_statement != NIL && i < $f_statement.Size()
    }
    FUNC $clearStatement() Contents @primitive
      $f_statement = NIL
      RETURN THIS
    }
    list<SymbolRef> $f_symbol
    FUNC $addSymbol(SymbolRef v) Contents
      IF $f_symbol == NIL
        $f_symbol = NEW()
      }
      $f_symbol.add(v)
      RETURN THIS
    }
    FUNC $addNewSymbol() SymbolRef
      SymbolRef v = NEW()
      $addSymbol(v)
      RETURN v
    }
    FUNC $getSymbol(int i) SymbolRef @primitive
      IF i < 0 || $f_symbol == NIL || i >= $f_symbol.Size()
        THROW "list index out of range for symbol: " .. i
      }
      RETURN $f_symbol[i]
    }
    FUNC $getSymbolList() list<SymbolRef> @primitive
      RETURN $f_symbol
    }
    FUNC $setSymbolList(list<SymbolRef> l) Contents @primitive
      $f_symbol = l
      RETURN THIS
    }
    FUNC $sizeSymbol() int @primitive
      RETURN $f_symbol == NIL ? 0 : $f_symbol.Size()
    }
    FUNC $hasSymbol() bool @primitive
      RETURN $f_symbol != NIL && $f_symbol.Size() > 0
    }
    FUNC $hasSymbol(int i) bool @primitive
      RETURN i >= 0 && $f_symbol != NIL && i < $f_symbol.Size()
    }
    FUNC $clearSymbol() Contents @primitive
      $f_symbol = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_import = NIL
      $f_builtin = NIL
      $f_statement = NIL
      $f_symbol = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $stringGet(int fieldNr, int idx) string @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_builtin[idx]
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $addBuiltin(value)
      }
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_import[idx]
        CASE 3; RETURN $f_statement[idx]
        CASE 4; RETURN $f_symbol[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_import == NIL; $f_import = NEW(); }
                $f_import.add(m)
        CASE 3; IF $f_statement == NIL; $f_statement = NEW(); }
                $f_statement.add(m)
        CASE 4; IF $f_symbol == NIL; $f_symbol = NEW(); }
                $f_symbol.add(m)
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_import == NIL
            $f_import = NEW()
          }
          Import m = NEW()
          $f_import.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_statement == NIL
            $f_statement = NEW()
          }
          Statement m = NEW()
          $f_statement.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_symbol == NIL
            $f_symbol = NEW()
          }
          SymbolRef m = NEW()
          $f_symbol.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_import == NIL ? 0 : $f_import.Size()
        CASE 2; RETURN $f_builtin == NIL ? 0 : $f_builtin.Size()
        CASE 3; RETURN $f_statement == NIL ? 0 : $f_statement.Size()
        CASE 4; RETURN $f_symbol == NIL ? 0 : $f_symbol.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Contents
      Contents ret = NEW()
      IF deep
        IF $f_import != NIL
          ret.f_import = NEW()
          FOR i IN $f_import
            ret.f_import.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_import = $f_import
      }
      IF deep
        IF $f_builtin != NIL
          ret.f_builtin = NEW()
          FOR i IN $f_builtin
            ret.f_builtin.add(i)
          }
        }
      ELSE
        ret.f_builtin = $f_builtin
      }
      IF deep
        IF $f_statement != NIL
          ret.f_statement = NEW()
          FOR i IN $f_statement
            ret.f_statement.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_statement = $f_statement
      }
      IF deep
        IF $f_symbol != NIL
          ret.f_symbol = NEW()
          FOR i IN $f_symbol
            ret.f_symbol.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_symbol = $f_symbol
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Contents
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Contents
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Contents
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Contents
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Contents
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Contents
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Contents
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("import", 1, Proto.Type.message, TRUE),
        NEW("builtin", 2, Proto.Type.string, TRUE),
        NEW("statement", 3, Proto.Type.message, TRUE),
        NEW("symbol", 4, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN Contents.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Contents
        RETURN Contents.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Contents
        RETURN Contents.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Contents
        RETURN Contents.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Contents
        RETURN Contents.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Contents
        RETURN Contents.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Body EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Body"
    }
    list<Statement> $f_statement
    FUNC $addStatement(Statement v) Body
      IF $f_statement == NIL
        $f_statement = NEW()
      }
      $f_statement.add(v)
      RETURN THIS
    }
    FUNC $addNewStatement() Statement
      Statement v = NEW()
      $addStatement(v)
      RETURN v
    }
    FUNC $getStatement(int i) Statement @primitive
      IF i < 0 || $f_statement == NIL || i >= $f_statement.Size()
        THROW "list index out of range for statement: " .. i
      }
      RETURN $f_statement[i]
    }
    FUNC $getStatementList() list<Statement> @primitive
      RETURN $f_statement
    }
    FUNC $setStatementList(list<Statement> l) Body @primitive
      $f_statement = l
      RETURN THIS
    }
    FUNC $sizeStatement() int @primitive
      RETURN $f_statement == NIL ? 0 : $f_statement.Size()
    }
    FUNC $hasStatement() bool @primitive
      RETURN $f_statement != NIL && $f_statement.Size() > 0
    }
    FUNC $hasStatement(int i) bool @primitive
      RETURN i >= 0 && $f_statement != NIL && i < $f_statement.Size()
    }
    FUNC $clearStatement() Body @primitive
      $f_statement = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_statement = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_statement[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_statement == NIL; $f_statement = NEW(); }
                $f_statement.add(m)
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_statement == NIL
            $f_statement = NEW()
          }
          Statement m = NEW()
          $f_statement.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_statement == NIL ? 0 : $f_statement.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Body
      Body ret = NEW()
      IF deep
        IF $f_statement != NIL
          ret.f_statement = NEW()
          FOR i IN $f_statement
            ret.f_statement.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_statement = $f_statement
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Body
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Body
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Body
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Body
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Body
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Body
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Body
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("statement", 1, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN Body.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Body
        RETURN Body.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Body
        RETURN Body.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Body
        RETURN Body.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Body
        RETURN Body.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Body
        RETURN Body.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS SymbolRef EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "SymbolRef"
    }
    int $f_ref
    bool $has_ref
    FUNC $setRef(int v) SymbolRef @primitive
      $f_ref = v
      $has_ref = TRUE
      RETURN THIS
    }
    FUNC $getRef() int @primitive
      IF !$has_ref
        RETURN 0
      }
      RETURN $f_ref
    }
    FUNC $hasRef() bool @primitive
      RETURN $has_ref
    }
    FUNC $clearRef() SymbolRef @primitive
      $f_ref = 0
      $has_ref = FALSE
      RETURN THIS
    }
    int $f_importNumber
    bool $has_importNumber
    FUNC $setImportNumber(int v) SymbolRef @primitive
      $f_importNumber = v
      $has_importNumber = TRUE
      RETURN THIS
    }
    FUNC $getImportNumber() int @primitive
      IF !$has_importNumber
        RETURN 0
      }
      RETURN $f_importNumber
    }
    FUNC $hasImportNumber() bool @primitive
      RETURN $has_importNumber
    }
    FUNC $clearImportNumber() SymbolRef @primitive
      $f_importNumber = 0
      $has_importNumber = FALSE
      RETURN THIS
    }
    int $f_importRef
    bool $has_importRef
    FUNC $setImportRef(int v) SymbolRef @primitive
      $f_importRef = v
      $has_importRef = TRUE
      RETURN THIS
    }
    FUNC $getImportRef() int @primitive
      IF !$has_importRef
        RETURN 0
      }
      RETURN $f_importRef
    }
    FUNC $hasImportRef() bool @primitive
      RETURN $has_importRef
    }
    FUNC $clearImportRef() SymbolRef @primitive
      $f_importRef = 0
      $has_importRef = FALSE
      RETURN THIS
    }
    string $f_name
    FUNC $setName(string v) SymbolRef @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $getName() string @primitive
      IF $f_name == NIL
        RETURN ""
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() SymbolRef @primitive
      $f_name = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_ref = 0
      $f_importNumber = 0
      $f_importRef = 0
      $f_name = NIL
      $has_ref = FALSE
      $has_importNumber = FALSE
      $has_importRef = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN $hasRef()
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_ref
        CASE 2; RETURN $f_importNumber
        CASE 3; RETURN $f_importRef
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_ref = value; $has_ref = TRUE
        CASE 2; $f_importNumber = value; $has_importNumber = TRUE
        CASE 3; $f_importRef = value; $has_importRef = TRUE
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 4; RETURN $f_name
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 4; $f_name = value
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasRef()
        CASE 2; RETURN $hasImportNumber()
        CASE 3; RETURN $hasImportRef()
        CASE 4; RETURN $hasName()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) SymbolRef
      SymbolRef ret = NEW()
      IF $has_ref
        ret.has_ref = TRUE
        ret.f_ref = $f_ref
      }
      IF $has_importNumber
        ret.has_importNumber = TRUE
        ret.f_importNumber = $f_importNumber
      }
      IF $has_importRef
        ret.has_importRef = TRUE
        ret.f_importRef = $f_importRef
      }
      ret.f_name = $f_name
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) SymbolRef
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) SymbolRef
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) SymbolRef
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) SymbolRef
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) SymbolRef
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) SymbolRef
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) SymbolRef
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("ref", 1, Proto.Type.int64, FALSE),
        NEW("importNumber", 2, Proto.Type.int64, FALSE),
        NEW("importRef", 3, Proto.Type.int64, FALSE),
        NEW("name", 4, Proto.Type.string, FALSE),
      ]
      FUNC newMessage() Message
        RETURN SymbolRef.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) SymbolRef
        RETURN SymbolRef.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) SymbolRef
        RETURN SymbolRef.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) SymbolRef
        RETURN SymbolRef.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) SymbolRef
        RETURN SymbolRef.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) SymbolRef
        RETURN SymbolRef.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Import EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Import"
    }
    string $f_fileName
    FUNC $setFileName(string v) Import @primitive
      $f_fileName = v
      RETURN THIS
    }
    FUNC $getFileName() string @primitive
      IF $f_fileName == NIL
        RETURN ""
      }
      RETURN $f_fileName
    }
    FUNC $hasFileName() bool @primitive
      RETURN $f_fileName != NIL
    }
    FUNC $clearFileName() Import @primitive
      $f_fileName = NIL
      RETURN THIS
    }
    int $f_angleQuotes
    FUNC $setAngleQuotes(bool v) Import @primitive
      $f_angleQuotes = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getAngleQuotes() bool @primitive
      IF $f_angleQuotes == 0
        RETURN FALSE
      }
      RETURN $f_angleQuotes == 2
    }
    FUNC $hasAngleQuotes() bool @primitive
      RETURN $f_angleQuotes != 0
    }
    FUNC $clearAngleQuotes() Import @primitive
      $f_angleQuotes = 0
      RETURN THIS
    }
    string $f_plugin
    FUNC $setPlugin(string v) Import @primitive
      $f_plugin = v
      RETURN THIS
    }
    FUNC $getPlugin() string @primitive
      IF $f_plugin == NIL
        RETURN ""
      }
      RETURN $f_plugin
    }
    FUNC $hasPlugin() bool @primitive
      RETURN $f_plugin != NIL
    }
    FUNC $clearPlugin() Import @primitive
      $f_plugin = NIL
      RETURN THIS
    }
    string $f_toplevelName
    FUNC $setToplevelName(string v) Import @primitive
      $f_toplevelName = v
      RETURN THIS
    }
    FUNC $getToplevelName() string @primitive
      IF $f_toplevelName == NIL
        RETURN ""
      }
      RETURN $f_toplevelName
    }
    FUNC $hasToplevelName() bool @primitive
      RETURN $f_toplevelName != NIL
    }
    FUNC $clearToplevelName() Import @primitive
      $f_toplevelName = NIL
      RETURN THIS
    }
    string $f_asName
    FUNC $setAsName(string v) Import @primitive
      $f_asName = v
      RETURN THIS
    }
    FUNC $getAsName() string @primitive
      IF $f_asName == NIL
        RETURN ""
      }
      RETURN $f_asName
    }
    FUNC $hasAsName() bool @primitive
      RETURN $f_asName != NIL
    }
    FUNC $clearAsName() Import @primitive
      $f_asName = NIL
      RETURN THIS
    }
    string $f_options
    FUNC $setOptions(string v) Import @primitive
      $f_options = v
      RETURN THIS
    }
    FUNC $getOptions() string @primitive
      IF $f_options == NIL
        RETURN ""
      }
      RETURN $f_options
    }
    FUNC $hasOptions() bool @primitive
      RETURN $f_options != NIL
    }
    FUNC $clearOptions() Import @primitive
      $f_options = NIL
      RETURN THIS
    }
    Position $f_pos
    FUNC $setPos(Position v) Import @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Import @primitive
      $f_pos = NIL
      RETURN THIS
    }
    int $f_importNumber
    bool $has_importNumber
    FUNC $setImportNumber(int v) Import @primitive
      $f_importNumber = v
      $has_importNumber = TRUE
      RETURN THIS
    }
    FUNC $getImportNumber() int @primitive
      IF !$has_importNumber
        RETURN 0
      }
      RETURN $f_importNumber
    }
    FUNC $hasImportNumber() bool @primitive
      RETURN $has_importNumber
    }
    FUNC $clearImportNumber() Import @primitive
      $f_importNumber = 0
      $has_importNumber = FALSE
      RETURN THIS
    }
    Header $f_header
    FUNC $setHeader(Header v) Import @primitive
      $f_header = v
      RETURN THIS
    }
    FUNC $newHeader() Header
      $f_header = NEW()
      RETURN $f_header
    }
    FUNC $getHeader() Header @primitive
      IF $f_header == NIL
        THROW "header was not set"
      }
      RETURN $f_header
    }
    FUNC $hasHeader() bool @primitive
      RETURN $f_header != NIL
    }
    FUNC $clearHeader() Import @primitive
      $f_header = NIL
      RETURN THIS
    }
    int $f_javascript
    FUNC $setJavascript(bool v) Import @primitive
      $f_javascript = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getJavascript() bool @primitive
      IF $f_javascript == 0
        RETURN FALSE
      }
      RETURN $f_javascript == 2
    }
    FUNC $hasJavascript() bool @primitive
      RETURN $f_javascript != 0
    }
    FUNC $clearJavascript() Import @primitive
      $f_javascript = 0
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_fileName = NIL
      $f_angleQuotes = 0
      $f_plugin = NIL
      $f_toplevelName = NIL
      $f_asName = NIL
      $f_options = NIL
      $f_pos = NIL
      $f_importNumber = 0
      $f_header = NIL
      $f_javascript = 0
      $has_importNumber = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN $hasFileName() && $hasImportNumber()
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 8; RETURN $f_importNumber
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 8; $f_importNumber = value; $has_importNumber = TRUE
      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_angleQuotes == 2
        CASE 10; RETURN $f_javascript == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_angleQuotes = (value ? 2 : 1)
        CASE 10; $f_javascript = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_fileName
        CASE 3; RETURN $f_plugin
        CASE 4; RETURN $f_toplevelName
        CASE 5; RETURN $f_asName
        CASE 6; RETURN $f_options
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_fileName = value
        CASE 3; $f_plugin = value
        CASE 4; $f_toplevelName = value
        CASE 5; $f_asName = value
        CASE 6; $f_options = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 7; RETURN $f_pos
        CASE 9; RETURN $f_header
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 7; $f_pos = m
        CASE 9; $f_header = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 7
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 9
          IF $f_header == NIL
            $f_header = NEW()
          }
          reader.addRef($f_header)
          $f_header.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasFileName()
        CASE 2; RETURN $hasAngleQuotes()
        CASE 3; RETURN $hasPlugin()
        CASE 4; RETURN $hasToplevelName()
        CASE 5; RETURN $hasAsName()
        CASE 6; RETURN $hasOptions()
        CASE 7; RETURN $hasPos()
        CASE 8; RETURN $hasImportNumber()
        CASE 9; RETURN $hasHeader()
        CASE 10; RETURN $hasJavascript()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Import
      Import ret = NEW()
      ret.f_fileName = $f_fileName
      ret.f_angleQuotes = $f_angleQuotes
      ret.f_plugin = $f_plugin
      ret.f_toplevelName = $f_toplevelName
      ret.f_asName = $f_asName
      ret.f_options = $f_options
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF $has_importNumber
        ret.has_importNumber = TRUE
        ret.f_importNumber = $f_importNumber
      }
      IF $f_header != NIL
        ret.f_header = deep ? $f_header.copy(deep) : $f_header
      }
      ret.f_javascript = $f_javascript
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Import
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Import
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Import
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Import
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Import
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Import
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Import
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("fileName", 1, Proto.Type.string, FALSE),
        NEW("angleQuotes", 2, Proto.Type.bool, FALSE),
        NEW("plugin", 3, Proto.Type.string, FALSE),
        NEW("toplevelName", 4, Proto.Type.string, FALSE),
        NEW("asName", 5, Proto.Type.string, FALSE),
        NEW("options", 6, Proto.Type.string, FALSE),
        NEW("pos", 7, Proto.Type.message, FALSE),
        NEW("importNumber", 8, Proto.Type.int64, FALSE),
        NEW("header", 9, Proto.Type.message, FALSE),
        NEW("javascript", 10, Proto.Type.bool, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Import.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Import
        RETURN Import.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Import
        RETURN Import.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Import
        RETURN Import.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Import
        RETURN Import.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Import
        RETURN Import.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Declaration EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Declaration"
    }
    string $f_name
    FUNC $setName(string v) Declaration @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $getName() string @primitive
      IF $f_name == NIL
        RETURN ""
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() Declaration @primitive
      $f_name = NIL
      RETURN THIS
    }
    Expression $f_dotName
    FUNC $setDotName(Expression v) Declaration @primitive
      $f_dotName = v
      RETURN THIS
    }
    FUNC $newDotName() Expression
      $f_dotName = NEW()
      RETURN $f_dotName
    }
    FUNC $getDotName() Expression @primitive
      IF $f_dotName == NIL
        THROW "dotName was not set"
      }
      RETURN $f_dotName
    }
    FUNC $hasDotName() bool @primitive
      RETURN $f_dotName != NIL
    }
    FUNC $clearDotName() Declaration @primitive
      $f_dotName = NIL
      RETURN THIS
    }
    int $f_dollar
    FUNC $setDollar(bool v) Declaration @primitive
      $f_dollar = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getDollar() bool @primitive
      IF $f_dollar == 0
        RETURN FALSE
      }
      RETURN $f_dollar == 2
    }
    FUNC $hasDollar() bool @primitive
      RETURN $f_dollar != 0
    }
    FUNC $clearDollar() Declaration @primitive
      $f_dollar = 0
      RETURN THIS
    }
    int $f_percent
    FUNC $setPercent(bool v) Declaration @primitive
      $f_percent = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getPercent() bool @primitive
      IF $f_percent == 0
        RETURN FALSE
      }
      RETURN $f_percent == 2
    }
    FUNC $hasPercent() bool @primitive
      RETURN $f_percent != 0
    }
    FUNC $clearPercent() Declaration @primitive
      $f_percent = 0
      RETURN THIS
    }
    int $f_shared
    FUNC $setShared(bool v) Declaration @primitive
      $f_shared = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getShared() bool @primitive
      IF $f_shared == 0
        RETURN FALSE
      }
      RETURN $f_shared == 2
    }
    FUNC $hasShared() bool @primitive
      RETURN $f_shared != 0
    }
    FUNC $clearShared() Declaration @primitive
      $f_shared = 0
      RETURN THIS
    }
    Position $f_pos
    FUNC $setPos(Position v) Declaration @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Declaration @primitive
      $f_pos = NIL
      RETURN THIS
    }
    int $f_ref
    bool $has_ref
    FUNC $setRef(int v) Declaration @primitive
      $f_ref = v
      $has_ref = TRUE
      RETURN THIS
    }
    FUNC $getRef() int @primitive
      IF !$has_ref
        RETURN 0
      }
      RETURN $f_ref
    }
    FUNC $hasRef() bool @primitive
      RETURN $has_ref
    }
    FUNC $clearRef() Declaration @primitive
      $f_ref = 0
      $has_ref = FALSE
      RETURN THIS
    }
    int $f_isUse
    FUNC $setIsUse(bool v) Declaration @primitive
      $f_isUse = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsUse() bool @primitive
      IF $f_isUse == 0
        RETURN FALSE
      }
      RETURN $f_isUse == 2
    }
    FUNC $hasIsUse() bool @primitive
      RETURN $f_isUse != 0
    }
    FUNC $clearIsUse() Declaration @primitive
      $f_isUse = 0
      RETURN THIS
    }
    Type $f_type
    FUNC $setType(Type v) Declaration @primitive
      $f_type = v
      RETURN THIS
    }
    FUNC $newType() Type
      $f_type = NEW()
      RETURN $f_type
    }
    FUNC $getType() Type @primitive
      IF $f_type == NIL
        THROW "type was not set"
      }
      RETURN $f_type
    }
    FUNC $hasType() bool @primitive
      RETURN $f_type != NIL
    }
    FUNC $clearType() Declaration @primitive
      $f_type = NIL
      RETURN THIS
    }
    Expression $f_init
    FUNC $setInit(Expression v) Declaration @primitive
      $f_init = v
      RETURN THIS
    }
    FUNC $newInit() Expression
      $f_init = NEW()
      RETURN $f_init
    }
    FUNC $getInit() Expression @primitive
      IF $f_init == NIL
        THROW "init was not set"
      }
      RETURN $f_init
    }
    FUNC $hasInit() bool @primitive
      RETURN $f_init != NIL
    }
    FUNC $clearInit() Declaration @primitive
      $f_init = NIL
      RETURN THIS
    }
    int $f_isArg
    FUNC $setIsArg(bool v) Declaration @primitive
      $f_isArg = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsArg() bool @primitive
      IF $f_isArg == 0
        RETURN FALSE
      }
      RETURN $f_isArg == 2
    }
    FUNC $hasIsArg() bool @primitive
      RETURN $f_isArg != 0
    }
    FUNC $clearIsArg() Declaration @primitive
      $f_isArg = 0
      RETURN THIS
    }
    int $f_threeDots
    FUNC $setThreeDots(bool v) Declaration @primitive
      $f_threeDots = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getThreeDots() bool @primitive
      IF $f_threeDots == 0
        RETURN FALSE
      }
      RETURN $f_threeDots == 2
    }
    FUNC $hasThreeDots() bool @primitive
      RETURN $f_threeDots != 0
    }
    FUNC $clearThreeDots() Declaration @primitive
      $f_threeDots = 0
      RETURN THIS
    }
    string $f_commentBefore
    FUNC $setCommentBefore(string v) Declaration @primitive
      $f_commentBefore = v
      RETURN THIS
    }
    FUNC $getCommentBefore() string @primitive
      IF $f_commentBefore == NIL
        RETURN ""
      }
      RETURN $f_commentBefore
    }
    FUNC $hasCommentBefore() bool @primitive
      RETURN $f_commentBefore != NIL
    }
    FUNC $clearCommentBefore() Declaration @primitive
      $f_commentBefore = NIL
      RETURN THIS
    }
    string $f_commentAfter
    FUNC $setCommentAfter(string v) Declaration @primitive
      $f_commentAfter = v
      RETURN THIS
    }
    FUNC $getCommentAfter() string @primitive
      IF $f_commentAfter == NIL
        RETURN ""
      }
      RETURN $f_commentAfter
    }
    FUNC $hasCommentAfter() bool @primitive
      RETURN $f_commentAfter != NIL
    }
    FUNC $clearCommentAfter() Declaration @primitive
      $f_commentAfter = NIL
      RETURN THIS
    }
    int $f_preferCommentAfter
    FUNC $setPreferCommentAfter(bool v) Declaration @primitive
      $f_preferCommentAfter = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getPreferCommentAfter() bool @primitive
      IF $f_preferCommentAfter == 0
        RETURN FALSE
      }
      RETURN $f_preferCommentAfter == 2
    }
    FUNC $hasPreferCommentAfter() bool @primitive
      RETURN $f_preferCommentAfter != 0
    }
    FUNC $clearPreferCommentAfter() Declaration @primitive
      $f_preferCommentAfter = 0
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_name = NIL
      $f_dotName = NIL
      $f_dollar = 0
      $f_percent = 0
      $f_shared = 0
      $f_pos = NIL
      $f_ref = 0
      $f_isUse = 0
      $f_type = NIL
      $f_init = NIL
      $f_isArg = 0
      $f_threeDots = 0
      $f_commentBefore = NIL
      $f_commentAfter = NIL
      $f_preferCommentAfter = 0
      $has_ref = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 7; RETURN $f_ref
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 7; $f_ref = value; $has_ref = TRUE
      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_dollar == 2
        CASE 4; RETURN $f_percent == 2
        CASE 5; RETURN $f_shared == 2
        CASE 8; RETURN $f_isUse == 2
        CASE 11; RETURN $f_isArg == 2
        CASE 12; RETURN $f_threeDots == 2
        CASE 15; RETURN $f_preferCommentAfter == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 3; $f_dollar = (value ? 2 : 1)
        CASE 4; $f_percent = (value ? 2 : 1)
        CASE 5; $f_shared = (value ? 2 : 1)
        CASE 8; $f_isUse = (value ? 2 : 1)
        CASE 11; $f_isArg = (value ? 2 : 1)
        CASE 12; $f_threeDots = (value ? 2 : 1)
        CASE 15; $f_preferCommentAfter = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_name
        CASE 13; RETURN $f_commentBefore
        CASE 14; RETURN $f_commentAfter
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_name = value
        CASE 13; $f_commentBefore = value
        CASE 14; $f_commentAfter = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_dotName
        CASE 6; RETURN $f_pos
        CASE 9; RETURN $f_type
        CASE 10; RETURN $f_init
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_dotName = m
        CASE 6; $f_pos = m
        CASE 9; $f_type = m
        CASE 10; $f_init = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 2
          IF $f_dotName == NIL
            $f_dotName = NEW()
          }
          reader.addRef($f_dotName)
          $f_dotName.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 6
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 9
          IF $f_type == NIL
            $f_type = NEW()
          }
          reader.addRef($f_type)
          $f_type.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 10
          IF $f_init == NIL
            $f_init = NEW()
          }
          reader.addRef($f_init)
          $f_init.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasName()
        CASE 2; RETURN $hasDotName()
        CASE 3; RETURN $hasDollar()
        CASE 4; RETURN $hasPercent()
        CASE 5; RETURN $hasShared()
        CASE 6; RETURN $hasPos()
        CASE 7; RETURN $hasRef()
        CASE 8; RETURN $hasIsUse()
        CASE 9; RETURN $hasType()
        CASE 10; RETURN $hasInit()
        CASE 11; RETURN $hasIsArg()
        CASE 12; RETURN $hasThreeDots()
        CASE 13; RETURN $hasCommentBefore()
        CASE 14; RETURN $hasCommentAfter()
        CASE 15; RETURN $hasPreferCommentAfter()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Declaration
      Declaration ret = NEW()
      ret.f_name = $f_name
      IF $f_dotName != NIL
        ret.f_dotName = deep ? $f_dotName.copy(deep) : $f_dotName
      }
      ret.f_dollar = $f_dollar
      ret.f_percent = $f_percent
      ret.f_shared = $f_shared
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF $has_ref
        ret.has_ref = TRUE
        ret.f_ref = $f_ref
      }
      ret.f_isUse = $f_isUse
      IF $f_type != NIL
        ret.f_type = deep ? $f_type.copy(deep) : $f_type
      }
      IF $f_init != NIL
        ret.f_init = deep ? $f_init.copy(deep) : $f_init
      }
      ret.f_isArg = $f_isArg
      ret.f_threeDots = $f_threeDots
      ret.f_commentBefore = $f_commentBefore
      ret.f_commentAfter = $f_commentAfter
      ret.f_preferCommentAfter = $f_preferCommentAfter
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Declaration
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Declaration
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Declaration
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Declaration
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Declaration
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Declaration
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Declaration
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("name", 1, Proto.Type.string, FALSE),
        NEW("dotName", 2, Proto.Type.message, FALSE),
        NEW("dollar", 3, Proto.Type.bool, FALSE),
        NEW("percent", 4, Proto.Type.bool, FALSE),
        NEW("shared", 5, Proto.Type.bool, FALSE),
        NEW("pos", 6, Proto.Type.message, FALSE),
        NEW("ref", 7, Proto.Type.int64, FALSE),
        NEW("isUse", 8, Proto.Type.bool, FALSE),
        NEW("type", 9, Proto.Type.message, FALSE),
        NEW("init", 10, Proto.Type.message, FALSE),
        NEW("isArg", 11, Proto.Type.bool, FALSE),
        NEW("threeDots", 12, Proto.Type.bool, FALSE),
        NEW("commentBefore", 13, Proto.Type.string, FALSE),
        NEW("commentAfter", 14, Proto.Type.string, FALSE),
        NEW("preferCommentAfter", 15, Proto.Type.bool, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Declaration.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Declaration
        RETURN Declaration.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Declaration
        RETURN Declaration.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Declaration
        RETURN Declaration.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Declaration
        RETURN Declaration.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Declaration
        RETURN Declaration.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  ENUM TypeEnum @public
    unknown
    eINT
    eBOOL
    eSTATUS
    eNIL
    eANY
    eCSTRING
    eSTRING
    eVARSTRING
    eBYTES
    eVARBYTES
    eARRAY
    eTUPLE
    eLIST
    eDICT
    eMULTIDICT
    eSET
    eMULTISET
    eNEW
    ePROC
    eFUNC
    eLAMBDA
    ePROCREF
    eFUNCREF
    eMODULE
    eENUM
    eENUMVAL
    eBITS
    eBITSVAL
    eCLASS
    eOBJECT
    eINTERFACE
    eIOBJECT
    ePIECE
    eNAT
    eBIGINT
    eBIGNAT
    eFLOAT
    eFLOAT32
    eFLOAT80
    eFLOAT128
    eFIXED
    eALIAS
    eUSE
    eREF
    eNAME
    eUNKNOWN
  }
  dict<TypeEnum, int> fromTypeEnum2int = [
    TypeEnum.unknown: -1,
    TypeEnum.eINT: 0,
    TypeEnum.eBOOL: 1,
    TypeEnum.eSTATUS: 2,
    TypeEnum.eNIL: 3,
    TypeEnum.eANY: 4,
    TypeEnum.eCSTRING: 5,
    TypeEnum.eSTRING: 6,
    TypeEnum.eVARSTRING: 7,
    TypeEnum.eBYTES: 8,
    TypeEnum.eVARBYTES: 9,
    TypeEnum.eARRAY: 10,
    TypeEnum.eTUPLE: 11,
    TypeEnum.eLIST: 12,
    TypeEnum.eDICT: 13,
    TypeEnum.eMULTIDICT: 14,
    TypeEnum.eSET: 15,
    TypeEnum.eMULTISET: 16,
    TypeEnum.eNEW: 17,
    TypeEnum.ePROC: 18,
    TypeEnum.eFUNC: 19,
    TypeEnum.eLAMBDA: 49,
    TypeEnum.ePROCREF: 20,
    TypeEnum.eFUNCREF: 21,
    TypeEnum.eMODULE: 22,
    TypeEnum.eENUM: 23,
    TypeEnum.eENUMVAL: 24,
    TypeEnum.eBITS: 25,
    TypeEnum.eBITSVAL: 26,
    TypeEnum.eCLASS: 27,
    TypeEnum.eOBJECT: 28,
    TypeEnum.eINTERFACE: 29,
    TypeEnum.eIOBJECT: 30,
    TypeEnum.ePIECE: 48,
    TypeEnum.eNAT: 34,
    TypeEnum.eBIGINT: 35,
    TypeEnum.eBIGNAT: 36,
    TypeEnum.eFLOAT: 40,
    TypeEnum.eFLOAT32: 41,
    TypeEnum.eFLOAT80: 42,
    TypeEnum.eFLOAT128: 43,
    TypeEnum.eFIXED: 44,
    TypeEnum.eALIAS: 45,
    TypeEnum.eUSE: 46,
    TypeEnum.eREF: 47,
    TypeEnum.eNAME: 100,
    TypeEnum.eUNKNOWN: 101,
  ]
  dict<int, TypeEnum> int2TypeEnum = [
    0: TypeEnum.eINT,
    1: TypeEnum.eBOOL,
    2: TypeEnum.eSTATUS,
    3: TypeEnum.eNIL,
    4: TypeEnum.eANY,
    5: TypeEnum.eCSTRING,
    6: TypeEnum.eSTRING,
    7: TypeEnum.eVARSTRING,
    8: TypeEnum.eBYTES,
    9: TypeEnum.eVARBYTES,
    10: TypeEnum.eARRAY,
    11: TypeEnum.eTUPLE,
    12: TypeEnum.eLIST,
    13: TypeEnum.eDICT,
    14: TypeEnum.eMULTIDICT,
    15: TypeEnum.eSET,
    16: TypeEnum.eMULTISET,
    17: TypeEnum.eNEW,
    18: TypeEnum.ePROC,
    19: TypeEnum.eFUNC,
    49: TypeEnum.eLAMBDA,
    20: TypeEnum.ePROCREF,
    21: TypeEnum.eFUNCREF,
    22: TypeEnum.eMODULE,
    23: TypeEnum.eENUM,
    24: TypeEnum.eENUMVAL,
    25: TypeEnum.eBITS,
    26: TypeEnum.eBITSVAL,
    27: TypeEnum.eCLASS,
    28: TypeEnum.eOBJECT,
    29: TypeEnum.eINTERFACE,
    30: TypeEnum.eIOBJECT,
    48: TypeEnum.ePIECE,
    34: TypeEnum.eNAT,
    35: TypeEnum.eBIGINT,
    36: TypeEnum.eBIGNAT,
    40: TypeEnum.eFLOAT,
    41: TypeEnum.eFLOAT32,
    42: TypeEnum.eFLOAT80,
    43: TypeEnum.eFLOAT128,
    44: TypeEnum.eFIXED,
    45: TypeEnum.eALIAS,
    46: TypeEnum.eUSE,
    47: TypeEnum.eREF,
    100: TypeEnum.eNAME,
    101: TypeEnum.eUNKNOWN,
  ]
  CLASS Type EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Type"
    }
    TypeEnum $f_type
    FUNC $setType(TypeEnum v) Type @primitive
      $f_type = v
      RETURN THIS
    }
    FUNC $getType() TypeEnum @primitive
      IF $f_type == TypeEnum.unknown
        THROW "type was not set"
      }
      RETURN $f_type
    }
    FUNC $hasType() bool @primitive
      RETURN $f_type != TypeEnum.unknown
    }
    FUNC $clearType() Type @primitive
      $f_type = TypeEnum.unknown
      RETURN THIS
    }
    string $f_text
    FUNC $setText(string v) Type @primitive
      $f_text = v
      RETURN THIS
    }
    FUNC $getText() string @primitive
      IF $f_text == NIL
        RETURN ""
      }
      RETURN $f_text
    }
    FUNC $hasText() bool @primitive
      RETURN $f_text != NIL
    }
    FUNC $clearText() Type @primitive
      $f_text = NIL
      RETURN THIS
    }
    Position $f_pos
    FUNC $setPos(Position v) Type @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Type @primitive
      $f_pos = NIL
      RETURN THIS
    }
    Attributes $f_attr
    FUNC $setAttr(Attributes v) Type @primitive
      $f_attr = v
      RETURN THIS
    }
    FUNC $newAttr() Attributes
      $f_attr = NEW()
      RETURN $f_attr
    }
    FUNC $getAttr() Attributes @primitive
      IF $f_attr == NIL
        THROW "attr was not set"
      }
      RETURN $f_attr
    }
    FUNC $hasAttr() bool @primitive
      RETURN $f_attr != NIL
    }
    FUNC $clearAttr() Type @primitive
      $f_attr = NIL
      RETURN THIS
    }
    SymbolRef $f_classRef
    FUNC $setClassRef(SymbolRef v) Type @primitive
      $f_classRef = v
      RETURN THIS
    }
    FUNC $newClassRef() SymbolRef
      $f_classRef = NEW()
      RETURN $f_classRef
    }
    FUNC $getClassRef() SymbolRef @primitive
      IF $f_classRef == NIL
        THROW "classRef was not set"
      }
      RETURN $f_classRef
    }
    FUNC $hasClassRef() bool @primitive
      RETURN $f_classRef != NIL
    }
    FUNC $clearClassRef() Type @primitive
      $f_classRef = NIL
      RETURN THIS
    }
    int $f_decimals
    bool $has_decimals
    FUNC $setDecimals(int v) Type @primitive
      $f_decimals = v
      $has_decimals = TRUE
      RETURN THIS
    }
    FUNC $getDecimals() int @primitive
      IF !$has_decimals
        RETURN 0
      }
      RETURN $f_decimals
    }
    FUNC $hasDecimals() bool @primitive
      RETURN $has_decimals
    }
    FUNC $clearDecimals() Type @primitive
      $f_decimals = 0
      $has_decimals = FALSE
      RETURN THIS
    }
    int $f_mask
    bool $has_mask
    FUNC $setMask(int v) Type @primitive
      $f_mask = v
      $has_mask = TRUE
      RETURN THIS
    }
    FUNC $getMask() int @primitive
      IF !$has_mask
        RETURN 0
      }
      RETURN $f_mask
    }
    FUNC $hasMask() bool @primitive
      RETURN $has_mask
    }
    FUNC $clearMask() Type @primitive
      $f_mask = 0
      $has_mask = FALSE
      RETURN THIS
    }
    ClassType $f_classDecl
    FUNC $setClassDecl(ClassType v) Type @primitive
      $f_classDecl = v
      RETURN THIS
    }
    FUNC $newClassDecl() ClassType
      $f_classDecl = NEW()
      RETURN $f_classDecl
    }
    FUNC $getClassDecl() ClassType @primitive
      IF $f_classDecl == NIL
        THROW "classDecl was not set"
      }
      RETURN $f_classDecl
    }
    FUNC $hasClassDecl() bool @primitive
      RETURN $f_classDecl != NIL
    }
    FUNC $clearClassDecl() Type @primitive
      $f_classDecl = NIL
      RETURN THIS
    }
    BitsType $f_bitsDecl
    FUNC $setBitsDecl(BitsType v) Type @primitive
      $f_bitsDecl = v
      RETURN THIS
    }
    FUNC $newBitsDecl() BitsType
      $f_bitsDecl = NEW()
      RETURN $f_bitsDecl
    }
    FUNC $getBitsDecl() BitsType @primitive
      IF $f_bitsDecl == NIL
        THROW "bitsDecl was not set"
      }
      RETURN $f_bitsDecl
    }
    FUNC $hasBitsDecl() bool @primitive
      RETURN $f_bitsDecl != NIL
    }
    FUNC $clearBitsDecl() Type @primitive
      $f_bitsDecl = NIL
      RETURN THIS
    }
    EnumType $f_enumDecl
    FUNC $setEnumDecl(EnumType v) Type @primitive
      $f_enumDecl = v
      RETURN THIS
    }
    FUNC $newEnumDecl() EnumType
      $f_enumDecl = NEW()
      RETURN $f_enumDecl
    }
    FUNC $getEnumDecl() EnumType @primitive
      IF $f_enumDecl == NIL
        THROW "enumDecl was not set"
      }
      RETURN $f_enumDecl
    }
    FUNC $hasEnumDecl() bool @primitive
      RETURN $f_enumDecl != NIL
    }
    FUNC $clearEnumDecl() Type @primitive
      $f_enumDecl = NIL
      RETURN THIS
    }
    ModuleType $f_moduleDecl
    FUNC $setModuleDecl(ModuleType v) Type @primitive
      $f_moduleDecl = v
      RETURN THIS
    }
    FUNC $newModuleDecl() ModuleType
      $f_moduleDecl = NEW()
      RETURN $f_moduleDecl
    }
    FUNC $getModuleDecl() ModuleType @primitive
      IF $f_moduleDecl == NIL
        THROW "moduleDecl was not set"
      }
      RETURN $f_moduleDecl
    }
    FUNC $hasModuleDecl() bool @primitive
      RETURN $f_moduleDecl != NIL
    }
    FUNC $clearModuleDecl() Type @primitive
      $f_moduleDecl = NIL
      RETURN THIS
    }
    MethodType $f_methodDecl
    FUNC $setMethodDecl(MethodType v) Type @primitive
      $f_methodDecl = v
      RETURN THIS
    }
    FUNC $newMethodDecl() MethodType
      $f_methodDecl = NEW()
      RETURN $f_methodDecl
    }
    FUNC $getMethodDecl() MethodType @primitive
      IF $f_methodDecl == NIL
        THROW "methodDecl was not set"
      }
      RETURN $f_methodDecl
    }
    FUNC $hasMethodDecl() bool @primitive
      RETURN $f_methodDecl != NIL
    }
    FUNC $clearMethodDecl() Type @primitive
      $f_methodDecl = NIL
      RETURN THIS
    }
    ContainerType $f_container
    FUNC $setContainer(ContainerType v) Type @primitive
      $f_container = v
      RETURN THIS
    }
    FUNC $newContainer() ContainerType
      $f_container = NEW()
      RETURN $f_container
    }
    FUNC $getContainer() ContainerType @primitive
      IF $f_container == NIL
        THROW "container was not set"
      }
      RETURN $f_container
    }
    FUNC $hasContainer() bool @primitive
      RETURN $f_container != NIL
    }
    FUNC $clearContainer() Type @primitive
      $f_container = NIL
      RETURN THIS
    }
    AliasType $f_alias
    FUNC $setAlias(AliasType v) Type @primitive
      $f_alias = v
      RETURN THIS
    }
    FUNC $newAlias() AliasType
      $f_alias = NEW()
      RETURN $f_alias
    }
    FUNC $getAlias() AliasType @primitive
      IF $f_alias == NIL
        THROW "alias was not set"
      }
      RETURN $f_alias
    }
    FUNC $hasAlias() bool @primitive
      RETURN $f_alias != NIL
    }
    FUNC $clearAlias() Type @primitive
      $f_alias = NIL
      RETURN THIS
    }
    Type $f_ref
    FUNC $setRef(Type v) Type @primitive
      $f_ref = v
      RETURN THIS
    }
    FUNC $newRef() Type
      $f_ref = NEW()
      RETURN $f_ref
    }
    FUNC $getRef() Type @primitive
      IF $f_ref == NIL
        THROW "ref was not set"
      }
      RETURN $f_ref
    }
    FUNC $hasRef() bool @primitive
      RETURN $f_ref != NIL
    }
    FUNC $clearRef() Type @primitive
      $f_ref = NIL
      RETURN THIS
    }
    Expression $f_name
    FUNC $setName(Expression v) Type @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $newName() Expression
      $f_name = NEW()
      RETURN $f_name
    }
    FUNC $getName() Expression @primitive
      IF $f_name == NIL
        THROW "name was not set"
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() Type @primitive
      $f_name = NIL
      RETURN THIS
    }
    string $f_itemName
    FUNC $setItemName(string v) Type @primitive
      $f_itemName = v
      RETURN THIS
    }
    FUNC $getItemName() string @primitive
      IF $f_itemName == NIL
        RETURN ""
      }
      RETURN $f_itemName
    }
    FUNC $hasItemName() bool @primitive
      RETURN $f_itemName != NIL
    }
    FUNC $clearItemName() Type @primitive
      $f_itemName = NIL
      RETURN THIS
    }
    Position $f_itemNamePos
    FUNC $setItemNamePos(Position v) Type @primitive
      $f_itemNamePos = v
      RETURN THIS
    }
    FUNC $newItemNamePos() Position
      $f_itemNamePos = NEW()
      RETURN $f_itemNamePos
    }
    FUNC $getItemNamePos() Position @primitive
      IF $f_itemNamePos == NIL
        THROW "itemNamePos was not set"
      }
      RETURN $f_itemNamePos
    }
    FUNC $hasItemNamePos() bool @primitive
      RETURN $f_itemNamePos != NIL
    }
    FUNC $clearItemNamePos() Type @primitive
      $f_itemNamePos = NIL
      RETURN THIS
    }
    int $f_isReturn
    FUNC $setIsReturn(bool v) Type @primitive
      $f_isReturn = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsReturn() bool @primitive
      IF $f_isReturn == 0
        RETURN FALSE
      }
      RETURN $f_isReturn == 2
    }
    FUNC $hasIsReturn() bool @primitive
      RETURN $f_isReturn != 0
    }
    FUNC $clearIsReturn() Type @primitive
      $f_isReturn = 0
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_type = TypeEnum.unknown
      $f_text = NIL
      $f_pos = NIL
      $f_attr = NIL
      $f_classRef = NIL
      $f_decimals = 0
      $f_mask = 0
      $f_classDecl = NIL
      $f_bitsDecl = NIL
      $f_enumDecl = NIL
      $f_moduleDecl = NIL
      $f_methodDecl = NIL
      $f_container = NIL
      $f_alias = NIL
      $f_ref = NIL
      $f_name = NIL
      $f_itemName = NIL
      $f_itemNamePos = NIL
      $f_isReturn = 0
      $has_decimals = FALSE
      $has_mask = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN $hasType()
    }
    FUNC $enumGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN fromTypeEnum2int[$f_type]
      }
      RETURN 0
    }
    FUNC $enumNameGet(int fieldNr) string @replace @primitive
      string s
      SWITCH fieldNr
        CASE 1; s = $f_type.ToString(); RETURN s == "unknown" ? s : s.slice(1)
      }
      RETURN ""
    }
    PROC $enumSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_type = int2TypeEnum.has(value) ? int2TypeEnum[value] : TypeEnum.unknown
      }
    }
    PROC $enumNameSet(int fieldNr, string name) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_type = TypeEnum.FromString("e" .. name)

      }
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 6; RETURN $f_decimals
        CASE 7; RETURN $f_mask
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 6; $f_decimals = value; $has_decimals = TRUE
        CASE 7; $f_mask = value; $has_mask = TRUE
      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 17; RETURN $f_isReturn == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 17; $f_isReturn = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_text
        CASE 18; RETURN $f_itemName
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_text = value
        CASE 18; $f_itemName = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_pos
        CASE 4; RETURN $f_attr
        CASE 5; RETURN $f_classRef
        CASE 8; RETURN $f_classDecl
        CASE 9; RETURN $f_bitsDecl
        CASE 10; RETURN $f_enumDecl
        CASE 11; RETURN $f_moduleDecl
        CASE 12; RETURN $f_methodDecl
        CASE 13; RETURN $f_container
        CASE 14; RETURN $f_alias
        CASE 15; RETURN $f_ref
        CASE 16; RETURN $f_name
        CASE 19; RETURN $f_itemNamePos
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 3; $f_pos = m
        CASE 4; $f_attr = m
        CASE 5; $f_classRef = m
        CASE 8; $f_classDecl = m
        CASE 9; $f_bitsDecl = m
        CASE 10; $f_enumDecl = m
        CASE 11; $f_moduleDecl = m
        CASE 12; $f_methodDecl = m
        CASE 13; $f_container = m
        CASE 14; $f_alias = m
        CASE 15; $f_ref = m
        CASE 16; $f_name = m
        CASE 19; $f_itemNamePos = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 3
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_attr == NIL
            $f_attr = NEW()
          }
          reader.addRef($f_attr)
          $f_attr.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 5
          IF $f_classRef == NIL
            $f_classRef = NEW()
          }
          reader.addRef($f_classRef)
          $f_classRef.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 8
          IF $f_classDecl == NIL
            $f_classDecl = NEW()
          }
          reader.addRef($f_classDecl)
          $f_classDecl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 9
          IF $f_bitsDecl == NIL
            $f_bitsDecl = NEW()
          }
          reader.addRef($f_bitsDecl)
          $f_bitsDecl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 10
          IF $f_enumDecl == NIL
            $f_enumDecl = NEW()
          }
          reader.addRef($f_enumDecl)
          $f_enumDecl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 11
          IF $f_moduleDecl == NIL
            $f_moduleDecl = NEW()
          }
          reader.addRef($f_moduleDecl)
          $f_moduleDecl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 12
          IF $f_methodDecl == NIL
            $f_methodDecl = NEW()
          }
          reader.addRef($f_methodDecl)
          $f_methodDecl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 13
          IF $f_container == NIL
            $f_container = NEW()
          }
          reader.addRef($f_container)
          $f_container.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 14
          IF $f_alias == NIL
            $f_alias = NEW()
          }
          reader.addRef($f_alias)
          $f_alias.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 15
          IF $f_ref == NIL
            $f_ref = NEW()
          }
          reader.addRef($f_ref)
          $f_ref.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 16
          IF $f_name == NIL
            $f_name = NEW()
          }
          reader.addRef($f_name)
          $f_name.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 19
          IF $f_itemNamePos == NIL
            $f_itemNamePos = NEW()
          }
          reader.addRef($f_itemNamePos)
          $f_itemNamePos.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasType()
        CASE 2; RETURN $hasText()
        CASE 3; RETURN $hasPos()
        CASE 4; RETURN $hasAttr()
        CASE 5; RETURN $hasClassRef()
        CASE 6; RETURN $hasDecimals()
        CASE 7; RETURN $hasMask()
        CASE 8; RETURN $hasClassDecl()
        CASE 9; RETURN $hasBitsDecl()
        CASE 10; RETURN $hasEnumDecl()
        CASE 11; RETURN $hasModuleDecl()
        CASE 12; RETURN $hasMethodDecl()
        CASE 13; RETURN $hasContainer()
        CASE 14; RETURN $hasAlias()
        CASE 15; RETURN $hasRef()
        CASE 16; RETURN $hasName()
        CASE 18; RETURN $hasItemName()
        CASE 19; RETURN $hasItemNamePos()
        CASE 17; RETURN $hasIsReturn()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Type
      Type ret = NEW()
      ret.f_type = $f_type
      ret.f_text = $f_text
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF $f_attr != NIL
        ret.f_attr = deep ? $f_attr.copy(deep) : $f_attr
      }
      IF $f_classRef != NIL
        ret.f_classRef = deep ? $f_classRef.copy(deep) : $f_classRef
      }
      IF $has_decimals
        ret.has_decimals = TRUE
        ret.f_decimals = $f_decimals
      }
      IF $has_mask
        ret.has_mask = TRUE
        ret.f_mask = $f_mask
      }
      IF $f_classDecl != NIL
        ret.f_classDecl = deep ? $f_classDecl.copy(deep) : $f_classDecl
      }
      IF $f_bitsDecl != NIL
        ret.f_bitsDecl = deep ? $f_bitsDecl.copy(deep) : $f_bitsDecl
      }
      IF $f_enumDecl != NIL
        ret.f_enumDecl = deep ? $f_enumDecl.copy(deep) : $f_enumDecl
      }
      IF $f_moduleDecl != NIL
        ret.f_moduleDecl = deep ? $f_moduleDecl.copy(deep) : $f_moduleDecl
      }
      IF $f_methodDecl != NIL
        ret.f_methodDecl = deep ? $f_methodDecl.copy(deep) : $f_methodDecl
      }
      IF $f_container != NIL
        ret.f_container = deep ? $f_container.copy(deep) : $f_container
      }
      IF $f_alias != NIL
        ret.f_alias = deep ? $f_alias.copy(deep) : $f_alias
      }
      IF $f_ref != NIL
        ret.f_ref = deep ? $f_ref.copy(deep) : $f_ref
      }
      IF $f_name != NIL
        ret.f_name = deep ? $f_name.copy(deep) : $f_name
      }
      ret.f_itemName = $f_itemName
      IF $f_itemNamePos != NIL
        ret.f_itemNamePos = deep ? $f_itemNamePos.copy(deep) : $f_itemNamePos
      }
      ret.f_isReturn = $f_isReturn
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Type
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Type
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Type
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Type
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Type
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Type
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Type
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("type", 1, Proto.Type.enum, FALSE),
        NEW("text", 2, Proto.Type.string, FALSE),
        NEW("pos", 3, Proto.Type.message, FALSE),
        NEW("attr", 4, Proto.Type.message, FALSE),
        NEW("classRef", 5, Proto.Type.message, FALSE),
        NEW("decimals", 6, Proto.Type.int64, FALSE),
        NEW("mask", 7, Proto.Type.int64, FALSE),
        NEW("classDecl", 8, Proto.Type.message, FALSE),
        NEW("bitsDecl", 9, Proto.Type.message, FALSE),
        NEW("enumDecl", 10, Proto.Type.message, FALSE),
        NEW("moduleDecl", 11, Proto.Type.message, FALSE),
        NEW("methodDecl", 12, Proto.Type.message, FALSE),
        NEW("container", 13, Proto.Type.message, FALSE),
        NEW("alias", 14, Proto.Type.message, FALSE),
        NEW("ref", 15, Proto.Type.message, FALSE),
        NEW("name", 16, Proto.Type.message, FALSE),
        NEW("itemName", 18, Proto.Type.string, FALSE),
        NEW("itemNamePos", 19, Proto.Type.message, FALSE),
        NEW("isReturn", 17, Proto.Type.bool, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Type.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Type
        RETURN Type.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Type
        RETURN Type.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Type
        RETURN Type.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Type
        RETURN Type.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Type
        RETURN Type.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  ENUM Visibility @public
    unknown
    eUNSET
    ePRIVATE
    ePROTECTED
    ePUBLIC
    eLOCAL
    eFILE
    eDIRECTORY
  }
  dict<Visibility, int> fromVisibility2int = [
    Visibility.unknown: -1,
    Visibility.eUNSET: 0,
    Visibility.ePRIVATE: 1,
    Visibility.ePROTECTED: 2,
    Visibility.ePUBLIC: 3,
    Visibility.eLOCAL: 4,
    Visibility.eFILE: 5,
    Visibility.eDIRECTORY: 6,
  ]
  dict<int, Visibility> int2Visibility = [
    0: Visibility.eUNSET,
    1: Visibility.ePRIVATE,
    2: Visibility.ePROTECTED,
    3: Visibility.ePUBLIC,
    4: Visibility.eLOCAL,
    5: Visibility.eFILE,
    6: Visibility.eDIRECTORY,
  ]
  CLASS Attributes EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Attributes"
    }
    int $f_abstract
    FUNC $setAbstract(bool v) Attributes @primitive
      $f_abstract = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getAbstract() bool @primitive
      IF $f_abstract == 0
        RETURN FALSE
      }
      RETURN $f_abstract == 2
    }
    FUNC $hasAbstract() bool @primitive
      RETURN $f_abstract != 0
    }
    FUNC $clearAbstract() Attributes @primitive
      $f_abstract = 0
      RETURN THIS
    }
    int $f_isdefault
    FUNC $setIsdefault(bool v) Attributes @primitive
      $f_isdefault = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsdefault() bool @primitive
      IF $f_isdefault == 0
        RETURN FALSE
      }
      RETURN $f_isdefault == 2
    }
    FUNC $hasIsdefault() bool @primitive
      RETURN $f_isdefault != 0
    }
    FUNC $clearIsdefault() Attributes @primitive
      $f_isdefault = 0
      RETURN THIS
    }
    int $f_final
    FUNC $setFinal(bool v) Attributes @primitive
      $f_final = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getFinal() bool @primitive
      IF $f_final == 0
        RETURN FALSE
      }
      RETURN $f_final == 2
    }
    FUNC $hasFinal() bool @primitive
      RETURN $f_final != 0
    }
    FUNC $clearFinal() Attributes @primitive
      $f_final = 0
      RETURN THIS
    }
    int $f_define
    FUNC $setDefine(bool v) Attributes @primitive
      $f_define = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getDefine() bool @primitive
      IF $f_define == 0
        RETURN FALSE
      }
      RETURN $f_define == 2
    }
    FUNC $hasDefine() bool @primitive
      RETURN $f_define != 0
    }
    FUNC $clearDefine() Attributes @primitive
      $f_define = 0
      RETURN THIS
    }
    int $f_replace
    FUNC $setReplace(bool v) Attributes @primitive
      $f_replace = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getReplace() bool @primitive
      IF $f_replace == 0
        RETURN FALSE
      }
      RETURN $f_replace == 2
    }
    FUNC $hasReplace() bool @primitive
      RETURN $f_replace != 0
    }
    FUNC $clearReplace() Attributes @primitive
      $f_replace = 0
      RETURN THIS
    }
    int $f_earlyInit
    FUNC $setEarlyInit(bool v) Attributes @primitive
      $f_earlyInit = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getEarlyInit() bool @primitive
      IF $f_earlyInit == 0
        RETURN FALSE
      }
      RETURN $f_earlyInit == 2
    }
    FUNC $hasEarlyInit() bool @primitive
      RETURN $f_earlyInit != 0
    }
    FUNC $clearEarlyInit() Attributes @primitive
      $f_earlyInit = 0
      RETURN THIS
    }
    int $f_primitive
    FUNC $setPrimitive(bool v) Attributes @primitive
      $f_primitive = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getPrimitive() bool @primitive
      IF $f_primitive == 0
        RETURN FALSE
      }
      RETURN $f_primitive == 2
    }
    FUNC $hasPrimitive() bool @primitive
      RETURN $f_primitive != 0
    }
    FUNC $clearPrimitive() Attributes @primitive
      $f_primitive = 0
      RETURN THIS
    }
    int $f_noBacktrace
    FUNC $setNoBacktrace(bool v) Attributes @primitive
      $f_noBacktrace = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getNoBacktrace() bool @primitive
      IF $f_noBacktrace == 0
        RETURN FALSE
      }
      RETURN $f_noBacktrace == 2
    }
    FUNC $hasNoBacktrace() bool @primitive
      RETURN $f_noBacktrace != 0
    }
    FUNC $clearNoBacktrace() Attributes @primitive
      $f_noBacktrace = 0
      RETURN THIS
    }
    int $f_wantBacktrace
    FUNC $setWantBacktrace(bool v) Attributes @primitive
      $f_wantBacktrace = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getWantBacktrace() bool @primitive
      IF $f_wantBacktrace == 0
        RETURN FALSE
      }
      RETURN $f_wantBacktrace == 2
    }
    FUNC $hasWantBacktrace() bool @primitive
      RETURN $f_wantBacktrace != 0
    }
    FUNC $clearWantBacktrace() Attributes @primitive
      $f_wantBacktrace = 0
      RETURN THIS
    }
    Visibility $f_visibility
    FUNC $setVisibility(Visibility v) Attributes @primitive
      $f_visibility = v
      RETURN THIS
    }
    FUNC $getVisibility() Visibility @primitive
      IF $f_visibility == Visibility.unknown
        THROW "visibility was not set"
      }
      RETURN $f_visibility
    }
    FUNC $hasVisibility() bool @primitive
      RETURN $f_visibility != Visibility.unknown
    }
    FUNC $clearVisibility() Attributes @primitive
      $f_visibility = Visibility.unknown
      RETURN THIS
    }
    Visibility $f_readVisibility
    FUNC $setReadVisibility(Visibility v) Attributes @primitive
      $f_readVisibility = v
      RETURN THIS
    }
    FUNC $getReadVisibility() Visibility @primitive
      IF $f_readVisibility == Visibility.unknown
        THROW "readVisibility was not set"
      }
      RETURN $f_readVisibility
    }
    FUNC $hasReadVisibility() bool @primitive
      RETURN $f_readVisibility != Visibility.unknown
    }
    FUNC $clearReadVisibility() Attributes @primitive
      $f_readVisibility = Visibility.unknown
      RETURN THIS
    }
    Visibility $f_itemsVisibility
    FUNC $setItemsVisibility(Visibility v) Attributes @primitive
      $f_itemsVisibility = v
      RETURN THIS
    }
    FUNC $getItemsVisibility() Visibility @primitive
      IF $f_itemsVisibility == Visibility.unknown
        THROW "itemsVisibility was not set"
      }
      RETURN $f_itemsVisibility
    }
    FUNC $hasItemsVisibility() bool @primitive
      RETURN $f_itemsVisibility != Visibility.unknown
    }
    FUNC $clearItemsVisibility() Attributes @primitive
      $f_itemsVisibility = Visibility.unknown
      RETURN THIS
    }
    int $f_notOnExit
    FUNC $setNotOnExit(bool v) Attributes @primitive
      $f_notOnExit = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getNotOnExit() bool @primitive
      IF $f_notOnExit == 0
        RETURN FALSE
      }
      RETURN $f_notOnExit == 2
    }
    FUNC $hasNotOnExit() bool @primitive
      RETURN $f_notOnExit != 0
    }
    FUNC $clearNotOnExit() Attributes @primitive
      $f_notOnExit = 0
      RETURN THIS
    }
    int $f_javascript
    FUNC $setJavascript(bool v) Attributes @primitive
      $f_javascript = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getJavascript() bool @primitive
      IF $f_javascript == 0
        RETURN FALSE
      }
      RETURN $f_javascript == 2
    }
    FUNC $hasJavascript() bool @primitive
      RETURN $f_javascript != 0
    }
    FUNC $clearJavascript() Attributes @primitive
      $f_javascript = 0
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_abstract = 0
      $f_isdefault = 0
      $f_final = 0
      $f_define = 0
      $f_replace = 0
      $f_earlyInit = 0
      $f_primitive = 0
      $f_noBacktrace = 0
      $f_wantBacktrace = 0
      $f_visibility = Visibility.unknown
      $f_readVisibility = Visibility.unknown
      $f_itemsVisibility = Visibility.unknown
      $f_notOnExit = 0
      $f_javascript = 0
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $enumGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 10; RETURN fromVisibility2int[$f_visibility]
        CASE 11; RETURN fromVisibility2int[$f_readVisibility]
        CASE 12; RETURN fromVisibility2int[$f_itemsVisibility]
      }
      RETURN 0
    }
    FUNC $enumNameGet(int fieldNr) string @replace @primitive
      string s
      SWITCH fieldNr
        CASE 10; s = $f_visibility.ToString(); RETURN s == "unknown" ? s : s.slice(1)
        CASE 11; s = $f_readVisibility.ToString(); RETURN s == "unknown" ? s : s.slice(1)
        CASE 12; s = $f_itemsVisibility.ToString(); RETURN s == "unknown" ? s : s.slice(1)
      }
      RETURN ""
    }
    PROC $enumSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 10; $f_visibility = int2Visibility.has(value) ? int2Visibility[value] : Visibility.unknown
        CASE 11; $f_readVisibility = int2Visibility.has(value) ? int2Visibility[value] : Visibility.unknown
        CASE 12; $f_itemsVisibility = int2Visibility.has(value) ? int2Visibility[value] : Visibility.unknown
      }
    }
    PROC $enumNameSet(int fieldNr, string name) @replace @primitive
      SWITCH fieldNr
        CASE 10; $f_visibility = Visibility.FromString("e" .. name)

        CASE 11; $f_readVisibility = Visibility.FromString("e" .. name)

        CASE 12; $f_itemsVisibility = Visibility.FromString("e" .. name)

      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_abstract == 2
        CASE 2; RETURN $f_isdefault == 2
        CASE 3; RETURN $f_final == 2
        CASE 4; RETURN $f_define == 2
        CASE 5; RETURN $f_replace == 2
        CASE 6; RETURN $f_earlyInit == 2
        CASE 7; RETURN $f_primitive == 2
        CASE 8; RETURN $f_noBacktrace == 2
        CASE 9; RETURN $f_wantBacktrace == 2
        CASE 13; RETURN $f_notOnExit == 2
        CASE 14; RETURN $f_javascript == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_abstract = (value ? 2 : 1)
        CASE 2; $f_isdefault = (value ? 2 : 1)
        CASE 3; $f_final = (value ? 2 : 1)
        CASE 4; $f_define = (value ? 2 : 1)
        CASE 5; $f_replace = (value ? 2 : 1)
        CASE 6; $f_earlyInit = (value ? 2 : 1)
        CASE 7; $f_primitive = (value ? 2 : 1)
        CASE 8; $f_noBacktrace = (value ? 2 : 1)
        CASE 9; $f_wantBacktrace = (value ? 2 : 1)
        CASE 13; $f_notOnExit = (value ? 2 : 1)
        CASE 14; $f_javascript = (value ? 2 : 1)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasAbstract()
        CASE 2; RETURN $hasIsdefault()
        CASE 3; RETURN $hasFinal()
        CASE 4; RETURN $hasDefine()
        CASE 5; RETURN $hasReplace()
        CASE 6; RETURN $hasEarlyInit()
        CASE 7; RETURN $hasPrimitive()
        CASE 8; RETURN $hasNoBacktrace()
        CASE 9; RETURN $hasWantBacktrace()
        CASE 10; RETURN $hasVisibility()
        CASE 11; RETURN $hasReadVisibility()
        CASE 12; RETURN $hasItemsVisibility()
        CASE 13; RETURN $hasNotOnExit()
        CASE 14; RETURN $hasJavascript()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Attributes
      Attributes ret = NEW()
      ret.f_abstract = $f_abstract
      ret.f_isdefault = $f_isdefault
      ret.f_final = $f_final
      ret.f_define = $f_define
      ret.f_replace = $f_replace
      ret.f_earlyInit = $f_earlyInit
      ret.f_primitive = $f_primitive
      ret.f_noBacktrace = $f_noBacktrace
      ret.f_wantBacktrace = $f_wantBacktrace
      ret.f_visibility = $f_visibility
      ret.f_readVisibility = $f_readVisibility
      ret.f_itemsVisibility = $f_itemsVisibility
      ret.f_notOnExit = $f_notOnExit
      ret.f_javascript = $f_javascript
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Attributes
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Attributes
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Attributes
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Attributes
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Attributes
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Attributes
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Attributes
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("abstract", 1, Proto.Type.bool, FALSE),
        NEW("isdefault", 2, Proto.Type.bool, FALSE),
        NEW("final", 3, Proto.Type.bool, FALSE),
        NEW("define", 4, Proto.Type.bool, FALSE),
        NEW("replace", 5, Proto.Type.bool, FALSE),
        NEW("earlyInit", 6, Proto.Type.bool, FALSE),
        NEW("primitive", 7, Proto.Type.bool, FALSE),
        NEW("noBacktrace", 8, Proto.Type.bool, FALSE),
        NEW("wantBacktrace", 9, Proto.Type.bool, FALSE),
        NEW("visibility", 10, Proto.Type.enum, FALSE),
        NEW("readVisibility", 11, Proto.Type.enum, FALSE),
        NEW("itemsVisibility", 12, Proto.Type.enum, FALSE),
        NEW("notOnExit", 13, Proto.Type.bool, FALSE),
        NEW("javascript", 14, Proto.Type.bool, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Attributes.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Attributes
        RETURN Attributes.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Attributes
        RETURN Attributes.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Attributes
        RETURN Attributes.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Attributes
        RETURN Attributes.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Attributes
        RETURN Attributes.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS ClassType EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "ClassType"
    }
    string $f_name
    FUNC $setName(string v) ClassType @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $getName() string @primitive
      IF $f_name == NIL
        RETURN ""
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() ClassType @primitive
      $f_name = NIL
      RETURN THIS
    }
    int $f_isInterface
    FUNC $setIsInterface(bool v) ClassType @primitive
      $f_isInterface = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsInterface() bool @primitive
      IF $f_isInterface == 0
        RETURN FALSE
      }
      RETURN $f_isInterface == 2
    }
    FUNC $hasIsInterface() bool @primitive
      RETURN $f_isInterface != 0
    }
    FUNC $clearIsInterface() ClassType @primitive
      $f_isInterface = 0
      RETURN THIS
    }
    int $f_isPiece
    FUNC $setIsPiece(bool v) ClassType @primitive
      $f_isPiece = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsPiece() bool @primitive
      IF $f_isPiece == 0
        RETURN FALSE
      }
      RETURN $f_isPiece == 2
    }
    FUNC $hasIsPiece() bool @primitive
      RETURN $f_isPiece != 0
    }
    FUNC $clearIsPiece() ClassType @primitive
      $f_isPiece = 0
      RETURN THIS
    }
    list<Id> $f_templateTypeName
    FUNC $addTemplateTypeName(Id v) ClassType
      IF $f_templateTypeName == NIL
        $f_templateTypeName = NEW()
      }
      $f_templateTypeName.add(v)
      RETURN THIS
    }
    FUNC $addNewTemplateTypeName() Id
      Id v = NEW()
      $addTemplateTypeName(v)
      RETURN v
    }
    FUNC $getTemplateTypeName(int i) Id @primitive
      IF i < 0 || $f_templateTypeName == NIL || i >= $f_templateTypeName.Size()
        THROW "list index out of range for templateTypeName: " .. i
      }
      RETURN $f_templateTypeName[i]
    }
    FUNC $getTemplateTypeNameList() list<Id> @primitive
      RETURN $f_templateTypeName
    }
    FUNC $setTemplateTypeNameList(list<Id> l) ClassType @primitive
      $f_templateTypeName = l
      RETURN THIS
    }
    FUNC $sizeTemplateTypeName() int @primitive
      RETURN $f_templateTypeName == NIL ? 0 : $f_templateTypeName.Size()
    }
    FUNC $hasTemplateTypeName() bool @primitive
      RETURN $f_templateTypeName != NIL && $f_templateTypeName.Size() > 0
    }
    FUNC $hasTemplateTypeName(int i) bool @primitive
      RETURN i >= 0 && $f_templateTypeName != NIL && i < $f_templateTypeName.Size()
    }
    FUNC $clearTemplateTypeName() ClassType @primitive
      $f_templateTypeName = NIL
      RETURN THIS
    }
    Expression $f_extends
    FUNC $setExtends(Expression v) ClassType @primitive
      $f_extends = v
      RETURN THIS
    }
    FUNC $newExtends() Expression
      $f_extends = NEW()
      RETURN $f_extends
    }
    FUNC $getExtends() Expression @primitive
      IF $f_extends == NIL
        THROW "extends was not set"
      }
      RETURN $f_extends
    }
    FUNC $hasExtends() bool @primitive
      RETURN $f_extends != NIL
    }
    FUNC $clearExtends() ClassType @primitive
      $f_extends = NIL
      RETURN THIS
    }
    list<Expression> $f_implements
    FUNC $addImplements(Expression v) ClassType
      IF $f_implements == NIL
        $f_implements = NEW()
      }
      $f_implements.add(v)
      RETURN THIS
    }
    FUNC $addNewImplements() Expression
      Expression v = NEW()
      $addImplements(v)
      RETURN v
    }
    FUNC $getImplements(int i) Expression @primitive
      IF i < 0 || $f_implements == NIL || i >= $f_implements.Size()
        THROW "list index out of range for implements: " .. i
      }
      RETURN $f_implements[i]
    }
    FUNC $getImplementsList() list<Expression> @primitive
      RETURN $f_implements
    }
    FUNC $setImplementsList(list<Expression> l) ClassType @primitive
      $f_implements = l
      RETURN THIS
    }
    FUNC $sizeImplements() int @primitive
      RETURN $f_implements == NIL ? 0 : $f_implements.Size()
    }
    FUNC $hasImplements() bool @primitive
      RETURN $f_implements != NIL && $f_implements.Size() > 0
    }
    FUNC $hasImplements(int i) bool @primitive
      RETURN i >= 0 && $f_implements != NIL && i < $f_implements.Size()
    }
    FUNC $clearImplements() ClassType @primitive
      $f_implements = NIL
      RETURN THIS
    }
    list<Statement> $f_member
    FUNC $addMember(Statement v) ClassType
      IF $f_member == NIL
        $f_member = NEW()
      }
      $f_member.add(v)
      RETURN THIS
    }
    FUNC $addNewMember() Statement
      Statement v = NEW()
      $addMember(v)
      RETURN v
    }
    FUNC $getMember(int i) Statement @primitive
      IF i < 0 || $f_member == NIL || i >= $f_member.Size()
        THROW "list index out of range for member: " .. i
      }
      RETURN $f_member[i]
    }
    FUNC $getMemberList() list<Statement> @primitive
      RETURN $f_member
    }
    FUNC $setMemberList(list<Statement> l) ClassType @primitive
      $f_member = l
      RETURN THIS
    }
    FUNC $sizeMember() int @primitive
      RETURN $f_member == NIL ? 0 : $f_member.Size()
    }
    FUNC $hasMember() bool @primitive
      RETURN $f_member != NIL && $f_member.Size() > 0
    }
    FUNC $hasMember(int i) bool @primitive
      RETURN i >= 0 && $f_member != NIL && i < $f_member.Size()
    }
    FUNC $clearMember() ClassType @primitive
      $f_member = NIL
      RETURN THIS
    }
    CodeBlock $f_shared
    FUNC $setShared(CodeBlock v) ClassType @primitive
      $f_shared = v
      RETURN THIS
    }
    FUNC $newShared() CodeBlock
      $f_shared = NEW()
      RETURN $f_shared
    }
    FUNC $getShared() CodeBlock @primitive
      IF $f_shared == NIL
        THROW "shared was not set"
      }
      RETURN $f_shared
    }
    FUNC $hasShared() bool @primitive
      RETURN $f_shared != NIL
    }
    FUNC $clearShared() ClassType @primitive
      $f_shared = NIL
      RETURN THIS
    }
    Attributes $f_sharedAttr
    FUNC $setSharedAttr(Attributes v) ClassType @primitive
      $f_sharedAttr = v
      RETURN THIS
    }
    FUNC $newSharedAttr() Attributes
      $f_sharedAttr = NEW()
      RETURN $f_sharedAttr
    }
    FUNC $getSharedAttr() Attributes @primitive
      IF $f_sharedAttr == NIL
        THROW "sharedAttr was not set"
      }
      RETURN $f_sharedAttr
    }
    FUNC $hasSharedAttr() bool @primitive
      RETURN $f_sharedAttr != NIL
    }
    FUNC $clearSharedAttr() ClassType @primitive
      $f_sharedAttr = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_name = NIL
      $f_isInterface = 0
      $f_isPiece = 0
      $f_templateTypeName = NIL
      $f_extends = NIL
      $f_implements = NIL
      $f_member = NIL
      $f_shared = NIL
      $f_sharedAttr = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasName()
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_isInterface == 2
        CASE 9; RETURN $f_isPiece == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_isInterface = (value ? 2 : 1)
        CASE 9; $f_isPiece = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_name
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_name = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 4; RETURN $f_extends
        CASE 7; RETURN $f_shared
        CASE 8; RETURN $f_sharedAttr
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 4; $f_extends = m
        CASE 7; $f_shared = m
        CASE 8; $f_sharedAttr = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 3
          IF $f_templateTypeName == NIL
            $f_templateTypeName = NEW()
          }
          Id m = NEW()
          $f_templateTypeName.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_extends == NIL
            $f_extends = NEW()
          }
          reader.addRef($f_extends)
          $f_extends.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 5
          IF $f_implements == NIL
            $f_implements = NEW()
          }
          Expression m = NEW()
          $f_implements.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 6
          IF $f_member == NIL
            $f_member = NEW()
          }
          Statement m = NEW()
          $f_member.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 7
          IF $f_shared == NIL
            $f_shared = NEW()
          }
          reader.addRef($f_shared)
          $f_shared.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 8
          IF $f_sharedAttr == NIL
            $f_sharedAttr = NEW()
          }
          reader.addRef($f_sharedAttr)
          $f_sharedAttr.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_templateTypeName[idx]
        CASE 5; RETURN $f_implements[idx]
        CASE 6; RETURN $f_member[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 3; IF $f_templateTypeName == NIL; $f_templateTypeName = NEW(); }
                $f_templateTypeName.add(m)
        CASE 5; IF $f_implements == NIL; $f_implements = NEW(); }
                $f_implements.add(m)
        CASE 6; IF $f_member == NIL; $f_member = NEW(); }
                $f_member.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasName()
        CASE 2; RETURN $hasIsInterface()
        CASE 9; RETURN $hasIsPiece()
        CASE 4; RETURN $hasExtends()
        CASE 7; RETURN $hasShared()
        CASE 8; RETURN $hasSharedAttr()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_templateTypeName == NIL ? 0 : $f_templateTypeName.Size()
        CASE 5; RETURN $f_implements == NIL ? 0 : $f_implements.Size()
        CASE 6; RETURN $f_member == NIL ? 0 : $f_member.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) ClassType
      ClassType ret = NEW()
      ret.f_name = $f_name
      ret.f_isInterface = $f_isInterface
      ret.f_isPiece = $f_isPiece
      IF deep
        IF $f_templateTypeName != NIL
          ret.f_templateTypeName = NEW()
          FOR i IN $f_templateTypeName
            ret.f_templateTypeName.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_templateTypeName = $f_templateTypeName
      }
      IF $f_extends != NIL
        ret.f_extends = deep ? $f_extends.copy(deep) : $f_extends
      }
      IF deep
        IF $f_implements != NIL
          ret.f_implements = NEW()
          FOR i IN $f_implements
            ret.f_implements.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_implements = $f_implements
      }
      IF deep
        IF $f_member != NIL
          ret.f_member = NEW()
          FOR i IN $f_member
            ret.f_member.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_member = $f_member
      }
      IF $f_shared != NIL
        ret.f_shared = deep ? $f_shared.copy(deep) : $f_shared
      }
      IF $f_sharedAttr != NIL
        ret.f_sharedAttr = deep ? $f_sharedAttr.copy(deep) : $f_sharedAttr
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) ClassType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) ClassType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) ClassType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) ClassType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) ClassType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) ClassType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) ClassType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("name", 1, Proto.Type.string, FALSE),
        NEW("isInterface", 2, Proto.Type.bool, FALSE),
        NEW("isPiece", 9, Proto.Type.bool, FALSE),
        NEW("templateTypeName", 3, Proto.Type.message, TRUE),
        NEW("extends", 4, Proto.Type.message, FALSE),
        NEW("implements", 5, Proto.Type.message, TRUE),
        NEW("member", 6, Proto.Type.message, TRUE),
        NEW("shared", 7, Proto.Type.message, FALSE),
        NEW("sharedAttr", 8, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN ClassType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) ClassType
        RETURN ClassType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) ClassType
        RETURN ClassType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) ClassType
        RETURN ClassType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) ClassType
        RETURN ClassType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) ClassType
        RETURN ClassType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS BitsType EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "BitsType"
    }
    list<Statement> $f_member
    FUNC $addMember(Statement v) BitsType
      IF $f_member == NIL
        $f_member = NEW()
      }
      $f_member.add(v)
      RETURN THIS
    }
    FUNC $addNewMember() Statement
      Statement v = NEW()
      $addMember(v)
      RETURN v
    }
    FUNC $getMember(int i) Statement @primitive
      IF i < 0 || $f_member == NIL || i >= $f_member.Size()
        THROW "list index out of range for member: " .. i
      }
      RETURN $f_member[i]
    }
    FUNC $getMemberList() list<Statement> @primitive
      RETURN $f_member
    }
    FUNC $setMemberList(list<Statement> l) BitsType @primitive
      $f_member = l
      RETURN THIS
    }
    FUNC $sizeMember() int @primitive
      RETURN $f_member == NIL ? 0 : $f_member.Size()
    }
    FUNC $hasMember() bool @primitive
      RETURN $f_member != NIL && $f_member.Size() > 0
    }
    FUNC $hasMember(int i) bool @primitive
      RETURN i >= 0 && $f_member != NIL && i < $f_member.Size()
    }
    FUNC $clearMember() BitsType @primitive
      $f_member = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_member = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_member[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_member == NIL; $f_member = NEW(); }
                $f_member.add(m)
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_member == NIL
            $f_member = NEW()
          }
          Statement m = NEW()
          $f_member.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_member == NIL ? 0 : $f_member.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) BitsType
      BitsType ret = NEW()
      IF deep
        IF $f_member != NIL
          ret.f_member = NEW()
          FOR i IN $f_member
            ret.f_member.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_member = $f_member
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) BitsType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) BitsType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) BitsType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) BitsType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) BitsType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) BitsType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) BitsType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("member", 1, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN BitsType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) BitsType
        RETURN BitsType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) BitsType
        RETURN BitsType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) BitsType
        RETURN BitsType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) BitsType
        RETURN BitsType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) BitsType
        RETURN BitsType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS EnumType EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "EnumType"
    }
    list<Declaration> $f_item
    FUNC $addItem(Declaration v) EnumType
      IF $f_item == NIL
        $f_item = NEW()
      }
      $f_item.add(v)
      RETURN THIS
    }
    FUNC $addNewItem() Declaration
      Declaration v = NEW()
      $addItem(v)
      RETURN v
    }
    FUNC $getItem(int i) Declaration @primitive
      IF i < 0 || $f_item == NIL || i >= $f_item.Size()
        THROW "list index out of range for item: " .. i
      }
      RETURN $f_item[i]
    }
    FUNC $getItemList() list<Declaration> @primitive
      RETURN $f_item
    }
    FUNC $setItemList(list<Declaration> l) EnumType @primitive
      $f_item = l
      RETURN THIS
    }
    FUNC $sizeItem() int @primitive
      RETURN $f_item == NIL ? 0 : $f_item.Size()
    }
    FUNC $hasItem() bool @primitive
      RETURN $f_item != NIL && $f_item.Size() > 0
    }
    FUNC $hasItem(int i) bool @primitive
      RETURN i >= 0 && $f_item != NIL && i < $f_item.Size()
    }
    FUNC $clearItem() EnumType @primitive
      $f_item = NIL
      RETURN THIS
    }
    list<Statement> $f_member
    FUNC $addMember(Statement v) EnumType
      IF $f_member == NIL
        $f_member = NEW()
      }
      $f_member.add(v)
      RETURN THIS
    }
    FUNC $addNewMember() Statement
      Statement v = NEW()
      $addMember(v)
      RETURN v
    }
    FUNC $getMember(int i) Statement @primitive
      IF i < 0 || $f_member == NIL || i >= $f_member.Size()
        THROW "list index out of range for member: " .. i
      }
      RETURN $f_member[i]
    }
    FUNC $getMemberList() list<Statement> @primitive
      RETURN $f_member
    }
    FUNC $setMemberList(list<Statement> l) EnumType @primitive
      $f_member = l
      RETURN THIS
    }
    FUNC $sizeMember() int @primitive
      RETURN $f_member == NIL ? 0 : $f_member.Size()
    }
    FUNC $hasMember() bool @primitive
      RETURN $f_member != NIL && $f_member.Size() > 0
    }
    FUNC $hasMember(int i) bool @primitive
      RETURN i >= 0 && $f_member != NIL && i < $f_member.Size()
    }
    FUNC $clearMember() EnumType @primitive
      $f_member = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_item = NIL
      $f_member = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_item[idx]
        CASE 2; RETURN $f_member[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_item == NIL; $f_item = NEW(); }
                $f_item.add(m)
        CASE 2; IF $f_member == NIL; $f_member = NEW(); }
                $f_member.add(m)
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_item == NIL
            $f_item = NEW()
          }
          Declaration m = NEW()
          $f_item.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_member == NIL
            $f_member = NEW()
          }
          Statement m = NEW()
          $f_member.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_item == NIL ? 0 : $f_item.Size()
        CASE 2; RETURN $f_member == NIL ? 0 : $f_member.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) EnumType
      EnumType ret = NEW()
      IF deep
        IF $f_item != NIL
          ret.f_item = NEW()
          FOR i IN $f_item
            ret.f_item.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_item = $f_item
      }
      IF deep
        IF $f_member != NIL
          ret.f_member = NEW()
          FOR i IN $f_member
            ret.f_member.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_member = $f_member
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) EnumType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) EnumType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) EnumType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) EnumType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) EnumType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) EnumType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) EnumType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("item", 1, Proto.Type.message, TRUE),
        NEW("member", 2, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN EnumType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) EnumType
        RETURN EnumType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) EnumType
        RETURN EnumType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) EnumType
        RETURN EnumType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) EnumType
        RETURN EnumType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) EnumType
        RETURN EnumType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS ModuleType EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "ModuleType"
    }
    list<Statement> $f_statement
    FUNC $addStatement(Statement v) ModuleType
      IF $f_statement == NIL
        $f_statement = NEW()
      }
      $f_statement.add(v)
      RETURN THIS
    }
    FUNC $addNewStatement() Statement
      Statement v = NEW()
      $addStatement(v)
      RETURN v
    }
    FUNC $getStatement(int i) Statement @primitive
      IF i < 0 || $f_statement == NIL || i >= $f_statement.Size()
        THROW "list index out of range for statement: " .. i
      }
      RETURN $f_statement[i]
    }
    FUNC $getStatementList() list<Statement> @primitive
      RETURN $f_statement
    }
    FUNC $setStatementList(list<Statement> l) ModuleType @primitive
      $f_statement = l
      RETURN THIS
    }
    FUNC $sizeStatement() int @primitive
      RETURN $f_statement == NIL ? 0 : $f_statement.Size()
    }
    FUNC $hasStatement() bool @primitive
      RETURN $f_statement != NIL && $f_statement.Size() > 0
    }
    FUNC $hasStatement(int i) bool @primitive
      RETURN i >= 0 && $f_statement != NIL && i < $f_statement.Size()
    }
    FUNC $clearStatement() ModuleType @primitive
      $f_statement = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_statement = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_statement[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; IF $f_statement == NIL; $f_statement = NEW(); }
                $f_statement.add(m)
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 2
          IF $f_statement == NIL
            $f_statement = NEW()
          }
          Statement m = NEW()
          $f_statement.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_statement == NIL ? 0 : $f_statement.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) ModuleType
      ModuleType ret = NEW()
      IF deep
        IF $f_statement != NIL
          ret.f_statement = NEW()
          FOR i IN $f_statement
            ret.f_statement.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_statement = $f_statement
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) ModuleType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) ModuleType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) ModuleType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) ModuleType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) ModuleType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) ModuleType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) ModuleType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("statement", 2, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN ModuleType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) ModuleType
        RETURN ModuleType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) ModuleType
        RETURN ModuleType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) ModuleType
        RETURN ModuleType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) ModuleType
        RETURN ModuleType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) ModuleType
        RETURN ModuleType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS MethodType EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "MethodType"
    }
    list<Type> $f_returnType
    FUNC $addReturnType(Type v) MethodType
      IF $f_returnType == NIL
        $f_returnType = NEW()
      }
      $f_returnType.add(v)
      RETURN THIS
    }
    FUNC $addNewReturnType() Type
      Type v = NEW()
      $addReturnType(v)
      RETURN v
    }
    FUNC $getReturnType(int i) Type @primitive
      IF i < 0 || $f_returnType == NIL || i >= $f_returnType.Size()
        THROW "list index out of range for returnType: " .. i
      }
      RETURN $f_returnType[i]
    }
    FUNC $getReturnTypeList() list<Type> @primitive
      RETURN $f_returnType
    }
    FUNC $setReturnTypeList(list<Type> l) MethodType @primitive
      $f_returnType = l
      RETURN THIS
    }
    FUNC $sizeReturnType() int @primitive
      RETURN $f_returnType == NIL ? 0 : $f_returnType.Size()
    }
    FUNC $hasReturnType() bool @primitive
      RETURN $f_returnType != NIL && $f_returnType.Size() > 0
    }
    FUNC $hasReturnType(int i) bool @primitive
      RETURN i >= 0 && $f_returnType != NIL && i < $f_returnType.Size()
    }
    FUNC $clearReturnType() MethodType @primitive
      $f_returnType = NIL
      RETURN THIS
    }
    list<Id> $f_templateTypeName
    FUNC $addTemplateTypeName(Id v) MethodType
      IF $f_templateTypeName == NIL
        $f_templateTypeName = NEW()
      }
      $f_templateTypeName.add(v)
      RETURN THIS
    }
    FUNC $addNewTemplateTypeName() Id
      Id v = NEW()
      $addTemplateTypeName(v)
      RETURN v
    }
    FUNC $getTemplateTypeName(int i) Id @primitive
      IF i < 0 || $f_templateTypeName == NIL || i >= $f_templateTypeName.Size()
        THROW "list index out of range for templateTypeName: " .. i
      }
      RETURN $f_templateTypeName[i]
    }
    FUNC $getTemplateTypeNameList() list<Id> @primitive
      RETURN $f_templateTypeName
    }
    FUNC $setTemplateTypeNameList(list<Id> l) MethodType @primitive
      $f_templateTypeName = l
      RETURN THIS
    }
    FUNC $sizeTemplateTypeName() int @primitive
      RETURN $f_templateTypeName == NIL ? 0 : $f_templateTypeName.Size()
    }
    FUNC $hasTemplateTypeName() bool @primitive
      RETURN $f_templateTypeName != NIL && $f_templateTypeName.Size() > 0
    }
    FUNC $hasTemplateTypeName(int i) bool @primitive
      RETURN i >= 0 && $f_templateTypeName != NIL && i < $f_templateTypeName.Size()
    }
    FUNC $clearTemplateTypeName() MethodType @primitive
      $f_templateTypeName = NIL
      RETURN THIS
    }
    list<Declaration> $f_argument
    FUNC $addArgument(Declaration v) MethodType
      IF $f_argument == NIL
        $f_argument = NEW()
      }
      $f_argument.add(v)
      RETURN THIS
    }
    FUNC $addNewArgument() Declaration
      Declaration v = NEW()
      $addArgument(v)
      RETURN v
    }
    FUNC $getArgument(int i) Declaration @primitive
      IF i < 0 || $f_argument == NIL || i >= $f_argument.Size()
        THROW "list index out of range for argument: " .. i
      }
      RETURN $f_argument[i]
    }
    FUNC $getArgumentList() list<Declaration> @primitive
      RETURN $f_argument
    }
    FUNC $setArgumentList(list<Declaration> l) MethodType @primitive
      $f_argument = l
      RETURN THIS
    }
    FUNC $sizeArgument() int @primitive
      RETURN $f_argument == NIL ? 0 : $f_argument.Size()
    }
    FUNC $hasArgument() bool @primitive
      RETURN $f_argument != NIL && $f_argument.Size() > 0
    }
    FUNC $hasArgument(int i) bool @primitive
      RETURN i >= 0 && $f_argument != NIL && i < $f_argument.Size()
    }
    FUNC $clearArgument() MethodType @primitive
      $f_argument = NIL
      RETURN THIS
    }
    list<Declaration> $f_use
    FUNC $addUse(Declaration v) MethodType
      IF $f_use == NIL
        $f_use = NEW()
      }
      $f_use.add(v)
      RETURN THIS
    }
    FUNC $addNewUse() Declaration
      Declaration v = NEW()
      $addUse(v)
      RETURN v
    }
    FUNC $getUse(int i) Declaration @primitive
      IF i < 0 || $f_use == NIL || i >= $f_use.Size()
        THROW "list index out of range for use: " .. i
      }
      RETURN $f_use[i]
    }
    FUNC $getUseList() list<Declaration> @primitive
      RETURN $f_use
    }
    FUNC $setUseList(list<Declaration> l) MethodType @primitive
      $f_use = l
      RETURN THIS
    }
    FUNC $sizeUse() int @primitive
      RETURN $f_use == NIL ? 0 : $f_use.Size()
    }
    FUNC $hasUse() bool @primitive
      RETURN $f_use != NIL && $f_use.Size() > 0
    }
    FUNC $hasUse(int i) bool @primitive
      RETURN i >= 0 && $f_use != NIL && i < $f_use.Size()
    }
    FUNC $clearUse() MethodType @primitive
      $f_use = NIL
      RETURN THIS
    }
    CodeBlock $f_body
    FUNC $setBody(CodeBlock v) MethodType @primitive
      $f_body = v
      RETURN THIS
    }
    FUNC $newBody() CodeBlock
      $f_body = NEW()
      RETURN $f_body
    }
    FUNC $getBody() CodeBlock @primitive
      IF $f_body == NIL
        THROW "body was not set"
      }
      RETURN $f_body
    }
    FUNC $hasBody() bool @primitive
      RETURN $f_body != NIL
    }
    FUNC $clearBody() MethodType @primitive
      $f_body = NIL
      RETURN THIS
    }
    Expression $f_expr
    FUNC $setExpr(Expression v) MethodType @primitive
      $f_expr = v
      RETURN THIS
    }
    FUNC $newExpr() Expression
      $f_expr = NEW()
      RETURN $f_expr
    }
    FUNC $getExpr() Expression @primitive
      IF $f_expr == NIL
        THROW "expr was not set"
      }
      RETURN $f_expr
    }
    FUNC $hasExpr() bool @primitive
      RETURN $f_expr != NIL
    }
    FUNC $clearExpr() MethodType @primitive
      $f_expr = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_returnType = NIL
      $f_templateTypeName = NIL
      $f_argument = NIL
      $f_use = NIL
      $f_body = NIL
      $f_expr = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 5; RETURN $f_body
        CASE 6; RETURN $f_expr
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 5; $f_body = m
        CASE 6; $f_expr = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_returnType == NIL
            $f_returnType = NEW()
          }
          Type m = NEW()
          $f_returnType.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_templateTypeName == NIL
            $f_templateTypeName = NEW()
          }
          Id m = NEW()
          $f_templateTypeName.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_argument == NIL
            $f_argument = NEW()
          }
          Declaration m = NEW()
          $f_argument.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_use == NIL
            $f_use = NEW()
          }
          Declaration m = NEW()
          $f_use.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 5
          IF $f_body == NIL
            $f_body = NEW()
          }
          reader.addRef($f_body)
          $f_body.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 6
          IF $f_expr == NIL
            $f_expr = NEW()
          }
          reader.addRef($f_expr)
          $f_expr.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_returnType[idx]
        CASE 2; RETURN $f_templateTypeName[idx]
        CASE 3; RETURN $f_argument[idx]
        CASE 4; RETURN $f_use[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_returnType == NIL; $f_returnType = NEW(); }
                $f_returnType.add(m)
        CASE 2; IF $f_templateTypeName == NIL; $f_templateTypeName = NEW(); }
                $f_templateTypeName.add(m)
        CASE 3; IF $f_argument == NIL; $f_argument = NEW(); }
                $f_argument.add(m)
        CASE 4; IF $f_use == NIL; $f_use = NEW(); }
                $f_use.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 5; RETURN $hasBody()
        CASE 6; RETURN $hasExpr()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_returnType == NIL ? 0 : $f_returnType.Size()
        CASE 2; RETURN $f_templateTypeName == NIL ? 0 : $f_templateTypeName.Size()
        CASE 3; RETURN $f_argument == NIL ? 0 : $f_argument.Size()
        CASE 4; RETURN $f_use == NIL ? 0 : $f_use.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) MethodType
      MethodType ret = NEW()
      IF deep
        IF $f_returnType != NIL
          ret.f_returnType = NEW()
          FOR i IN $f_returnType
            ret.f_returnType.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_returnType = $f_returnType
      }
      IF deep
        IF $f_templateTypeName != NIL
          ret.f_templateTypeName = NEW()
          FOR i IN $f_templateTypeName
            ret.f_templateTypeName.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_templateTypeName = $f_templateTypeName
      }
      IF deep
        IF $f_argument != NIL
          ret.f_argument = NEW()
          FOR i IN $f_argument
            ret.f_argument.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_argument = $f_argument
      }
      IF deep
        IF $f_use != NIL
          ret.f_use = NEW()
          FOR i IN $f_use
            ret.f_use.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_use = $f_use
      }
      IF $f_body != NIL
        ret.f_body = deep ? $f_body.copy(deep) : $f_body
      }
      IF $f_expr != NIL
        ret.f_expr = deep ? $f_expr.copy(deep) : $f_expr
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) MethodType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) MethodType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) MethodType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) MethodType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) MethodType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) MethodType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) MethodType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("returnType", 1, Proto.Type.message, TRUE),
        NEW("templateTypeName", 2, Proto.Type.message, TRUE),
        NEW("argument", 3, Proto.Type.message, TRUE),
        NEW("use", 4, Proto.Type.message, TRUE),
        NEW("body", 5, Proto.Type.message, FALSE),
        NEW("expr", 6, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN MethodType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) MethodType
        RETURN MethodType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) MethodType
        RETURN MethodType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) MethodType
        RETURN MethodType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) MethodType
        RETURN MethodType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) MethodType
        RETURN MethodType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS ContainerType EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "ContainerType"
    }
    Type $f_keyType
    FUNC $setKeyType(Type v) ContainerType @primitive
      $f_keyType = v
      RETURN THIS
    }
    FUNC $newKeyType() Type
      $f_keyType = NEW()
      RETURN $f_keyType
    }
    FUNC $getKeyType() Type @primitive
      IF $f_keyType == NIL
        THROW "keyType was not set"
      }
      RETURN $f_keyType
    }
    FUNC $hasKeyType() bool @primitive
      RETURN $f_keyType != NIL
    }
    FUNC $clearKeyType() ContainerType @primitive
      $f_keyType = NIL
      RETURN THIS
    }
    list<Type> $f_itemType
    FUNC $addItemType(Type v) ContainerType
      IF $f_itemType == NIL
        $f_itemType = NEW()
      }
      $f_itemType.add(v)
      RETURN THIS
    }
    FUNC $addNewItemType() Type
      Type v = NEW()
      $addItemType(v)
      RETURN v
    }
    FUNC $getItemType(int i) Type @primitive
      IF i < 0 || $f_itemType == NIL || i >= $f_itemType.Size()
        THROW "list index out of range for itemType: " .. i
      }
      RETURN $f_itemType[i]
    }
    FUNC $getItemTypeList() list<Type> @primitive
      RETURN $f_itemType
    }
    FUNC $setItemTypeList(list<Type> l) ContainerType @primitive
      $f_itemType = l
      RETURN THIS
    }
    FUNC $sizeItemType() int @primitive
      RETURN $f_itemType == NIL ? 0 : $f_itemType.Size()
    }
    FUNC $hasItemType() bool @primitive
      RETURN $f_itemType != NIL && $f_itemType.Size() > 0
    }
    FUNC $hasItemType(int i) bool @primitive
      RETURN i >= 0 && $f_itemType != NIL && i < $f_itemType.Size()
    }
    FUNC $clearItemType() ContainerType @primitive
      $f_itemType = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_keyType = NIL
      $f_itemType = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_keyType
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_keyType = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_keyType == NIL
            $f_keyType = NEW()
          }
          reader.addRef($f_keyType)
          $f_keyType.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_itemType == NIL
            $f_itemType = NEW()
          }
          Type m = NEW()
          $f_itemType.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_itemType[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; IF $f_itemType == NIL; $f_itemType = NEW(); }
                $f_itemType.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasKeyType()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_itemType == NIL ? 0 : $f_itemType.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) ContainerType
      ContainerType ret = NEW()
      IF $f_keyType != NIL
        ret.f_keyType = deep ? $f_keyType.copy(deep) : $f_keyType
      }
      IF deep
        IF $f_itemType != NIL
          ret.f_itemType = NEW()
          FOR i IN $f_itemType
            ret.f_itemType.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_itemType = $f_itemType
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) ContainerType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) ContainerType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) ContainerType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) ContainerType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) ContainerType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) ContainerType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) ContainerType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("keyType", 1, Proto.Type.message, FALSE),
        NEW("itemType", 2, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN ContainerType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) ContainerType
        RETURN ContainerType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) ContainerType
        RETURN ContainerType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) ContainerType
        RETURN ContainerType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) ContainerType
        RETURN ContainerType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) ContainerType
        RETURN ContainerType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS AliasType EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "AliasType"
    }
    Expression $f_from
    FUNC $setFrom(Expression v) AliasType @primitive
      $f_from = v
      RETURN THIS
    }
    FUNC $newFrom() Expression
      $f_from = NEW()
      RETURN $f_from
    }
    FUNC $getFrom() Expression @primitive
      IF $f_from == NIL
        THROW "from was not set"
      }
      RETURN $f_from
    }
    FUNC $hasFrom() bool @primitive
      RETURN $f_from != NIL
    }
    FUNC $clearFrom() AliasType @primitive
      $f_from = NIL
      RETURN THIS
    }
    string $f_name
    FUNC $setName(string v) AliasType @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $getName() string @primitive
      IF $f_name == NIL
        RETURN ""
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() AliasType @primitive
      $f_name = NIL
      RETURN THIS
    }
    Statement $f_for
    FUNC $setFor(Statement v) AliasType @primitive
      $f_for = v
      RETURN THIS
    }
    FUNC $newFor() Statement
      $f_for = NEW()
      RETURN $f_for
    }
    FUNC $getFor() Statement @primitive
      IF $f_for == NIL
        THROW "for was not set"
      }
      RETURN $f_for
    }
    FUNC $hasFor() bool @primitive
      RETURN $f_for != NIL
    }
    FUNC $clearFor() AliasType @primitive
      $f_for = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_from = NIL
      $f_name = NIL
      $f_for = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_name
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_name = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_from
        CASE 3; RETURN $f_for
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_from = m
        CASE 3; $f_for = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_from == NIL
            $f_from = NEW()
          }
          reader.addRef($f_from)
          $f_from.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_for == NIL
            $f_for = NEW()
          }
          reader.addRef($f_for)
          $f_for.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasFrom()
        CASE 2; RETURN $hasName()
        CASE 3; RETURN $hasFor()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) AliasType
      AliasType ret = NEW()
      IF $f_from != NIL
        ret.f_from = deep ? $f_from.copy(deep) : $f_from
      }
      ret.f_name = $f_name
      IF $f_for != NIL
        ret.f_for = deep ? $f_for.copy(deep) : $f_for
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) AliasType
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) AliasType
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) AliasType
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) AliasType
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) AliasType
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) AliasType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) AliasType
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("from", 1, Proto.Type.message, FALSE),
        NEW("name", 2, Proto.Type.string, FALSE),
        NEW("for", 3, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN AliasType.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) AliasType
        RETURN AliasType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) AliasType
        RETURN AliasType.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) AliasType
        RETURN AliasType.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) AliasType
        RETURN AliasType.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) AliasType
        RETURN AliasType.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS CodeBlock EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "CodeBlock"
    }
    Position $f_pos
    FUNC $setPos(Position v) CodeBlock @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() CodeBlock @primitive
      $f_pos = NIL
      RETURN THIS
    }
    Position $f_endPos
    FUNC $setEndPos(Position v) CodeBlock @primitive
      $f_endPos = v
      RETURN THIS
    }
    FUNC $newEndPos() Position
      $f_endPos = NEW()
      RETURN $f_endPos
    }
    FUNC $getEndPos() Position @primitive
      IF $f_endPos == NIL
        THROW "endPos was not set"
      }
      RETURN $f_endPos
    }
    FUNC $hasEndPos() bool @primitive
      RETURN $f_endPos != NIL
    }
    FUNC $clearEndPos() CodeBlock @primitive
      $f_endPos = NIL
      RETURN THIS
    }
    list<Statement> $f_statement
    FUNC $addStatement(Statement v) CodeBlock
      IF $f_statement == NIL
        $f_statement = NEW()
      }
      $f_statement.add(v)
      RETURN THIS
    }
    FUNC $addNewStatement() Statement
      Statement v = NEW()
      $addStatement(v)
      RETURN v
    }
    FUNC $getStatement(int i) Statement @primitive
      IF i < 0 || $f_statement == NIL || i >= $f_statement.Size()
        THROW "list index out of range for statement: " .. i
      }
      RETURN $f_statement[i]
    }
    FUNC $getStatementList() list<Statement> @primitive
      RETURN $f_statement
    }
    FUNC $setStatementList(list<Statement> l) CodeBlock @primitive
      $f_statement = l
      RETURN THIS
    }
    FUNC $sizeStatement() int @primitive
      RETURN $f_statement == NIL ? 0 : $f_statement.Size()
    }
    FUNC $hasStatement() bool @primitive
      RETURN $f_statement != NIL && $f_statement.Size() > 0
    }
    FUNC $hasStatement(int i) bool @primitive
      RETURN i >= 0 && $f_statement != NIL && i < $f_statement.Size()
    }
    FUNC $clearStatement() CodeBlock @primitive
      $f_statement = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_pos = NIL
      $f_endPos = NIL
      $f_statement = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_pos
        CASE 2; RETURN $f_endPos
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_pos = m
        CASE 2; $f_endPos = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_endPos == NIL
            $f_endPos = NEW()
          }
          reader.addRef($f_endPos)
          $f_endPos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_statement == NIL
            $f_statement = NEW()
          }
          Statement m = NEW()
          $f_statement.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_statement[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 3; IF $f_statement == NIL; $f_statement = NEW(); }
                $f_statement.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasPos()
        CASE 2; RETURN $hasEndPos()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_statement == NIL ? 0 : $f_statement.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) CodeBlock
      CodeBlock ret = NEW()
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF $f_endPos != NIL
        ret.f_endPos = deep ? $f_endPos.copy(deep) : $f_endPos
      }
      IF deep
        IF $f_statement != NIL
          ret.f_statement = NEW()
          FOR i IN $f_statement
            ret.f_statement.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_statement = $f_statement
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) CodeBlock
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) CodeBlock
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) CodeBlock
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) CodeBlock
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) CodeBlock
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) CodeBlock
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) CodeBlock
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("pos", 1, Proto.Type.message, FALSE),
        NEW("endPos", 2, Proto.Type.message, FALSE),
        NEW("statement", 3, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN CodeBlock.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) CodeBlock
        RETURN CodeBlock.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) CodeBlock
        RETURN CodeBlock.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) CodeBlock
        RETURN CodeBlock.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) CodeBlock
        RETURN CodeBlock.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) CodeBlock
        RETURN CodeBlock.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  ENUM StatementType @public
    unknown
    eVAR_DECL
    eMODULE_DECL
    eCLASS_DECL
    eBITS_DECL
    eENUM_DECL
    eMETHOD_DECL
    eALIAS_DECL
    eTYPE_DECL
    eASSIGN
    eCALL
    eNEWCALL
    eIF
    eGENERATEIF
    eFOR
    eWHILE
    eDO
    eUNTIL
    eTRY
    eTRYELSE
    eRETURN
    eEXIT
    eTHROW
    eSWITCH
    eCASE
    eDEFAULT
    eBREAK
    eCONTINUE
    eINC
    eDEC
    eBLOCK
    eCBLOCK
    eINCLUDE
    eGENERATEERROR
    eIFNIL
    eDEFER
    eSPLIT
  }
  dict<StatementType, int> fromStatementType2int = [
    StatementType.unknown: -1,
    StatementType.eVAR_DECL: 1,
    StatementType.eMODULE_DECL: 2,
    StatementType.eCLASS_DECL: 3,
    StatementType.eBITS_DECL: 4,
    StatementType.eENUM_DECL: 5,
    StatementType.eMETHOD_DECL: 6,
    StatementType.eALIAS_DECL: 7,
    StatementType.eTYPE_DECL: 8,
    StatementType.eASSIGN: 9,
    StatementType.eCALL: 10,
    StatementType.eNEWCALL: 11,
    StatementType.eIF: 12,
    StatementType.eGENERATEIF: 13,
    StatementType.eFOR: 14,
    StatementType.eWHILE: 15,
    StatementType.eDO: 16,
    StatementType.eUNTIL: 17,
    StatementType.eTRY: 18,
    StatementType.eTRYELSE: 19,
    StatementType.eRETURN: 20,
    StatementType.eEXIT: 21,
    StatementType.eTHROW: 22,
    StatementType.eSWITCH: 23,
    StatementType.eCASE: 24,
    StatementType.eDEFAULT: 25,
    StatementType.eBREAK: 26,
    StatementType.eCONTINUE: 27,
    StatementType.eINC: 28,
    StatementType.eDEC: 29,
    StatementType.eBLOCK: 30,
    StatementType.eCBLOCK: 31,
    StatementType.eINCLUDE: 32,
    StatementType.eGENERATEERROR: 33,
    StatementType.eIFNIL: 34,
    StatementType.eDEFER: 35,
    StatementType.eSPLIT: 36,
  ]
  dict<int, StatementType> int2StatementType = [
    1: StatementType.eVAR_DECL,
    2: StatementType.eMODULE_DECL,
    3: StatementType.eCLASS_DECL,
    4: StatementType.eBITS_DECL,
    5: StatementType.eENUM_DECL,
    6: StatementType.eMETHOD_DECL,
    7: StatementType.eALIAS_DECL,
    8: StatementType.eTYPE_DECL,
    9: StatementType.eASSIGN,
    10: StatementType.eCALL,
    11: StatementType.eNEWCALL,
    12: StatementType.eIF,
    13: StatementType.eGENERATEIF,
    14: StatementType.eFOR,
    15: StatementType.eWHILE,
    16: StatementType.eDO,
    17: StatementType.eUNTIL,
    18: StatementType.eTRY,
    19: StatementType.eTRYELSE,
    20: StatementType.eRETURN,
    21: StatementType.eEXIT,
    22: StatementType.eTHROW,
    23: StatementType.eSWITCH,
    24: StatementType.eCASE,
    25: StatementType.eDEFAULT,
    26: StatementType.eBREAK,
    27: StatementType.eCONTINUE,
    28: StatementType.eINC,
    29: StatementType.eDEC,
    30: StatementType.eBLOCK,
    31: StatementType.eCBLOCK,
    32: StatementType.eINCLUDE,
    33: StatementType.eGENERATEERROR,
    34: StatementType.eIFNIL,
    35: StatementType.eDEFER,
    36: StatementType.eSPLIT,
  ]
  CLASS Statement EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Statement"
    }
    Position $f_pos
    FUNC $setPos(Position v) Statement @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Statement @primitive
      $f_pos = NIL
      RETURN THIS
    }
    StatementType $f_type
    FUNC $setType(StatementType v) Statement @primitive
      $f_type = v
      RETURN THIS
    }
    FUNC $getType() StatementType @primitive
      IF $f_type == StatementType.unknown
        THROW "type was not set"
      }
      RETURN $f_type
    }
    FUNC $hasType() bool @primitive
      RETURN $f_type != StatementType.unknown
    }
    FUNC $clearType() Statement @primitive
      $f_type = StatementType.unknown
      RETURN THIS
    }
    Declaration $f_declaration
    FUNC $setDeclaration(Declaration v) Statement @primitive
      $f_declaration = v
      RETURN THIS
    }
    FUNC $newDeclaration() Declaration
      $f_declaration = NEW()
      RETURN $f_declaration
    }
    FUNC $getDeclaration() Declaration @primitive
      IF $f_declaration == NIL
        THROW "declaration was not set"
      }
      RETURN $f_declaration
    }
    FUNC $hasDeclaration() bool @primitive
      RETURN $f_declaration != NIL
    }
    FUNC $clearDeclaration() Statement @primitive
      $f_declaration = NIL
      RETURN THIS
    }
    Include $f_include
    FUNC $setInclude(Include v) Statement @primitive
      $f_include = v
      RETURN THIS
    }
    FUNC $newInclude() Include
      $f_include = NEW()
      RETURN $f_include
    }
    FUNC $getInclude() Include @primitive
      IF $f_include == NIL
        THROW "include was not set"
      }
      RETURN $f_include
    }
    FUNC $hasInclude() bool @primitive
      RETURN $f_include != NIL
    }
    FUNC $clearInclude() Statement @primitive
      $f_include = NIL
      RETURN THIS
    }
    Assignment $f_assign
    FUNC $setAssign(Assignment v) Statement @primitive
      $f_assign = v
      RETURN THIS
    }
    FUNC $newAssign() Assignment
      $f_assign = NEW()
      RETURN $f_assign
    }
    FUNC $getAssign() Assignment @primitive
      IF $f_assign == NIL
        THROW "assign was not set"
      }
      RETURN $f_assign
    }
    FUNC $hasAssign() bool @primitive
      RETURN $f_assign != NIL
    }
    FUNC $clearAssign() Statement @primitive
      $f_assign = NIL
      RETURN THIS
    }
    MethodCall $f_methodCall
    FUNC $setMethodCall(MethodCall v) Statement @primitive
      $f_methodCall = v
      RETURN THIS
    }
    FUNC $newMethodCall() MethodCall
      $f_methodCall = NEW()
      RETURN $f_methodCall
    }
    FUNC $getMethodCall() MethodCall @primitive
      IF $f_methodCall == NIL
        THROW "methodCall was not set"
      }
      RETURN $f_methodCall
    }
    FUNC $hasMethodCall() bool @primitive
      RETURN $f_methodCall != NIL
    }
    FUNC $clearMethodCall() Statement @primitive
      $f_methodCall = NIL
      RETURN THIS
    }
    Condition $f_condition
    FUNC $setCondition(Condition v) Statement @primitive
      $f_condition = v
      RETURN THIS
    }
    FUNC $newCondition() Condition
      $f_condition = NEW()
      RETURN $f_condition
    }
    FUNC $getCondition() Condition @primitive
      IF $f_condition == NIL
        THROW "condition was not set"
      }
      RETURN $f_condition
    }
    FUNC $hasCondition() bool @primitive
      RETURN $f_condition != NIL
    }
    FUNC $clearCondition() Statement @primitive
      $f_condition = NIL
      RETURN THIS
    }
    ForStatement $f_for
    FUNC $setFor(ForStatement v) Statement @primitive
      $f_for = v
      RETURN THIS
    }
    FUNC $newFor() ForStatement
      $f_for = NEW()
      RETURN $f_for
    }
    FUNC $getFor() ForStatement @primitive
      IF $f_for == NIL
        THROW "for was not set"
      }
      RETURN $f_for
    }
    FUNC $hasFor() bool @primitive
      RETURN $f_for != NIL
    }
    FUNC $clearFor() Statement @primitive
      $f_for = NIL
      RETURN THIS
    }
    TryStatement $f_try
    FUNC $setTry(TryStatement v) Statement @primitive
      $f_try = v
      RETURN THIS
    }
    FUNC $newTry() TryStatement
      $f_try = NEW()
      RETURN $f_try
    }
    FUNC $getTry() TryStatement @primitive
      IF $f_try == NIL
        THROW "try was not set"
      }
      RETURN $f_try
    }
    FUNC $hasTry() bool @primitive
      RETURN $f_try != NIL
    }
    FUNC $clearTry() Statement @primitive
      $f_try = NIL
      RETURN THIS
    }
    CodeBlock $f_block
    FUNC $setBlock(CodeBlock v) Statement @primitive
      $f_block = v
      RETURN THIS
    }
    FUNC $newBlock() CodeBlock
      $f_block = NEW()
      RETURN $f_block
    }
    FUNC $getBlock() CodeBlock @primitive
      IF $f_block == NIL
        THROW "block was not set"
      }
      RETURN $f_block
    }
    FUNC $hasBlock() bool @primitive
      RETURN $f_block != NIL
    }
    FUNC $clearBlock() Statement @primitive
      $f_block = NIL
      RETURN THIS
    }
    Expression $f_expr
    FUNC $setExpr(Expression v) Statement @primitive
      $f_expr = v
      RETURN THIS
    }
    FUNC $newExpr() Expression
      $f_expr = NEW()
      RETURN $f_expr
    }
    FUNC $getExpr() Expression @primitive
      IF $f_expr == NIL
        THROW "expr was not set"
      }
      RETURN $f_expr
    }
    FUNC $hasExpr() bool @primitive
      RETURN $f_expr != NIL
    }
    FUNC $clearExpr() Statement @primitive
      $f_expr = NIL
      RETURN THIS
    }
    list<Expression> $f_arguments
    FUNC $addArguments(Expression v) Statement
      IF $f_arguments == NIL
        $f_arguments = NEW()
      }
      $f_arguments.add(v)
      RETURN THIS
    }
    FUNC $addNewArguments() Expression
      Expression v = NEW()
      $addArguments(v)
      RETURN v
    }
    FUNC $getArguments(int i) Expression @primitive
      IF i < 0 || $f_arguments == NIL || i >= $f_arguments.Size()
        THROW "list index out of range for arguments: " .. i
      }
      RETURN $f_arguments[i]
    }
    FUNC $getArgumentsList() list<Expression> @primitive
      RETURN $f_arguments
    }
    FUNC $setArgumentsList(list<Expression> l) Statement @primitive
      $f_arguments = l
      RETURN THIS
    }
    FUNC $sizeArguments() int @primitive
      RETURN $f_arguments == NIL ? 0 : $f_arguments.Size()
    }
    FUNC $hasArguments() bool @primitive
      RETURN $f_arguments != NIL && $f_arguments.Size() > 0
    }
    FUNC $hasArguments(int i) bool @primitive
      RETURN i >= 0 && $f_arguments != NIL && i < $f_arguments.Size()
    }
    FUNC $clearArguments() Statement @primitive
      $f_arguments = NIL
      RETURN THIS
    }
    list<CBlock> $f_cblock
    FUNC $addCblock(CBlock v) Statement
      IF $f_cblock == NIL
        $f_cblock = NEW()
      }
      $f_cblock.add(v)
      RETURN THIS
    }
    FUNC $addNewCblock() CBlock
      CBlock v = NEW()
      $addCblock(v)
      RETURN v
    }
    FUNC $getCblock(int i) CBlock @primitive
      IF i < 0 || $f_cblock == NIL || i >= $f_cblock.Size()
        THROW "list index out of range for cblock: " .. i
      }
      RETURN $f_cblock[i]
    }
    FUNC $getCblockList() list<CBlock> @primitive
      RETURN $f_cblock
    }
    FUNC $setCblockList(list<CBlock> l) Statement @primitive
      $f_cblock = l
      RETURN THIS
    }
    FUNC $sizeCblock() int @primitive
      RETURN $f_cblock == NIL ? 0 : $f_cblock.Size()
    }
    FUNC $hasCblock() bool @primitive
      RETURN $f_cblock != NIL && $f_cblock.Size() > 0
    }
    FUNC $hasCblock(int i) bool @primitive
      RETURN i >= 0 && $f_cblock != NIL && i < $f_cblock.Size()
    }
    FUNC $clearCblock() Statement @primitive
      $f_cblock = NIL
      RETURN THIS
    }
    Position $f_proceedPos
    FUNC $setProceedPos(Position v) Statement @primitive
      $f_proceedPos = v
      RETURN THIS
    }
    FUNC $newProceedPos() Position
      $f_proceedPos = NEW()
      RETURN $f_proceedPos
    }
    FUNC $getProceedPos() Position @primitive
      IF $f_proceedPos == NIL
        THROW "proceedPos was not set"
      }
      RETURN $f_proceedPos
    }
    FUNC $hasProceedPos() bool @primitive
      RETURN $f_proceedPos != NIL
    }
    FUNC $clearProceedPos() Statement @primitive
      $f_proceedPos = NIL
      RETURN THIS
    }
    int $f_blockgc
    FUNC $setBlockgc(bool v) Statement @primitive
      $f_blockgc = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getBlockgc() bool @primitive
      IF $f_blockgc == 0
        RETURN FALSE
      }
      RETURN $f_blockgc == 2
    }
    FUNC $hasBlockgc() bool @primitive
      RETURN $f_blockgc != 0
    }
    FUNC $clearBlockgc() Statement @primitive
      $f_blockgc = 0
      RETURN THIS
    }
    list<Statement> $f_statement
    FUNC $addStatement(Statement v) Statement
      IF $f_statement == NIL
        $f_statement = NEW()
      }
      $f_statement.add(v)
      RETURN THIS
    }
    FUNC $addNewStatement() Statement
      Statement v = NEW()
      $addStatement(v)
      RETURN v
    }
    FUNC $getStatement(int i) Statement @primitive
      IF i < 0 || $f_statement == NIL || i >= $f_statement.Size()
        THROW "list index out of range for statement: " .. i
      }
      RETURN $f_statement[i]
    }
    FUNC $getStatementList() list<Statement> @primitive
      RETURN $f_statement
    }
    FUNC $setStatementList(list<Statement> l) Statement @primitive
      $f_statement = l
      RETURN THIS
    }
    FUNC $sizeStatement() int @primitive
      RETURN $f_statement == NIL ? 0 : $f_statement.Size()
    }
    FUNC $hasStatement() bool @primitive
      RETURN $f_statement != NIL && $f_statement.Size() > 0
    }
    FUNC $hasStatement(int i) bool @primitive
      RETURN i >= 0 && $f_statement != NIL && i < $f_statement.Size()
    }
    FUNC $clearStatement() Statement @primitive
      $f_statement = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_pos = NIL
      $f_type = StatementType.unknown
      $f_declaration = NIL
      $f_include = NIL
      $f_assign = NIL
      $f_methodCall = NIL
      $f_condition = NIL
      $f_for = NIL
      $f_try = NIL
      $f_block = NIL
      $f_expr = NIL
      $f_arguments = NIL
      $f_cblock = NIL
      $f_proceedPos = NIL
      $f_blockgc = 0
      $f_statement = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasType()
    }
    FUNC $enumGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN fromStatementType2int[$f_type]
      }
      RETURN 0
    }
    FUNC $enumNameGet(int fieldNr) string @replace @primitive
      string s
      SWITCH fieldNr
        CASE 2; s = $f_type.ToString(); RETURN s == "unknown" ? s : s.slice(1)
      }
      RETURN ""
    }
    PROC $enumSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_type = int2StatementType.has(value) ? int2StatementType[value] : StatementType.unknown
      }
    }
    PROC $enumNameSet(int fieldNr, string name) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_type = StatementType.FromString("e" .. name)

      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 15; RETURN $f_blockgc == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 15; $f_blockgc = (value ? 2 : 1)
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_pos
        CASE 3; RETURN $f_declaration
        CASE 4; RETURN $f_include
        CASE 5; RETURN $f_assign
        CASE 6; RETURN $f_methodCall
        CASE 7; RETURN $f_condition
        CASE 8; RETURN $f_for
        CASE 9; RETURN $f_try
        CASE 10; RETURN $f_block
        CASE 11; RETURN $f_expr
        CASE 14; RETURN $f_proceedPos
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_pos = m
        CASE 3; $f_declaration = m
        CASE 4; $f_include = m
        CASE 5; $f_assign = m
        CASE 6; $f_methodCall = m
        CASE 7; $f_condition = m
        CASE 8; $f_for = m
        CASE 9; $f_try = m
        CASE 10; $f_block = m
        CASE 11; $f_expr = m
        CASE 14; $f_proceedPos = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_declaration == NIL
            $f_declaration = NEW()
          }
          reader.addRef($f_declaration)
          $f_declaration.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_include == NIL
            $f_include = NEW()
          }
          reader.addRef($f_include)
          $f_include.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 5
          IF $f_assign == NIL
            $f_assign = NEW()
          }
          reader.addRef($f_assign)
          $f_assign.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 6
          IF $f_methodCall == NIL
            $f_methodCall = NEW()
          }
          reader.addRef($f_methodCall)
          $f_methodCall.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 7
          IF $f_condition == NIL
            $f_condition = NEW()
          }
          reader.addRef($f_condition)
          $f_condition.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 8
          IF $f_for == NIL
            $f_for = NEW()
          }
          reader.addRef($f_for)
          $f_for.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 9
          IF $f_try == NIL
            $f_try = NEW()
          }
          reader.addRef($f_try)
          $f_try.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 10
          IF $f_block == NIL
            $f_block = NEW()
          }
          reader.addRef($f_block)
          $f_block.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 11
          IF $f_expr == NIL
            $f_expr = NEW()
          }
          reader.addRef($f_expr)
          $f_expr.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 12
          IF $f_arguments == NIL
            $f_arguments = NEW()
          }
          Expression m = NEW()
          $f_arguments.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 13
          IF $f_cblock == NIL
            $f_cblock = NEW()
          }
          CBlock m = NEW()
          $f_cblock.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 14
          IF $f_proceedPos == NIL
            $f_proceedPos = NEW()
          }
          reader.addRef($f_proceedPos)
          $f_proceedPos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 16
          IF $f_statement == NIL
            $f_statement = NEW()
          }
          Statement m = NEW()
          $f_statement.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 12; RETURN $f_arguments[idx]
        CASE 13; RETURN $f_cblock[idx]
        CASE 16; RETURN $f_statement[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 12; IF $f_arguments == NIL; $f_arguments = NEW(); }
                $f_arguments.add(m)
        CASE 13; IF $f_cblock == NIL; $f_cblock = NEW(); }
                $f_cblock.add(m)
        CASE 16; IF $f_statement == NIL; $f_statement = NEW(); }
                $f_statement.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasPos()
        CASE 2; RETURN $hasType()
        CASE 3; RETURN $hasDeclaration()
        CASE 4; RETURN $hasInclude()
        CASE 5; RETURN $hasAssign()
        CASE 6; RETURN $hasMethodCall()
        CASE 7; RETURN $hasCondition()
        CASE 8; RETURN $hasFor()
        CASE 9; RETURN $hasTry()
        CASE 10; RETURN $hasBlock()
        CASE 11; RETURN $hasExpr()
        CASE 14; RETURN $hasProceedPos()
        CASE 15; RETURN $hasBlockgc()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 12; RETURN $f_arguments == NIL ? 0 : $f_arguments.Size()
        CASE 13; RETURN $f_cblock == NIL ? 0 : $f_cblock.Size()
        CASE 16; RETURN $f_statement == NIL ? 0 : $f_statement.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Statement
      Statement ret = NEW()
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      ret.f_type = $f_type
      IF $f_declaration != NIL
        ret.f_declaration = deep ? $f_declaration.copy(deep) : $f_declaration
      }
      IF $f_include != NIL
        ret.f_include = deep ? $f_include.copy(deep) : $f_include
      }
      IF $f_assign != NIL
        ret.f_assign = deep ? $f_assign.copy(deep) : $f_assign
      }
      IF $f_methodCall != NIL
        ret.f_methodCall = deep ? $f_methodCall.copy(deep) : $f_methodCall
      }
      IF $f_condition != NIL
        ret.f_condition = deep ? $f_condition.copy(deep) : $f_condition
      }
      IF $f_for != NIL
        ret.f_for = deep ? $f_for.copy(deep) : $f_for
      }
      IF $f_try != NIL
        ret.f_try = deep ? $f_try.copy(deep) : $f_try
      }
      IF $f_block != NIL
        ret.f_block = deep ? $f_block.copy(deep) : $f_block
      }
      IF $f_expr != NIL
        ret.f_expr = deep ? $f_expr.copy(deep) : $f_expr
      }
      IF deep
        IF $f_arguments != NIL
          ret.f_arguments = NEW()
          FOR i IN $f_arguments
            ret.f_arguments.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_arguments = $f_arguments
      }
      IF deep
        IF $f_cblock != NIL
          ret.f_cblock = NEW()
          FOR i IN $f_cblock
            ret.f_cblock.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_cblock = $f_cblock
      }
      IF $f_proceedPos != NIL
        ret.f_proceedPos = deep ? $f_proceedPos.copy(deep) : $f_proceedPos
      }
      ret.f_blockgc = $f_blockgc
      IF deep
        IF $f_statement != NIL
          ret.f_statement = NEW()
          FOR i IN $f_statement
            ret.f_statement.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_statement = $f_statement
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Statement
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Statement
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Statement
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Statement
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Statement
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Statement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Statement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("pos", 1, Proto.Type.message, FALSE),
        NEW("type", 2, Proto.Type.enum, FALSE),
        NEW("declaration", 3, Proto.Type.message, FALSE),
        NEW("include", 4, Proto.Type.message, FALSE),
        NEW("assign", 5, Proto.Type.message, FALSE),
        NEW("methodCall", 6, Proto.Type.message, FALSE),
        NEW("condition", 7, Proto.Type.message, FALSE),
        NEW("for", 8, Proto.Type.message, FALSE),
        NEW("try", 9, Proto.Type.message, FALSE),
        NEW("block", 10, Proto.Type.message, FALSE),
        NEW("expr", 11, Proto.Type.message, FALSE),
        NEW("arguments", 12, Proto.Type.message, TRUE),
        NEW("cblock", 13, Proto.Type.message, TRUE),
        NEW("proceedPos", 14, Proto.Type.message, FALSE),
        NEW("blockgc", 15, Proto.Type.bool, FALSE),
        NEW("statement", 16, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN Statement.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Statement
        RETURN Statement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Statement
        RETURN Statement.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Statement
        RETURN Statement.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Statement
        RETURN Statement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Statement
        RETURN Statement.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Include EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Include"
    }
    list<Statement> $f_statement
    FUNC $addStatement(Statement v) Include
      IF $f_statement == NIL
        $f_statement = NEW()
      }
      $f_statement.add(v)
      RETURN THIS
    }
    FUNC $addNewStatement() Statement
      Statement v = NEW()
      $addStatement(v)
      RETURN v
    }
    FUNC $getStatement(int i) Statement @primitive
      IF i < 0 || $f_statement == NIL || i >= $f_statement.Size()
        THROW "list index out of range for statement: " .. i
      }
      RETURN $f_statement[i]
    }
    FUNC $getStatementList() list<Statement> @primitive
      RETURN $f_statement
    }
    FUNC $setStatementList(list<Statement> l) Include @primitive
      $f_statement = l
      RETURN THIS
    }
    FUNC $sizeStatement() int @primitive
      RETURN $f_statement == NIL ? 0 : $f_statement.Size()
    }
    FUNC $hasStatement() bool @primitive
      RETURN $f_statement != NIL && $f_statement.Size() > 0
    }
    FUNC $hasStatement(int i) bool @primitive
      RETURN i >= 0 && $f_statement != NIL && i < $f_statement.Size()
    }
    FUNC $clearStatement() Include @primitive
      $f_statement = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_statement = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_statement[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_statement == NIL; $f_statement = NEW(); }
                $f_statement.add(m)
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_statement == NIL
            $f_statement = NEW()
          }
          Statement m = NEW()
          $f_statement.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_statement == NIL ? 0 : $f_statement.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Include
      Include ret = NEW()
      IF deep
        IF $f_statement != NIL
          ret.f_statement = NEW()
          FOR i IN $f_statement
            ret.f_statement.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_statement = $f_statement
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Include
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Include
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Include
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Include
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Include
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Include
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Include
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("statement", 1, Proto.Type.message, TRUE),
      ]
      FUNC newMessage() Message
        RETURN Include.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Include
        RETURN Include.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Include
        RETURN Include.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Include
        RETURN Include.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Include
        RETURN Include.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Include
        RETURN Include.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Assignment EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Assignment"
    }
    ExprType $f_type
    FUNC $setType(ExprType v) Assignment @primitive
      $f_type = v
      RETURN THIS
    }
    FUNC $getType() ExprType @primitive
      IF $f_type == ExprType.unknown
        THROW "type was not set"
      }
      RETURN $f_type
    }
    FUNC $hasType() bool @primitive
      RETURN $f_type != ExprType.unknown
    }
    FUNC $clearType() Assignment @primitive
      $f_type = ExprType.unknown
      RETURN THIS
    }
    Expression $f_lhs
    FUNC $setLhs(Expression v) Assignment @primitive
      $f_lhs = v
      RETURN THIS
    }
    FUNC $newLhs() Expression
      $f_lhs = NEW()
      RETURN $f_lhs
    }
    FUNC $getLhs() Expression @primitive
      IF $f_lhs == NIL
        THROW "lhs was not set"
      }
      RETURN $f_lhs
    }
    FUNC $hasLhs() bool @primitive
      RETURN $f_lhs != NIL
    }
    FUNC $clearLhs() Assignment @primitive
      $f_lhs = NIL
      RETURN THIS
    }
    Expression $f_rhs
    FUNC $setRhs(Expression v) Assignment @primitive
      $f_rhs = v
      RETURN THIS
    }
    FUNC $newRhs() Expression
      $f_rhs = NEW()
      RETURN $f_rhs
    }
    FUNC $getRhs() Expression @primitive
      IF $f_rhs == NIL
        THROW "rhs was not set"
      }
      RETURN $f_rhs
    }
    FUNC $hasRhs() bool @primitive
      RETURN $f_rhs != NIL
    }
    FUNC $clearRhs() Assignment @primitive
      $f_rhs = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_type = ExprType.unknown
      $f_lhs = NIL
      $f_rhs = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasLhs() && $hasRhs()
    }
    FUNC $enumGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN fromExprType2int[$f_type]
      }
      RETURN 0
    }
    FUNC $enumNameGet(int fieldNr) string @replace @primitive
      string s
      SWITCH fieldNr
        CASE 1; s = $f_type.ToString(); RETURN s == "unknown" ? s : s.slice(1)
      }
      RETURN ""
    }
    PROC $enumSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_type = int2ExprType.has(value) ? int2ExprType[value] : ExprType.unknown
      }
    }
    PROC $enumNameSet(int fieldNr, string name) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_type = ExprType.FromString("e" .. name)

      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_lhs
        CASE 3; RETURN $f_rhs
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_lhs = m
        CASE 3; $f_rhs = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 2
          IF $f_lhs == NIL
            $f_lhs = NEW()
          }
          reader.addRef($f_lhs)
          $f_lhs.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_rhs == NIL
            $f_rhs = NEW()
          }
          reader.addRef($f_rhs)
          $f_rhs.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasType()
        CASE 2; RETURN $hasLhs()
        CASE 3; RETURN $hasRhs()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Assignment
      Assignment ret = NEW()
      ret.f_type = $f_type
      IF $f_lhs != NIL
        ret.f_lhs = deep ? $f_lhs.copy(deep) : $f_lhs
      }
      IF $f_rhs != NIL
        ret.f_rhs = deep ? $f_rhs.copy(deep) : $f_rhs
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Assignment
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Assignment
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Assignment
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Assignment
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Assignment
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Assignment
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Assignment
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("type", 1, Proto.Type.enum, FALSE),
        NEW("lhs", 2, Proto.Type.message, FALSE),
        NEW("rhs", 3, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Assignment.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Assignment
        RETURN Assignment.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Assignment
        RETURN Assignment.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Assignment
        RETURN Assignment.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Assignment
        RETURN Assignment.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Assignment
        RETURN Assignment.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Condition EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Condition"
    }
    Expression $f_cond
    FUNC $setCond(Expression v) Condition @primitive
      $f_cond = v
      RETURN THIS
    }
    FUNC $newCond() Expression
      $f_cond = NEW()
      RETURN $f_cond
    }
    FUNC $getCond() Expression @primitive
      IF $f_cond == NIL
        THROW "cond was not set"
      }
      RETURN $f_cond
    }
    FUNC $hasCond() bool @primitive
      RETURN $f_cond != NIL
    }
    FUNC $clearCond() Condition @primitive
      $f_cond = NIL
      RETURN THIS
    }
    CodeBlock $f_block
    FUNC $setBlock(CodeBlock v) Condition @primitive
      $f_block = v
      RETURN THIS
    }
    FUNC $newBlock() CodeBlock
      $f_block = NEW()
      RETURN $f_block
    }
    FUNC $getBlock() CodeBlock @primitive
      IF $f_block == NIL
        THROW "block was not set"
      }
      RETURN $f_block
    }
    FUNC $hasBlock() bool @primitive
      RETURN $f_block != NIL
    }
    FUNC $clearBlock() Condition @primitive
      $f_block = NIL
      RETURN THIS
    }
    list<Condition> $f_elseif
    FUNC $addElseif(Condition v) Condition
      IF $f_elseif == NIL
        $f_elseif = NEW()
      }
      $f_elseif.add(v)
      RETURN THIS
    }
    FUNC $addNewElseif() Condition
      Condition v = NEW()
      $addElseif(v)
      RETURN v
    }
    FUNC $getElseif(int i) Condition @primitive
      IF i < 0 || $f_elseif == NIL || i >= $f_elseif.Size()
        THROW "list index out of range for elseif: " .. i
      }
      RETURN $f_elseif[i]
    }
    FUNC $getElseifList() list<Condition> @primitive
      RETURN $f_elseif
    }
    FUNC $setElseifList(list<Condition> l) Condition @primitive
      $f_elseif = l
      RETURN THIS
    }
    FUNC $sizeElseif() int @primitive
      RETURN $f_elseif == NIL ? 0 : $f_elseif.Size()
    }
    FUNC $hasElseif() bool @primitive
      RETURN $f_elseif != NIL && $f_elseif.Size() > 0
    }
    FUNC $hasElseif(int i) bool @primitive
      RETURN i >= 0 && $f_elseif != NIL && i < $f_elseif.Size()
    }
    FUNC $clearElseif() Condition @primitive
      $f_elseif = NIL
      RETURN THIS
    }
    CodeBlock $f_else
    FUNC $setElse(CodeBlock v) Condition @primitive
      $f_else = v
      RETURN THIS
    }
    FUNC $newElse() CodeBlock
      $f_else = NEW()
      RETURN $f_else
    }
    FUNC $getElse() CodeBlock @primitive
      IF $f_else == NIL
        THROW "else was not set"
      }
      RETURN $f_else
    }
    FUNC $hasElse() bool @primitive
      RETURN $f_else != NIL
    }
    FUNC $clearElse() Condition @primitive
      $f_else = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_cond = NIL
      $f_block = NIL
      $f_elseif = NIL
      $f_else = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_cond
        CASE 2; RETURN $f_block
        CASE 4; RETURN $f_else
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_cond = m
        CASE 2; $f_block = m
        CASE 4; $f_else = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_cond == NIL
            $f_cond = NEW()
          }
          reader.addRef($f_cond)
          $f_cond.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_block == NIL
            $f_block = NEW()
          }
          reader.addRef($f_block)
          $f_block.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_elseif == NIL
            $f_elseif = NEW()
          }
          Condition m = NEW()
          $f_elseif.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_else == NIL
            $f_else = NEW()
          }
          reader.addRef($f_else)
          $f_else.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_elseif[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 3; IF $f_elseif == NIL; $f_elseif = NEW(); }
                $f_elseif.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasCond()
        CASE 2; RETURN $hasBlock()
        CASE 4; RETURN $hasElse()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_elseif == NIL ? 0 : $f_elseif.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Condition
      Condition ret = NEW()
      IF $f_cond != NIL
        ret.f_cond = deep ? $f_cond.copy(deep) : $f_cond
      }
      IF $f_block != NIL
        ret.f_block = deep ? $f_block.copy(deep) : $f_block
      }
      IF deep
        IF $f_elseif != NIL
          ret.f_elseif = NEW()
          FOR i IN $f_elseif
            ret.f_elseif.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_elseif = $f_elseif
      }
      IF $f_else != NIL
        ret.f_else = deep ? $f_else.copy(deep) : $f_else
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Condition
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Condition
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Condition
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Condition
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Condition
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Condition
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Condition
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("cond", 1, Proto.Type.message, FALSE),
        NEW("block", 2, Proto.Type.message, FALSE),
        NEW("elseif", 3, Proto.Type.message, TRUE),
        NEW("else", 4, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Condition.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Condition
        RETURN Condition.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Condition
        RETURN Condition.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Condition
        RETURN Condition.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Condition
        RETURN Condition.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Condition
        RETURN Condition.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS ForStatement EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "ForStatement"
    }
    list<Declaration> $f_loopVar
    FUNC $addLoopVar(Declaration v) ForStatement
      IF $f_loopVar == NIL
        $f_loopVar = NEW()
      }
      $f_loopVar.add(v)
      RETURN THIS
    }
    FUNC $addNewLoopVar() Declaration
      Declaration v = NEW()
      $addLoopVar(v)
      RETURN v
    }
    FUNC $getLoopVar(int i) Declaration @primitive
      IF i < 0 || $f_loopVar == NIL || i >= $f_loopVar.Size()
        THROW "list index out of range for loopVar: " .. i
      }
      RETURN $f_loopVar[i]
    }
    FUNC $getLoopVarList() list<Declaration> @primitive
      RETURN $f_loopVar
    }
    FUNC $setLoopVarList(list<Declaration> l) ForStatement @primitive
      $f_loopVar = l
      RETURN THIS
    }
    FUNC $sizeLoopVar() int @primitive
      RETURN $f_loopVar == NIL ? 0 : $f_loopVar.Size()
    }
    FUNC $hasLoopVar() bool @primitive
      RETURN $f_loopVar != NIL && $f_loopVar.Size() > 0
    }
    FUNC $hasLoopVar(int i) bool @primitive
      RETURN i >= 0 && $f_loopVar != NIL && i < $f_loopVar.Size()
    }
    FUNC $clearLoopVar() ForStatement @primitive
      $f_loopVar = NIL
      RETURN THIS
    }
    list<Expression> $f_iter
    FUNC $addIter(Expression v) ForStatement
      IF $f_iter == NIL
        $f_iter = NEW()
      }
      $f_iter.add(v)
      RETURN THIS
    }
    FUNC $addNewIter() Expression
      Expression v = NEW()
      $addIter(v)
      RETURN v
    }
    FUNC $getIter(int i) Expression @primitive
      IF i < 0 || $f_iter == NIL || i >= $f_iter.Size()
        THROW "list index out of range for iter: " .. i
      }
      RETURN $f_iter[i]
    }
    FUNC $getIterList() list<Expression> @primitive
      RETURN $f_iter
    }
    FUNC $setIterList(list<Expression> l) ForStatement @primitive
      $f_iter = l
      RETURN THIS
    }
    FUNC $sizeIter() int @primitive
      RETURN $f_iter == NIL ? 0 : $f_iter.Size()
    }
    FUNC $hasIter() bool @primitive
      RETURN $f_iter != NIL && $f_iter.Size() > 0
    }
    FUNC $hasIter(int i) bool @primitive
      RETURN i >= 0 && $f_iter != NIL && i < $f_iter.Size()
    }
    FUNC $clearIter() ForStatement @primitive
      $f_iter = NIL
      RETURN THIS
    }
    Expression $f_to
    FUNC $setTo(Expression v) ForStatement @primitive
      $f_to = v
      RETURN THIS
    }
    FUNC $newTo() Expression
      $f_to = NEW()
      RETURN $f_to
    }
    FUNC $getTo() Expression @primitive
      IF $f_to == NIL
        THROW "to was not set"
      }
      RETURN $f_to
    }
    FUNC $hasTo() bool @primitive
      RETURN $f_to != NIL
    }
    FUNC $clearTo() ForStatement @primitive
      $f_to = NIL
      RETURN THIS
    }
    Expression $f_until
    FUNC $setUntil(Expression v) ForStatement @primitive
      $f_until = v
      RETURN THIS
    }
    FUNC $newUntil() Expression
      $f_until = NEW()
      RETURN $f_until
    }
    FUNC $getUntil() Expression @primitive
      IF $f_until == NIL
        THROW "until was not set"
      }
      RETURN $f_until
    }
    FUNC $hasUntil() bool @primitive
      RETURN $f_until != NIL
    }
    FUNC $clearUntil() ForStatement @primitive
      $f_until = NIL
      RETURN THIS
    }
    Expression $f_step
    FUNC $setStep(Expression v) ForStatement @primitive
      $f_step = v
      RETURN THIS
    }
    FUNC $newStep() Expression
      $f_step = NEW()
      RETURN $f_step
    }
    FUNC $getStep() Expression @primitive
      IF $f_step == NIL
        THROW "step was not set"
      }
      RETURN $f_step
    }
    FUNC $hasStep() bool @primitive
      RETURN $f_step != NIL
    }
    FUNC $clearStep() ForStatement @primitive
      $f_step = NIL
      RETURN THIS
    }
    CodeBlock $f_body
    FUNC $setBody(CodeBlock v) ForStatement @primitive
      $f_body = v
      RETURN THIS
    }
    FUNC $newBody() CodeBlock
      $f_body = NEW()
      RETURN $f_body
    }
    FUNC $getBody() CodeBlock @primitive
      IF $f_body == NIL
        THROW "body was not set"
      }
      RETURN $f_body
    }
    FUNC $hasBody() bool @primitive
      RETURN $f_body != NIL
    }
    FUNC $clearBody() ForStatement @primitive
      $f_body = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_loopVar = NIL
      $f_iter = NIL
      $f_to = NIL
      $f_until = NIL
      $f_step = NIL
      $f_body = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_to
        CASE 4; RETURN $f_until
        CASE 5; RETURN $f_step
        CASE 6; RETURN $f_body
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 3; $f_to = m
        CASE 4; $f_until = m
        CASE 5; $f_step = m
        CASE 6; $f_body = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_loopVar == NIL
            $f_loopVar = NEW()
          }
          Declaration m = NEW()
          $f_loopVar.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_iter == NIL
            $f_iter = NEW()
          }
          Expression m = NEW()
          $f_iter.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_to == NIL
            $f_to = NEW()
          }
          reader.addRef($f_to)
          $f_to.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_until == NIL
            $f_until = NEW()
          }
          reader.addRef($f_until)
          $f_until.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 5
          IF $f_step == NIL
            $f_step = NEW()
          }
          reader.addRef($f_step)
          $f_step.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 6
          IF $f_body == NIL
            $f_body = NEW()
          }
          reader.addRef($f_body)
          $f_body.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_loopVar[idx]
        CASE 2; RETURN $f_iter[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; IF $f_loopVar == NIL; $f_loopVar = NEW(); }
                $f_loopVar.add(m)
        CASE 2; IF $f_iter == NIL; $f_iter = NEW(); }
                $f_iter.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $hasTo()
        CASE 4; RETURN $hasUntil()
        CASE 5; RETURN $hasStep()
        CASE 6; RETURN $hasBody()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_loopVar == NIL ? 0 : $f_loopVar.Size()
        CASE 2; RETURN $f_iter == NIL ? 0 : $f_iter.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) ForStatement
      ForStatement ret = NEW()
      IF deep
        IF $f_loopVar != NIL
          ret.f_loopVar = NEW()
          FOR i IN $f_loopVar
            ret.f_loopVar.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_loopVar = $f_loopVar
      }
      IF deep
        IF $f_iter != NIL
          ret.f_iter = NEW()
          FOR i IN $f_iter
            ret.f_iter.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_iter = $f_iter
      }
      IF $f_to != NIL
        ret.f_to = deep ? $f_to.copy(deep) : $f_to
      }
      IF $f_until != NIL
        ret.f_until = deep ? $f_until.copy(deep) : $f_until
      }
      IF $f_step != NIL
        ret.f_step = deep ? $f_step.copy(deep) : $f_step
      }
      IF $f_body != NIL
        ret.f_body = deep ? $f_body.copy(deep) : $f_body
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) ForStatement
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) ForStatement
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) ForStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) ForStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) ForStatement
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) ForStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) ForStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("loopVar", 1, Proto.Type.message, TRUE),
        NEW("iter", 2, Proto.Type.message, TRUE),
        NEW("to", 3, Proto.Type.message, FALSE),
        NEW("until", 4, Proto.Type.message, FALSE),
        NEW("step", 5, Proto.Type.message, FALSE),
        NEW("body", 6, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN ForStatement.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) ForStatement
        RETURN ForStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) ForStatement
        RETURN ForStatement.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) ForStatement
        RETURN ForStatement.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) ForStatement
        RETURN ForStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) ForStatement
        RETURN ForStatement.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS TryStatement EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "TryStatement"
    }
    CodeBlock $f_body
    FUNC $setBody(CodeBlock v) TryStatement @primitive
      $f_body = v
      RETURN THIS
    }
    FUNC $newBody() CodeBlock
      $f_body = NEW()
      RETURN $f_body
    }
    FUNC $getBody() CodeBlock @primitive
      IF $f_body == NIL
        THROW "body was not set"
      }
      RETURN $f_body
    }
    FUNC $hasBody() bool @primitive
      RETURN $f_body != NIL
    }
    FUNC $clearBody() TryStatement @primitive
      $f_body = NIL
      RETURN THIS
    }
    list<Catch> $f_catch
    FUNC $addCatch(Catch v) TryStatement
      IF $f_catch == NIL
        $f_catch = NEW()
      }
      $f_catch.add(v)
      RETURN THIS
    }
    FUNC $addNewCatch() Catch
      Catch v = NEW()
      $addCatch(v)
      RETURN v
    }
    FUNC $getCatch(int i) Catch @primitive
      IF i < 0 || $f_catch == NIL || i >= $f_catch.Size()
        THROW "list index out of range for catch: " .. i
      }
      RETURN $f_catch[i]
    }
    FUNC $getCatchList() list<Catch> @primitive
      RETURN $f_catch
    }
    FUNC $setCatchList(list<Catch> l) TryStatement @primitive
      $f_catch = l
      RETURN THIS
    }
    FUNC $sizeCatch() int @primitive
      RETURN $f_catch == NIL ? 0 : $f_catch.Size()
    }
    FUNC $hasCatch() bool @primitive
      RETURN $f_catch != NIL && $f_catch.Size() > 0
    }
    FUNC $hasCatch(int i) bool @primitive
      RETURN i >= 0 && $f_catch != NIL && i < $f_catch.Size()
    }
    FUNC $clearCatch() TryStatement @primitive
      $f_catch = NIL
      RETURN THIS
    }
    CodeBlock $f_else
    FUNC $setElse(CodeBlock v) TryStatement @primitive
      $f_else = v
      RETURN THIS
    }
    FUNC $newElse() CodeBlock
      $f_else = NEW()
      RETURN $f_else
    }
    FUNC $getElse() CodeBlock @primitive
      IF $f_else == NIL
        THROW "else was not set"
      }
      RETURN $f_else
    }
    FUNC $hasElse() bool @primitive
      RETURN $f_else != NIL
    }
    FUNC $clearElse() TryStatement @primitive
      $f_else = NIL
      RETURN THIS
    }
    CodeBlock $f_finally
    FUNC $setFinally(CodeBlock v) TryStatement @primitive
      $f_finally = v
      RETURN THIS
    }
    FUNC $newFinally() CodeBlock
      $f_finally = NEW()
      RETURN $f_finally
    }
    FUNC $getFinally() CodeBlock @primitive
      IF $f_finally == NIL
        THROW "finally was not set"
      }
      RETURN $f_finally
    }
    FUNC $hasFinally() bool @primitive
      RETURN $f_finally != NIL
    }
    FUNC $clearFinally() TryStatement @primitive
      $f_finally = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_body = NIL
      $f_catch = NIL
      $f_else = NIL
      $f_finally = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_body
        CASE 3; RETURN $f_else
        CASE 4; RETURN $f_finally
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_body = m
        CASE 3; $f_else = m
        CASE 4; $f_finally = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_body == NIL
            $f_body = NEW()
          }
          reader.addRef($f_body)
          $f_body.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_catch == NIL
            $f_catch = NEW()
          }
          Catch m = NEW()
          $f_catch.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_else == NIL
            $f_else = NEW()
          }
          reader.addRef($f_else)
          $f_else.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_finally == NIL
            $f_finally = NEW()
          }
          reader.addRef($f_finally)
          $f_finally.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_catch[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; IF $f_catch == NIL; $f_catch = NEW(); }
                $f_catch.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasBody()
        CASE 3; RETURN $hasElse()
        CASE 4; RETURN $hasFinally()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_catch == NIL ? 0 : $f_catch.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) TryStatement
      TryStatement ret = NEW()
      IF $f_body != NIL
        ret.f_body = deep ? $f_body.copy(deep) : $f_body
      }
      IF deep
        IF $f_catch != NIL
          ret.f_catch = NEW()
          FOR i IN $f_catch
            ret.f_catch.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_catch = $f_catch
      }
      IF $f_else != NIL
        ret.f_else = deep ? $f_else.copy(deep) : $f_else
      }
      IF $f_finally != NIL
        ret.f_finally = deep ? $f_finally.copy(deep) : $f_finally
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) TryStatement
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) TryStatement
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) TryStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) TryStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) TryStatement
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) TryStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) TryStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("body", 1, Proto.Type.message, FALSE),
        NEW("catch", 2, Proto.Type.message, TRUE),
        NEW("else", 3, Proto.Type.message, FALSE),
        NEW("finally", 4, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN TryStatement.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) TryStatement
        RETURN TryStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) TryStatement
        RETURN TryStatement.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) TryStatement
        RETURN TryStatement.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) TryStatement
        RETURN TryStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) TryStatement
        RETURN TryStatement.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Catch EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Catch"
    }
    Position $f_pos
    FUNC $setPos(Position v) Catch @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Catch @primitive
      $f_pos = NIL
      RETURN THIS
    }
    list<Type> $f_type
    FUNC $addType(Type v) Catch
      IF $f_type == NIL
        $f_type = NEW()
      }
      $f_type.add(v)
      RETURN THIS
    }
    FUNC $addNewType() Type
      Type v = NEW()
      $addType(v)
      RETURN v
    }
    FUNC $getType(int i) Type @primitive
      IF i < 0 || $f_type == NIL || i >= $f_type.Size()
        THROW "list index out of range for type: " .. i
      }
      RETURN $f_type[i]
    }
    FUNC $getTypeList() list<Type> @primitive
      RETURN $f_type
    }
    FUNC $setTypeList(list<Type> l) Catch @primitive
      $f_type = l
      RETURN THIS
    }
    FUNC $sizeType() int @primitive
      RETURN $f_type == NIL ? 0 : $f_type.Size()
    }
    FUNC $hasType() bool @primitive
      RETURN $f_type != NIL && $f_type.Size() > 0
    }
    FUNC $hasType(int i) bool @primitive
      RETURN i >= 0 && $f_type != NIL && i < $f_type.Size()
    }
    FUNC $clearType() Catch @primitive
      $f_type = NIL
      RETURN THIS
    }
    Declaration $f_decl
    FUNC $setDecl(Declaration v) Catch @primitive
      $f_decl = v
      RETURN THIS
    }
    FUNC $newDecl() Declaration
      $f_decl = NEW()
      RETURN $f_decl
    }
    FUNC $getDecl() Declaration @primitive
      IF $f_decl == NIL
        THROW "decl was not set"
      }
      RETURN $f_decl
    }
    FUNC $hasDecl() bool @primitive
      RETURN $f_decl != NIL
    }
    FUNC $clearDecl() Catch @primitive
      $f_decl = NIL
      RETURN THIS
    }
    CodeBlock $f_body
    FUNC $setBody(CodeBlock v) Catch @primitive
      $f_body = v
      RETURN THIS
    }
    FUNC $newBody() CodeBlock
      $f_body = NEW()
      RETURN $f_body
    }
    FUNC $getBody() CodeBlock @primitive
      IF $f_body == NIL
        THROW "body was not set"
      }
      RETURN $f_body
    }
    FUNC $hasBody() bool @primitive
      RETURN $f_body != NIL
    }
    FUNC $clearBody() Catch @primitive
      $f_body = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_pos = NIL
      $f_type = NIL
      $f_decl = NIL
      $f_body = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasDecl()
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_pos
        CASE 3; RETURN $f_decl
        CASE 4; RETURN $f_body
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_pos = m
        CASE 3; $f_decl = m
        CASE 4; $f_body = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_type == NIL
            $f_type = NEW()
          }
          Type m = NEW()
          $f_type.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_decl == NIL
            $f_decl = NEW()
          }
          reader.addRef($f_decl)
          $f_decl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_body == NIL
            $f_body = NEW()
          }
          reader.addRef($f_body)
          $f_body.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_type[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; IF $f_type == NIL; $f_type = NEW(); }
                $f_type.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasPos()
        CASE 3; RETURN $hasDecl()
        CASE 4; RETURN $hasBody()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_type == NIL ? 0 : $f_type.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Catch
      Catch ret = NEW()
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF deep
        IF $f_type != NIL
          ret.f_type = NEW()
          FOR i IN $f_type
            ret.f_type.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_type = $f_type
      }
      IF $f_decl != NIL
        ret.f_decl = deep ? $f_decl.copy(deep) : $f_decl
      }
      IF $f_body != NIL
        ret.f_body = deep ? $f_body.copy(deep) : $f_body
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Catch
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Catch
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Catch
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Catch
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Catch
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Catch
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Catch
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("pos", 1, Proto.Type.message, FALSE),
        NEW("type", 2, Proto.Type.message, TRUE),
        NEW("decl", 3, Proto.Type.message, FALSE),
        NEW("body", 4, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Catch.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Catch
        RETURN Catch.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Catch
        RETURN Catch.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Catch
        RETURN Catch.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Catch
        RETURN Catch.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Catch
        RETURN Catch.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS CBlock EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "CBlock"
    }
    Position $f_pos
    FUNC $setPos(Position v) CBlock @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() CBlock @primitive
      $f_pos = NIL
      RETURN THIS
    }
    list<string> $f_uses
    FUNC $addUses(string v) CBlock
      IF $f_uses == NIL
        $f_uses = NEW()
      }
      $f_uses.add(v)
      RETURN THIS
    }
    FUNC $getUses(int i) string @primitive
      IF i < 0 || $f_uses == NIL || i >= $f_uses.Size()
        THROW "list index out of range for uses: " .. i
      }
      RETURN $f_uses[i]
    }
    FUNC $getUsesList() list<string> @primitive
      RETURN $f_uses
    }
    FUNC $setUsesList(list<string> l) CBlock @primitive
      $f_uses = l
      RETURN THIS
    }
    FUNC $sizeUses() int @primitive
      RETURN $f_uses == NIL ? 0 : $f_uses.Size()
    }
    FUNC $hasUses() bool @primitive
      RETURN $f_uses != NIL && $f_uses.Size() > 0
    }
    FUNC $hasUses(int i) bool @primitive
      RETURN i >= 0 && $f_uses != NIL && i < $f_uses.Size()
    }
    FUNC $clearUses() CBlock @primitive
      $f_uses = NIL
      RETURN THIS
    }
    string $f_text
    FUNC $setText(string v) CBlock @primitive
      $f_text = v
      RETURN THIS
    }
    FUNC $getText() string @primitive
      IF $f_text == NIL
        RETURN ""
      }
      RETURN $f_text
    }
    FUNC $hasText() bool @primitive
      RETURN $f_text != NIL
    }
    FUNC $clearText() CBlock @primitive
      $f_text = NIL
      RETURN THIS
    }
    Expression $f_expr
    FUNC $setExpr(Expression v) CBlock @primitive
      $f_expr = v
      RETURN THIS
    }
    FUNC $newExpr() Expression
      $f_expr = NEW()
      RETURN $f_expr
    }
    FUNC $getExpr() Expression @primitive
      IF $f_expr == NIL
        THROW "expr was not set"
      }
      RETURN $f_expr
    }
    FUNC $hasExpr() bool @primitive
      RETURN $f_expr != NIL
    }
    FUNC $clearExpr() CBlock @primitive
      $f_expr = NIL
      RETURN THIS
    }
    int $f_literal
    FUNC $setLiteral(bool v) CBlock @primitive
      $f_literal = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getLiteral() bool @primitive
      IF $f_literal == 0
        RETURN FALSE
      }
      RETURN $f_literal == 2
    }
    FUNC $hasLiteral() bool @primitive
      RETURN $f_literal != 0
    }
    FUNC $clearLiteral() CBlock @primitive
      $f_literal = 0
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_pos = NIL
      $f_uses = NIL
      $f_text = NIL
      $f_expr = NIL
      $f_literal = 0
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 5; RETURN $f_literal == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 5; $f_literal = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_text
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $addUses(value)
        CASE 3; $f_text = value
      }
    }
    FUNC $stringGet(int fieldNr, int idx) string @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_uses[idx]
      }
      RETURN ""
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_pos
        CASE 4; RETURN $f_expr
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_pos = m
        CASE 4; $f_expr = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_expr == NIL
            $f_expr = NEW()
          }
          reader.addRef($f_expr)
          $f_expr.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasPos()
        CASE 3; RETURN $hasText()
        CASE 4; RETURN $hasExpr()
        CASE 5; RETURN $hasLiteral()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_uses == NIL ? 0 : $f_uses.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) CBlock
      CBlock ret = NEW()
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF deep
        IF $f_uses != NIL
          ret.f_uses = NEW()
          FOR i IN $f_uses
            ret.f_uses.add(i)
          }
        }
      ELSE
        ret.f_uses = $f_uses
      }
      ret.f_text = $f_text
      IF $f_expr != NIL
        ret.f_expr = deep ? $f_expr.copy(deep) : $f_expr
      }
      ret.f_literal = $f_literal
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) CBlock
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) CBlock
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) CBlock
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) CBlock
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) CBlock
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) CBlock
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) CBlock
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("pos", 1, Proto.Type.message, FALSE),
        NEW("uses", 2, Proto.Type.string, TRUE),
        NEW("text", 3, Proto.Type.string, FALSE),
        NEW("expr", 4, Proto.Type.message, FALSE),
        NEW("literal", 5, Proto.Type.bool, FALSE),
      ]
      FUNC newMessage() Message
        RETURN CBlock.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) CBlock
        RETURN CBlock.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) CBlock
        RETURN CBlock.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) CBlock
        RETURN CBlock.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) CBlock
        RETURN CBlock.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) CBlock
        RETURN CBlock.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS WhileStatement EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "WhileStatement"
    }
    Expression $f_cond
    FUNC $setCond(Expression v) WhileStatement @primitive
      $f_cond = v
      RETURN THIS
    }
    FUNC $newCond() Expression
      $f_cond = NEW()
      RETURN $f_cond
    }
    FUNC $getCond() Expression @primitive
      IF $f_cond == NIL
        THROW "cond was not set"
      }
      RETURN $f_cond
    }
    FUNC $hasCond() bool @primitive
      RETURN $f_cond != NIL
    }
    FUNC $clearCond() WhileStatement @primitive
      $f_cond = NIL
      RETURN THIS
    }
    CodeBlock $f_body
    FUNC $setBody(CodeBlock v) WhileStatement @primitive
      $f_body = v
      RETURN THIS
    }
    FUNC $newBody() CodeBlock
      $f_body = NEW()
      RETURN $f_body
    }
    FUNC $getBody() CodeBlock @primitive
      IF $f_body == NIL
        THROW "body was not set"
      }
      RETURN $f_body
    }
    FUNC $hasBody() bool @primitive
      RETURN $f_body != NIL
    }
    FUNC $clearBody() WhileStatement @primitive
      $f_body = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_cond = NIL
      $f_body = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasCond()
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_cond
        CASE 2; RETURN $f_body
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_cond = m
        CASE 2; $f_body = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_cond == NIL
            $f_cond = NEW()
          }
          reader.addRef($f_cond)
          $f_cond.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_body == NIL
            $f_body = NEW()
          }
          reader.addRef($f_body)
          $f_body.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasCond()
        CASE 2; RETURN $hasBody()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) WhileStatement
      WhileStatement ret = NEW()
      IF $f_cond != NIL
        ret.f_cond = deep ? $f_cond.copy(deep) : $f_cond
      }
      IF $f_body != NIL
        ret.f_body = deep ? $f_body.copy(deep) : $f_body
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) WhileStatement
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) WhileStatement
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) WhileStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) WhileStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) WhileStatement
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) WhileStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) WhileStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("cond", 1, Proto.Type.message, FALSE),
        NEW("body", 2, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN WhileStatement.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) WhileStatement
        RETURN WhileStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) WhileStatement
        RETURN WhileStatement.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) WhileStatement
        RETURN WhileStatement.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) WhileStatement
        RETURN WhileStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) WhileStatement
        RETURN WhileStatement.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS DoStatement EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "DoStatement"
    }
    Expression $f_cond
    FUNC $setCond(Expression v) DoStatement @primitive
      $f_cond = v
      RETURN THIS
    }
    FUNC $newCond() Expression
      $f_cond = NEW()
      RETURN $f_cond
    }
    FUNC $getCond() Expression @primitive
      IF $f_cond == NIL
        THROW "cond was not set"
      }
      RETURN $f_cond
    }
    FUNC $hasCond() bool @primitive
      RETURN $f_cond != NIL
    }
    FUNC $clearCond() DoStatement @primitive
      $f_cond = NIL
      RETURN THIS
    }
    CodeBlock $f_body
    FUNC $setBody(CodeBlock v) DoStatement @primitive
      $f_body = v
      RETURN THIS
    }
    FUNC $newBody() CodeBlock
      $f_body = NEW()
      RETURN $f_body
    }
    FUNC $getBody() CodeBlock @primitive
      IF $f_body == NIL
        THROW "body was not set"
      }
      RETURN $f_body
    }
    FUNC $hasBody() bool @primitive
      RETURN $f_body != NIL
    }
    FUNC $clearBody() DoStatement @primitive
      $f_body = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_cond = NIL
      $f_body = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasCond()
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_cond
        CASE 2; RETURN $f_body
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_cond = m
        CASE 2; $f_body = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_cond == NIL
            $f_cond = NEW()
          }
          reader.addRef($f_cond)
          $f_cond.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_body == NIL
            $f_body = NEW()
          }
          reader.addRef($f_body)
          $f_body.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasCond()
        CASE 2; RETURN $hasBody()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) DoStatement
      DoStatement ret = NEW()
      IF $f_cond != NIL
        ret.f_cond = deep ? $f_cond.copy(deep) : $f_cond
      }
      IF $f_body != NIL
        ret.f_body = deep ? $f_body.copy(deep) : $f_body
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) DoStatement
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) DoStatement
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) DoStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) DoStatement
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) DoStatement
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) DoStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) DoStatement
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("cond", 1, Proto.Type.message, FALSE),
        NEW("body", 2, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN DoStatement.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) DoStatement
        RETURN DoStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) DoStatement
        RETURN DoStatement.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) DoStatement
        RETURN DoStatement.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) DoStatement
        RETURN DoStatement.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) DoStatement
        RETURN DoStatement.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  ENUM ExprType @public
    unknown
    eID
    eINT
    eNAT
    eFLOAT
    eSTRING
    eNIL
    eTRUE
    eFALSE
    eOK
    eFAIL
    eTHIS
    ePARENT
    eLIST
    eDICT
    eINIT
    eCALL
    eNEWCALL
    eMETHOD
    eLAMBDA
    eMEMBER
    eTYPECAST
    eTYPESPEC
    eCTYPE
    eMINUS
    eNOT
    eTILDE
    eREF
    ePRE_INC
    ePRE_DEC
    ePOST_INC
    ePOST_DEC
    ePARENS
    eSUBSCRIPT
    eBITSASSIGN
    eEXPRMETHOD
    eADD
    eSUBTRACT
    eMULTIPLY
    eDIVIDE
    eREMAINDER
    eCONCAT
    eSHIFT_LEFT
    eSHIFT_RIGHT
    eBIT_AND
    eBIT_OR
    eBIT_XOR
    eIFNIL
    eTERNARY
    eEQUAL
    eNOTEQUAL
    eMATCH
    eNOMATCH
    eGREATER
    eGREATER_EQUAL
    eLESS
    eLESS_EQUAL
    eIS
    eISNOT
    eISA
    eISNOTA
    eAND
    eOR
    eINF
    eNINF
    eNAN
    eASSIGN
    eCCODE
    eUNKNOWN
  }
  dict<ExprType, int> fromExprType2int = [
    ExprType.unknown: -1,
    ExprType.eID: 1,
    ExprType.eINT: 2,
    ExprType.eNAT: 64,
    ExprType.eFLOAT: 3,
    ExprType.eSTRING: 4,
    ExprType.eNIL: 5,
    ExprType.eTRUE: 6,
    ExprType.eFALSE: 7,
    ExprType.eOK: 8,
    ExprType.eFAIL: 9,
    ExprType.eTHIS: 10,
    ExprType.ePARENT: 11,
    ExprType.eLIST: 12,
    ExprType.eDICT: 13,
    ExprType.eINIT: 65,
    ExprType.eCALL: 14,
    ExprType.eNEWCALL: 15,
    ExprType.eMETHOD: 16,
    ExprType.eLAMBDA: 17,
    ExprType.eMEMBER: 18,
    ExprType.eTYPECAST: 19,
    ExprType.eTYPESPEC: 20,
    ExprType.eCTYPE: 21,
    ExprType.eMINUS: 22,
    ExprType.eNOT: 23,
    ExprType.eTILDE: 24,
    ExprType.eREF: 25,
    ExprType.ePRE_INC: 26,
    ExprType.ePRE_DEC: 27,
    ExprType.ePOST_INC: 28,
    ExprType.ePOST_DEC: 29,
    ExprType.ePARENS: 30,
    ExprType.eSUBSCRIPT: 31,
    ExprType.eBITSASSIGN: 32,
    ExprType.eEXPRMETHOD: 33,
    ExprType.eADD: 34,
    ExprType.eSUBTRACT: 35,
    ExprType.eMULTIPLY: 36,
    ExprType.eDIVIDE: 37,
    ExprType.eREMAINDER: 38,
    ExprType.eCONCAT: 39,
    ExprType.eSHIFT_LEFT: 40,
    ExprType.eSHIFT_RIGHT: 41,
    ExprType.eBIT_AND: 42,
    ExprType.eBIT_OR: 43,
    ExprType.eBIT_XOR: 44,
    ExprType.eIFNIL: 45,
    ExprType.eTERNARY: 46,
    ExprType.eEQUAL: 47,
    ExprType.eNOTEQUAL: 48,
    ExprType.eMATCH: 49,
    ExprType.eNOMATCH: 50,
    ExprType.eGREATER: 51,
    ExprType.eGREATER_EQUAL: 52,
    ExprType.eLESS: 53,
    ExprType.eLESS_EQUAL: 54,
    ExprType.eIS: 55,
    ExprType.eISNOT: 56,
    ExprType.eISA: 57,
    ExprType.eISNOTA: 58,
    ExprType.eAND: 59,
    ExprType.eOR: 60,
    ExprType.eINF: 61,
    ExprType.eNINF: 62,
    ExprType.eNAN: 63,
    ExprType.eASSIGN: 66,
    ExprType.eCCODE: 77,
    ExprType.eUNKNOWN: 99,
  ]
  dict<int, ExprType> int2ExprType = [
    1: ExprType.eID,
    2: ExprType.eINT,
    64: ExprType.eNAT,
    3: ExprType.eFLOAT,
    4: ExprType.eSTRING,
    5: ExprType.eNIL,
    6: ExprType.eTRUE,
    7: ExprType.eFALSE,
    8: ExprType.eOK,
    9: ExprType.eFAIL,
    10: ExprType.eTHIS,
    11: ExprType.ePARENT,
    12: ExprType.eLIST,
    13: ExprType.eDICT,
    65: ExprType.eINIT,
    14: ExprType.eCALL,
    15: ExprType.eNEWCALL,
    16: ExprType.eMETHOD,
    17: ExprType.eLAMBDA,
    18: ExprType.eMEMBER,
    19: ExprType.eTYPECAST,
    20: ExprType.eTYPESPEC,
    21: ExprType.eCTYPE,
    22: ExprType.eMINUS,
    23: ExprType.eNOT,
    24: ExprType.eTILDE,
    25: ExprType.eREF,
    26: ExprType.ePRE_INC,
    27: ExprType.ePRE_DEC,
    28: ExprType.ePOST_INC,
    29: ExprType.ePOST_DEC,
    30: ExprType.ePARENS,
    31: ExprType.eSUBSCRIPT,
    32: ExprType.eBITSASSIGN,
    33: ExprType.eEXPRMETHOD,
    34: ExprType.eADD,
    35: ExprType.eSUBTRACT,
    36: ExprType.eMULTIPLY,
    37: ExprType.eDIVIDE,
    38: ExprType.eREMAINDER,
    39: ExprType.eCONCAT,
    40: ExprType.eSHIFT_LEFT,
    41: ExprType.eSHIFT_RIGHT,
    42: ExprType.eBIT_AND,
    43: ExprType.eBIT_OR,
    44: ExprType.eBIT_XOR,
    45: ExprType.eIFNIL,
    46: ExprType.eTERNARY,
    47: ExprType.eEQUAL,
    48: ExprType.eNOTEQUAL,
    49: ExprType.eMATCH,
    50: ExprType.eNOMATCH,
    51: ExprType.eGREATER,
    52: ExprType.eGREATER_EQUAL,
    53: ExprType.eLESS,
    54: ExprType.eLESS_EQUAL,
    55: ExprType.eIS,
    56: ExprType.eISNOT,
    57: ExprType.eISA,
    58: ExprType.eISNOTA,
    59: ExprType.eAND,
    60: ExprType.eOR,
    61: ExprType.eINF,
    62: ExprType.eNINF,
    63: ExprType.eNAN,
    66: ExprType.eASSIGN,
    77: ExprType.eCCODE,
    99: ExprType.eUNKNOWN,
  ]
  CLASS Expression EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Expression"
    }
    ExprType $f_type
    FUNC $setType(ExprType v) Expression @primitive
      $f_type = v
      RETURN THIS
    }
    FUNC $getType() ExprType @primitive
      IF $f_type == ExprType.unknown
        THROW "type was not set"
      }
      RETURN $f_type
    }
    FUNC $hasType() bool @primitive
      RETURN $f_type != ExprType.unknown
    }
    FUNC $clearType() Expression @primitive
      $f_type = ExprType.unknown
      RETURN THIS
    }
    Position $f_pos
    FUNC $setPos(Position v) Expression @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Expression @primitive
      $f_pos = NIL
      RETURN THIS
    }
    Id $f_id
    FUNC $setId(Id v) Expression @primitive
      $f_id = v
      RETURN THIS
    }
    FUNC $newId() Id
      $f_id = NEW()
      RETURN $f_id
    }
    FUNC $getId() Id @primitive
      IF $f_id == NIL
        THROW "id was not set"
      }
      RETURN $f_id
    }
    FUNC $hasId() bool @primitive
      RETURN $f_id != NIL
    }
    FUNC $clearId() Expression @primitive
      $f_id = NIL
      RETURN THIS
    }
    int $f_number
    bool $has_number
    FUNC $setNumber(int v) Expression @primitive
      $f_number = v
      $has_number = TRUE
      RETURN THIS
    }
    FUNC $getNumber() int @primitive
      IF !$has_number
        RETURN 0
      }
      RETURN $f_number
    }
    FUNC $hasNumber() bool @primitive
      RETURN $has_number
    }
    FUNC $clearNumber() Expression @primitive
      $f_number = 0
      $has_number = FALSE
      RETURN THIS
    }
    float $f_fnumber
    bool $has_fnumber
    FUNC $setFnumber(float v) Expression @primitive
      $f_fnumber = v
      $has_fnumber = TRUE
      RETURN THIS
    }
    FUNC $getFnumber() float @primitive
      IF !$has_fnumber
        THROW "fnumber was not set"
      }
      RETURN $f_fnumber
    }
    FUNC $hasFnumber() bool @primitive
      RETURN $has_fnumber
    }
    FUNC $clearFnumber() Expression @primitive
      $f_fnumber = 0
      $has_fnumber = FALSE
      RETURN THIS
    }
    int $f_dotNumber
    bool $has_dotNumber
    FUNC $setDotNumber(int v) Expression @primitive
      $f_dotNumber = v
      $has_dotNumber = TRUE
      RETURN THIS
    }
    FUNC $getDotNumber() int @primitive
      IF !$has_dotNumber
        RETURN 0
      }
      RETURN $f_dotNumber
    }
    FUNC $hasDotNumber() bool @primitive
      RETURN $has_dotNumber
    }
    FUNC $clearDotNumber() Expression @primitive
      $f_dotNumber = 0
      $has_dotNumber = FALSE
      RETURN THIS
    }
    string $f_stringValue
    FUNC $setStringValue(string v) Expression @primitive
      $f_stringValue = v
      RETURN THIS
    }
    FUNC $getStringValue() string @primitive
      IF $f_stringValue == NIL
        RETURN ""
      }
      RETURN $f_stringValue
    }
    FUNC $hasStringValue() bool @primitive
      RETURN $f_stringValue != NIL
    }
    FUNC $clearStringValue() Expression @primitive
      $f_stringValue = NIL
      RETURN THIS
    }
    list<Expression> $f_listItem
    FUNC $addListItem(Expression v) Expression
      IF $f_listItem == NIL
        $f_listItem = NEW()
      }
      $f_listItem.add(v)
      RETURN THIS
    }
    FUNC $addNewListItem() Expression
      Expression v = NEW()
      $addListItem(v)
      RETURN v
    }
    FUNC $getListItem(int i) Expression @primitive
      IF i < 0 || $f_listItem == NIL || i >= $f_listItem.Size()
        THROW "list index out of range for listItem: " .. i
      }
      RETURN $f_listItem[i]
    }
    FUNC $getListItemList() list<Expression> @primitive
      RETURN $f_listItem
    }
    FUNC $setListItemList(list<Expression> l) Expression @primitive
      $f_listItem = l
      RETURN THIS
    }
    FUNC $sizeListItem() int @primitive
      RETURN $f_listItem == NIL ? 0 : $f_listItem.Size()
    }
    FUNC $hasListItem() bool @primitive
      RETURN $f_listItem != NIL && $f_listItem.Size() > 0
    }
    FUNC $hasListItem(int i) bool @primitive
      RETURN i >= 0 && $f_listItem != NIL && i < $f_listItem.Size()
    }
    FUNC $clearListItem() Expression @primitive
      $f_listItem = NIL
      RETURN THIS
    }
    list<ExprPair> $f_dictItem
    FUNC $addDictItem(ExprPair v) Expression
      IF $f_dictItem == NIL
        $f_dictItem = NEW()
      }
      $f_dictItem.add(v)
      RETURN THIS
    }
    FUNC $addNewDictItem() ExprPair
      ExprPair v = NEW()
      $addDictItem(v)
      RETURN v
    }
    FUNC $getDictItem(int i) ExprPair @primitive
      IF i < 0 || $f_dictItem == NIL || i >= $f_dictItem.Size()
        THROW "list index out of range for dictItem: " .. i
      }
      RETURN $f_dictItem[i]
    }
    FUNC $getDictItemList() list<ExprPair> @primitive
      RETURN $f_dictItem
    }
    FUNC $setDictItemList(list<ExprPair> l) Expression @primitive
      $f_dictItem = l
      RETURN THIS
    }
    FUNC $sizeDictItem() int @primitive
      RETURN $f_dictItem == NIL ? 0 : $f_dictItem.Size()
    }
    FUNC $hasDictItem() bool @primitive
      RETURN $f_dictItem != NIL && $f_dictItem.Size() > 0
    }
    FUNC $hasDictItem(int i) bool @primitive
      RETURN i >= 0 && $f_dictItem != NIL && i < $f_dictItem.Size()
    }
    FUNC $clearDictItem() Expression @primitive
      $f_dictItem = NIL
      RETURN THIS
    }
    list<NameExpr> $f_initItem
    FUNC $addInitItem(NameExpr v) Expression
      IF $f_initItem == NIL
        $f_initItem = NEW()
      }
      $f_initItem.add(v)
      RETURN THIS
    }
    FUNC $addNewInitItem() NameExpr
      NameExpr v = NEW()
      $addInitItem(v)
      RETURN v
    }
    FUNC $getInitItem(int i) NameExpr @primitive
      IF i < 0 || $f_initItem == NIL || i >= $f_initItem.Size()
        THROW "list index out of range for initItem: " .. i
      }
      RETURN $f_initItem[i]
    }
    FUNC $getInitItemList() list<NameExpr> @primitive
      RETURN $f_initItem
    }
    FUNC $setInitItemList(list<NameExpr> l) Expression @primitive
      $f_initItem = l
      RETURN THIS
    }
    FUNC $sizeInitItem() int @primitive
      RETURN $f_initItem == NIL ? 0 : $f_initItem.Size()
    }
    FUNC $hasInitItem() bool @primitive
      RETURN $f_initItem != NIL && $f_initItem.Size() > 0
    }
    FUNC $hasInitItem(int i) bool @primitive
      RETURN i >= 0 && $f_initItem != NIL && i < $f_initItem.Size()
    }
    FUNC $clearInitItem() Expression @primitive
      $f_initItem = NIL
      RETURN THIS
    }
    int $f_orderedDict
    FUNC $setOrderedDict(bool v) Expression @primitive
      $f_orderedDict = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getOrderedDict() bool @primitive
      IF $f_orderedDict == 0
        RETURN FALSE
      }
      RETURN $f_orderedDict == 2
    }
    FUNC $hasOrderedDict() bool @primitive
      RETURN $f_orderedDict != 0
    }
    FUNC $clearOrderedDict() Expression @primitive
      $f_orderedDict = 0
      RETURN THIS
    }
    MethodCall $f_methodCall
    FUNC $setMethodCall(MethodCall v) Expression @primitive
      $f_methodCall = v
      RETURN THIS
    }
    FUNC $newMethodCall() MethodCall
      $f_methodCall = NEW()
      RETURN $f_methodCall
    }
    FUNC $getMethodCall() MethodCall @primitive
      IF $f_methodCall == NIL
        THROW "methodCall was not set"
      }
      RETURN $f_methodCall
    }
    FUNC $hasMethodCall() bool @primitive
      RETURN $f_methodCall != NIL
    }
    FUNC $clearMethodCall() Expression @primitive
      $f_methodCall = NIL
      RETURN THIS
    }
    MethodType $f_method
    FUNC $setMethod(MethodType v) Expression @primitive
      $f_method = v
      RETURN THIS
    }
    FUNC $newMethod() MethodType
      $f_method = NEW()
      RETURN $f_method
    }
    FUNC $getMethod() MethodType @primitive
      IF $f_method == NIL
        THROW "method was not set"
      }
      RETURN $f_method
    }
    FUNC $hasMethod() bool @primitive
      RETURN $f_method != NIL
    }
    FUNC $clearMethod() Expression @primitive
      $f_method = NIL
      RETURN THIS
    }
    Declaration $f_decl
    FUNC $setDecl(Declaration v) Expression @primitive
      $f_decl = v
      RETURN THIS
    }
    FUNC $newDecl() Declaration
      $f_decl = NEW()
      RETURN $f_decl
    }
    FUNC $getDecl() Declaration @primitive
      IF $f_decl == NIL
        THROW "decl was not set"
      }
      RETURN $f_decl
    }
    FUNC $hasDecl() bool @primitive
      RETURN $f_decl != NIL
    }
    FUNC $clearDecl() Expression @primitive
      $f_decl = NIL
      RETURN THIS
    }
    Type $f_typecast
    FUNC $setTypecast(Type v) Expression @primitive
      $f_typecast = v
      RETURN THIS
    }
    FUNC $newTypecast() Type
      $f_typecast = NEW()
      RETURN $f_typecast
    }
    FUNC $getTypecast() Type @primitive
      IF $f_typecast == NIL
        THROW "typecast was not set"
      }
      RETURN $f_typecast
    }
    FUNC $hasTypecast() bool @primitive
      RETURN $f_typecast != NIL
    }
    FUNC $clearTypecast() Expression @primitive
      $f_typecast = NIL
      RETURN THIS
    }
    list<Type> $f_typespec
    FUNC $addTypespec(Type v) Expression
      IF $f_typespec == NIL
        $f_typespec = NEW()
      }
      $f_typespec.add(v)
      RETURN THIS
    }
    FUNC $addNewTypespec() Type
      Type v = NEW()
      $addTypespec(v)
      RETURN v
    }
    FUNC $getTypespec(int i) Type @primitive
      IF i < 0 || $f_typespec == NIL || i >= $f_typespec.Size()
        THROW "list index out of range for typespec: " .. i
      }
      RETURN $f_typespec[i]
    }
    FUNC $getTypespecList() list<Type> @primitive
      RETURN $f_typespec
    }
    FUNC $setTypespecList(list<Type> l) Expression @primitive
      $f_typespec = l
      RETURN THIS
    }
    FUNC $sizeTypespec() int @primitive
      RETURN $f_typespec == NIL ? 0 : $f_typespec.Size()
    }
    FUNC $hasTypespec() bool @primitive
      RETURN $f_typespec != NIL && $f_typespec.Size() > 0
    }
    FUNC $hasTypespec(int i) bool @primitive
      RETURN i >= 0 && $f_typespec != NIL && i < $f_typespec.Size()
    }
    FUNC $clearTypespec() Expression @primitive
      $f_typespec = NIL
      RETURN THIS
    }
    Expression $f_cond
    FUNC $setCond(Expression v) Expression @primitive
      $f_cond = v
      RETURN THIS
    }
    FUNC $newCond() Expression
      $f_cond = NEW()
      RETURN $f_cond
    }
    FUNC $getCond() Expression @primitive
      IF $f_cond == NIL
        THROW "cond was not set"
      }
      RETURN $f_cond
    }
    FUNC $hasCond() bool @primitive
      RETURN $f_cond != NIL
    }
    FUNC $clearCond() Expression @primitive
      $f_cond = NIL
      RETURN THIS
    }
    Expression $f_left
    FUNC $setLeft(Expression v) Expression @primitive
      $f_left = v
      RETURN THIS
    }
    FUNC $newLeft() Expression
      $f_left = NEW()
      RETURN $f_left
    }
    FUNC $getLeft() Expression @primitive
      IF $f_left == NIL
        THROW "left was not set"
      }
      RETURN $f_left
    }
    FUNC $hasLeft() bool @primitive
      RETURN $f_left != NIL
    }
    FUNC $clearLeft() Expression @primitive
      $f_left = NIL
      RETURN THIS
    }
    Expression $f_right
    FUNC $setRight(Expression v) Expression @primitive
      $f_right = v
      RETURN THIS
    }
    FUNC $newRight() Expression
      $f_right = NEW()
      RETURN $f_right
    }
    FUNC $getRight() Expression @primitive
      IF $f_right == NIL
        THROW "right was not set"
      }
      RETURN $f_right
    }
    FUNC $hasRight() bool @primitive
      RETURN $f_right != NIL
    }
    FUNC $clearRight() Expression @primitive
      $f_right = NIL
      RETURN THIS
    }
    int $f_dotnil
    FUNC $setDotnil(bool v) Expression @primitive
      $f_dotnil = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getDotnil() bool @primitive
      IF $f_dotnil == 0
        RETURN FALSE
      }
      RETURN $f_dotnil == 2
    }
    FUNC $hasDotnil() bool @primitive
      RETURN $f_dotnil != 0
    }
    FUNC $clearDotnil() Expression @primitive
      $f_dotnil = 0
      RETURN THIS
    }
    MethodCall $f_call
    FUNC $setCall(MethodCall v) Expression @primitive
      $f_call = v
      RETURN THIS
    }
    FUNC $newCall() MethodCall
      $f_call = NEW()
      RETURN $f_call
    }
    FUNC $getCall() MethodCall @primitive
      IF $f_call == NIL
        THROW "call was not set"
      }
      RETURN $f_call
    }
    FUNC $hasCall() bool @primitive
      RETURN $f_call != NIL
    }
    FUNC $clearCall() Expression @primitive
      $f_call = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_type = ExprType.unknown
      $f_pos = NIL
      $f_id = NIL
      $f_number = 0
      $f_fnumber = 0
      $f_dotNumber = 0
      $f_stringValue = NIL
      $f_listItem = NIL
      $f_dictItem = NIL
      $f_initItem = NIL
      $f_orderedDict = 0
      $f_methodCall = NIL
      $f_method = NIL
      $f_decl = NIL
      $f_typecast = NIL
      $f_typespec = NIL
      $f_cond = NIL
      $f_left = NIL
      $f_right = NIL
      $f_dotnil = 0
      $f_call = NIL
      $has_number = FALSE
      $has_fnumber = FALSE
      $has_dotNumber = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN $hasType()
    }
    FUNC $enumGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN fromExprType2int[$f_type]
      }
      RETURN 0
    }
    FUNC $enumNameGet(int fieldNr) string @replace @primitive
      string s
      SWITCH fieldNr
        CASE 1; s = $f_type.ToString(); RETURN s == "unknown" ? s : s.slice(1)
      }
      RETURN ""
    }
    PROC $enumSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_type = int2ExprType.has(value) ? int2ExprType[value] : ExprType.unknown
      }
    }
    PROC $enumNameSet(int fieldNr, string name) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_type = ExprType.FromString("e" .. name)

      }
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 4; RETURN $f_number
        CASE 6; RETURN $f_dotNumber
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 4; $f_number = value; $has_number = TRUE
        CASE 6; $f_dotNumber = value; $has_dotNumber = TRUE
      }
    }
    FUNC $doubleGet(int fieldNr) float @replace @primitive
      SWITCH fieldNr
        CASE 5; RETURN $f_fnumber
      }
      RETURN 0
    }
    PROC $doubleSet(int fieldNr, float value) @replace @primitive
      SWITCH fieldNr
        CASE 5; $f_fnumber = value; $has_fnumber = TRUE
      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 20; RETURN $f_orderedDict == 2
        CASE 18; RETURN $f_dotnil == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 20; $f_orderedDict = (value ? 2 : 1)
        CASE 18; $f_dotnil = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 7; RETURN $f_stringValue
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 7; $f_stringValue = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_pos
        CASE 3; RETURN $f_id
        CASE 10; RETURN $f_methodCall
        CASE 11; RETURN $f_method
        CASE 12; RETURN $f_decl
        CASE 13; RETURN $f_typecast
        CASE 15; RETURN $f_cond
        CASE 16; RETURN $f_left
        CASE 17; RETURN $f_right
        CASE 19; RETURN $f_call
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_pos = m
        CASE 3; $f_id = m
        CASE 10; $f_methodCall = m
        CASE 11; $f_method = m
        CASE 12; $f_decl = m
        CASE 13; $f_typecast = m
        CASE 15; $f_cond = m
        CASE 16; $f_left = m
        CASE 17; $f_right = m
        CASE 19; $f_call = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 2
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_id == NIL
            $f_id = NEW()
          }
          reader.addRef($f_id)
          $f_id.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 8
          IF $f_listItem == NIL
            $f_listItem = NEW()
          }
          Expression m = NEW()
          $f_listItem.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 9
          IF $f_dictItem == NIL
            $f_dictItem = NEW()
          }
          ExprPair m = NEW()
          $f_dictItem.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 21
          IF $f_initItem == NIL
            $f_initItem = NEW()
          }
          NameExpr m = NEW()
          $f_initItem.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 10
          IF $f_methodCall == NIL
            $f_methodCall = NEW()
          }
          reader.addRef($f_methodCall)
          $f_methodCall.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 11
          IF $f_method == NIL
            $f_method = NEW()
          }
          reader.addRef($f_method)
          $f_method.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 12
          IF $f_decl == NIL
            $f_decl = NEW()
          }
          reader.addRef($f_decl)
          $f_decl.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 13
          IF $f_typecast == NIL
            $f_typecast = NEW()
          }
          reader.addRef($f_typecast)
          $f_typecast.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 14
          IF $f_typespec == NIL
            $f_typespec = NEW()
          }
          Type m = NEW()
          $f_typespec.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 15
          IF $f_cond == NIL
            $f_cond = NEW()
          }
          reader.addRef($f_cond)
          $f_cond.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 16
          IF $f_left == NIL
            $f_left = NEW()
          }
          reader.addRef($f_left)
          $f_left.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 17
          IF $f_right == NIL
            $f_right = NEW()
          }
          reader.addRef($f_right)
          $f_right.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 19
          IF $f_call == NIL
            $f_call = NEW()
          }
          reader.addRef($f_call)
          $f_call.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 8; RETURN $f_listItem[idx]
        CASE 9; RETURN $f_dictItem[idx]
        CASE 21; RETURN $f_initItem[idx]
        CASE 14; RETURN $f_typespec[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 8; IF $f_listItem == NIL; $f_listItem = NEW(); }
                $f_listItem.add(m)
        CASE 9; IF $f_dictItem == NIL; $f_dictItem = NEW(); }
                $f_dictItem.add(m)
        CASE 21; IF $f_initItem == NIL; $f_initItem = NEW(); }
                $f_initItem.add(m)
        CASE 14; IF $f_typespec == NIL; $f_typespec = NEW(); }
                $f_typespec.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasType()
        CASE 2; RETURN $hasPos()
        CASE 3; RETURN $hasId()
        CASE 4; RETURN $hasNumber()
        CASE 5; RETURN $hasFnumber()
        CASE 6; RETURN $hasDotNumber()
        CASE 7; RETURN $hasStringValue()
        CASE 20; RETURN $hasOrderedDict()
        CASE 10; RETURN $hasMethodCall()
        CASE 11; RETURN $hasMethod()
        CASE 12; RETURN $hasDecl()
        CASE 13; RETURN $hasTypecast()
        CASE 15; RETURN $hasCond()
        CASE 16; RETURN $hasLeft()
        CASE 17; RETURN $hasRight()
        CASE 18; RETURN $hasDotnil()
        CASE 19; RETURN $hasCall()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 8; RETURN $f_listItem == NIL ? 0 : $f_listItem.Size()
        CASE 9; RETURN $f_dictItem == NIL ? 0 : $f_dictItem.Size()
        CASE 21; RETURN $f_initItem == NIL ? 0 : $f_initItem.Size()
        CASE 14; RETURN $f_typespec == NIL ? 0 : $f_typespec.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) Expression
      Expression ret = NEW()
      ret.f_type = $f_type
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF $f_id != NIL
        ret.f_id = deep ? $f_id.copy(deep) : $f_id
      }
      IF $has_number
        ret.has_number = TRUE
        ret.f_number = $f_number
      }
      IF $has_fnumber
        ret.has_fnumber = TRUE
        ret.f_fnumber = $f_fnumber
      }
      IF $has_dotNumber
        ret.has_dotNumber = TRUE
        ret.f_dotNumber = $f_dotNumber
      }
      ret.f_stringValue = $f_stringValue
      IF deep
        IF $f_listItem != NIL
          ret.f_listItem = NEW()
          FOR i IN $f_listItem
            ret.f_listItem.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_listItem = $f_listItem
      }
      IF deep
        IF $f_dictItem != NIL
          ret.f_dictItem = NEW()
          FOR i IN $f_dictItem
            ret.f_dictItem.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_dictItem = $f_dictItem
      }
      IF deep
        IF $f_initItem != NIL
          ret.f_initItem = NEW()
          FOR i IN $f_initItem
            ret.f_initItem.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_initItem = $f_initItem
      }
      ret.f_orderedDict = $f_orderedDict
      IF $f_methodCall != NIL
        ret.f_methodCall = deep ? $f_methodCall.copy(deep) : $f_methodCall
      }
      IF $f_method != NIL
        ret.f_method = deep ? $f_method.copy(deep) : $f_method
      }
      IF $f_decl != NIL
        ret.f_decl = deep ? $f_decl.copy(deep) : $f_decl
      }
      IF $f_typecast != NIL
        ret.f_typecast = deep ? $f_typecast.copy(deep) : $f_typecast
      }
      IF deep
        IF $f_typespec != NIL
          ret.f_typespec = NEW()
          FOR i IN $f_typespec
            ret.f_typespec.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_typespec = $f_typespec
      }
      IF $f_cond != NIL
        ret.f_cond = deep ? $f_cond.copy(deep) : $f_cond
      }
      IF $f_left != NIL
        ret.f_left = deep ? $f_left.copy(deep) : $f_left
      }
      IF $f_right != NIL
        ret.f_right = deep ? $f_right.copy(deep) : $f_right
      }
      ret.f_dotnil = $f_dotnil
      IF $f_call != NIL
        ret.f_call = deep ? $f_call.copy(deep) : $f_call
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Expression
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Expression
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Expression
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Expression
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Expression
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Expression
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Expression
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("type", 1, Proto.Type.enum, FALSE),
        NEW("pos", 2, Proto.Type.message, FALSE),
        NEW("id", 3, Proto.Type.message, FALSE),
        NEW("number", 4, Proto.Type.int64, FALSE),
        NEW("fnumber", 5, Proto.Type.double, FALSE),
        NEW("dotNumber", 6, Proto.Type.int64, FALSE),
        NEW("stringValue", 7, Proto.Type.string, FALSE),
        NEW("listItem", 8, Proto.Type.message, TRUE),
        NEW("dictItem", 9, Proto.Type.message, TRUE),
        NEW("initItem", 21, Proto.Type.message, TRUE),
        NEW("orderedDict", 20, Proto.Type.bool, FALSE),
        NEW("methodCall", 10, Proto.Type.message, FALSE),
        NEW("method", 11, Proto.Type.message, FALSE),
        NEW("decl", 12, Proto.Type.message, FALSE),
        NEW("typecast", 13, Proto.Type.message, FALSE),
        NEW("typespec", 14, Proto.Type.message, TRUE),
        NEW("cond", 15, Proto.Type.message, FALSE),
        NEW("left", 16, Proto.Type.message, FALSE),
        NEW("right", 17, Proto.Type.message, FALSE),
        NEW("dotnil", 18, Proto.Type.bool, FALSE),
        NEW("call", 19, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Expression.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Expression
        RETURN Expression.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Expression
        RETURN Expression.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Expression
        RETURN Expression.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Expression
        RETURN Expression.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Expression
        RETURN Expression.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Id EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Id"
    }
    Position $f_pos
    FUNC $setPos(Position v) Id @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() Id @primitive
      $f_pos = NIL
      RETURN THIS
    }
    string $f_name
    FUNC $setName(string v) Id @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $getName() string @primitive
      IF $f_name == NIL
        RETURN ""
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() Id @primitive
      $f_name = NIL
      RETURN THIS
    }
    int $f_dollar
    FUNC $setDollar(bool v) Id @primitive
      $f_dollar = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getDollar() bool @primitive
      IF $f_dollar == 0
        RETURN FALSE
      }
      RETURN $f_dollar == 2
    }
    FUNC $hasDollar() bool @primitive
      RETURN $f_dollar != 0
    }
    FUNC $clearDollar() Id @primitive
      $f_dollar = 0
      RETURN THIS
    }
    int $f_percent
    FUNC $setPercent(bool v) Id @primitive
      $f_percent = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getPercent() bool @primitive
      IF $f_percent == 0
        RETURN FALSE
      }
      RETURN $f_percent == 2
    }
    FUNC $hasPercent() bool @primitive
      RETURN $f_percent != 0
    }
    FUNC $clearPercent() Id @primitive
      $f_percent = 0
      RETURN THIS
    }
    int $f_ref
    bool $has_ref
    FUNC $setRef(int v) Id @primitive
      $f_ref = v
      $has_ref = TRUE
      RETURN THIS
    }
    FUNC $getRef() int @primitive
      IF !$has_ref
        RETURN 0
      }
      RETURN $f_ref
    }
    FUNC $hasRef() bool @primitive
      RETURN $has_ref
    }
    FUNC $clearRef() Id @primitive
      $f_ref = 0
      $has_ref = FALSE
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_pos = NIL
      $f_name = NIL
      $f_dollar = 0
      $f_percent = 0
      $f_ref = 0
      $has_ref = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN $hasName()
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 5; RETURN $f_ref
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 5; $f_ref = value; $has_ref = TRUE
      }
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_dollar == 2
        CASE 4; RETURN $f_percent == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 3; $f_dollar = (value ? 2 : 1)
        CASE 4; $f_percent = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_name
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_name = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_pos
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_pos = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasPos()
        CASE 2; RETURN $hasName()
        CASE 3; RETURN $hasDollar()
        CASE 4; RETURN $hasPercent()
        CASE 5; RETURN $hasRef()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Id
      Id ret = NEW()
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      ret.f_name = $f_name
      ret.f_dollar = $f_dollar
      ret.f_percent = $f_percent
      IF $has_ref
        ret.has_ref = TRUE
        ret.f_ref = $f_ref
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Id
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Id
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Id
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Id
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Id
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Id
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Id
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("pos", 1, Proto.Type.message, FALSE),
        NEW("name", 2, Proto.Type.string, FALSE),
        NEW("dollar", 3, Proto.Type.bool, FALSE),
        NEW("percent", 4, Proto.Type.bool, FALSE),
        NEW("ref", 5, Proto.Type.int64, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Id.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Id
        RETURN Id.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Id
        RETURN Id.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Id
        RETURN Id.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Id
        RETURN Id.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Id
        RETURN Id.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS ExprPair EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "ExprPair"
    }
    Expression $f_key
    FUNC $setKey(Expression v) ExprPair @primitive
      $f_key = v
      RETURN THIS
    }
    FUNC $newKey() Expression
      $f_key = NEW()
      RETURN $f_key
    }
    FUNC $getKey() Expression @primitive
      IF $f_key == NIL
        THROW "key was not set"
      }
      RETURN $f_key
    }
    FUNC $hasKey() bool @primitive
      RETURN $f_key != NIL
    }
    FUNC $clearKey() ExprPair @primitive
      $f_key = NIL
      RETURN THIS
    }
    Expression $f_value
    FUNC $setValue(Expression v) ExprPair @primitive
      $f_value = v
      RETURN THIS
    }
    FUNC $newValue() Expression
      $f_value = NEW()
      RETURN $f_value
    }
    FUNC $getValue() Expression @primitive
      IF $f_value == NIL
        THROW "value was not set"
      }
      RETURN $f_value
    }
    FUNC $hasValue() bool @primitive
      RETURN $f_value != NIL
    }
    FUNC $clearValue() ExprPair @primitive
      $f_value = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_key = NIL
      $f_value = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasKey() && $hasValue()
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_key
        CASE 2; RETURN $f_value
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_key = m
        CASE 2; $f_value = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_key == NIL
            $f_key = NEW()
          }
          reader.addRef($f_key)
          $f_key.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_value == NIL
            $f_value = NEW()
          }
          reader.addRef($f_value)
          $f_value.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasKey()
        CASE 2; RETURN $hasValue()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) ExprPair
      ExprPair ret = NEW()
      IF $f_key != NIL
        ret.f_key = deep ? $f_key.copy(deep) : $f_key
      }
      IF $f_value != NIL
        ret.f_value = deep ? $f_value.copy(deep) : $f_value
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) ExprPair
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) ExprPair
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) ExprPair
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) ExprPair
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) ExprPair
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) ExprPair
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) ExprPair
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("key", 1, Proto.Type.message, FALSE),
        NEW("value", 2, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN ExprPair.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) ExprPair
        RETURN ExprPair.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) ExprPair
        RETURN ExprPair.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) ExprPair
        RETURN ExprPair.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) ExprPair
        RETURN ExprPair.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) ExprPair
        RETURN ExprPair.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS NameExpr EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "NameExpr"
    }
    string $f_name
    FUNC $setName(string v) NameExpr @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $getName() string @primitive
      IF $f_name == NIL
        RETURN ""
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() NameExpr @primitive
      $f_name = NIL
      RETURN THIS
    }
    Expression $f_value
    FUNC $setValue(Expression v) NameExpr @primitive
      $f_value = v
      RETURN THIS
    }
    FUNC $newValue() Expression
      $f_value = NEW()
      RETURN $f_value
    }
    FUNC $getValue() Expression @primitive
      IF $f_value == NIL
        THROW "value was not set"
      }
      RETURN $f_value
    }
    FUNC $hasValue() bool @primitive
      RETURN $f_value != NIL
    }
    FUNC $clearValue() NameExpr @primitive
      $f_value = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_name = NIL
      $f_value = NIL
    }
    FUNC $valid() bool @primitive
      RETURN $hasName() && $hasValue()
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_name
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_name = value
      }
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 2; RETURN $f_value
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 2; $f_value = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 2
          IF $f_value == NIL
            $f_value = NEW()
          }
          reader.addRef($f_value)
          $f_value.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasName()
        CASE 2; RETURN $hasValue()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) NameExpr
      NameExpr ret = NEW()
      ret.f_name = $f_name
      IF $f_value != NIL
        ret.f_value = deep ? $f_value.copy(deep) : $f_value
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) NameExpr
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) NameExpr
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) NameExpr
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) NameExpr
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) NameExpr
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) NameExpr
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) NameExpr
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("name", 1, Proto.Type.string, FALSE),
        NEW("value", 2, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN NameExpr.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) NameExpr
        RETURN NameExpr.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) NameExpr
        RETURN NameExpr.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) NameExpr
        RETURN NameExpr.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) NameExpr
        RETURN NameExpr.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) NameExpr
        RETURN NameExpr.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS MethodCall EXTENDS Message @public @items=public
    dyn $extension

    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "MethodCall"
    }
    SymbolRef $f_method
    FUNC $setMethod(SymbolRef v) MethodCall @primitive
      $f_method = v
      RETURN THIS
    }
    FUNC $newMethod() SymbolRef
      $f_method = NEW()
      RETURN $f_method
    }
    FUNC $getMethod() SymbolRef @primitive
      IF $f_method == NIL
        THROW "method was not set"
      }
      RETURN $f_method
    }
    FUNC $hasMethod() bool @primitive
      RETURN $f_method != NIL
    }
    FUNC $clearMethod() MethodCall @primitive
      $f_method = NIL
      RETURN THIS
    }
    Position $f_pos
    FUNC $setPos(Position v) MethodCall @primitive
      $f_pos = v
      RETURN THIS
    }
    FUNC $newPos() Position
      $f_pos = NEW()
      RETURN $f_pos
    }
    FUNC $getPos() Position @primitive
      IF $f_pos == NIL
        THROW "pos was not set"
      }
      RETURN $f_pos
    }
    FUNC $hasPos() bool @primitive
      RETURN $f_pos != NIL
    }
    FUNC $clearPos() MethodCall @primitive
      $f_pos = NIL
      RETURN THIS
    }
    Expression $f_name
    FUNC $setName(Expression v) MethodCall @primitive
      $f_name = v
      RETURN THIS
    }
    FUNC $newName() Expression
      $f_name = NEW()
      RETURN $f_name
    }
    FUNC $getName() Expression @primitive
      IF $f_name == NIL
        THROW "name was not set"
      }
      RETURN $f_name
    }
    FUNC $hasName() bool @primitive
      RETURN $f_name != NIL
    }
    FUNC $clearName() MethodCall @primitive
      $f_name = NIL
      RETURN THIS
    }
    list<Expression> $f_argument
    FUNC $addArgument(Expression v) MethodCall
      IF $f_argument == NIL
        $f_argument = NEW()
      }
      $f_argument.add(v)
      RETURN THIS
    }
    FUNC $addNewArgument() Expression
      Expression v = NEW()
      $addArgument(v)
      RETURN v
    }
    FUNC $getArgument(int i) Expression @primitive
      IF i < 0 || $f_argument == NIL || i >= $f_argument.Size()
        THROW "list index out of range for argument: " .. i
      }
      RETURN $f_argument[i]
    }
    FUNC $getArgumentList() list<Expression> @primitive
      RETURN $f_argument
    }
    FUNC $setArgumentList(list<Expression> l) MethodCall @primitive
      $f_argument = l
      RETURN THIS
    }
    FUNC $sizeArgument() int @primitive
      RETURN $f_argument == NIL ? 0 : $f_argument.Size()
    }
    FUNC $hasArgument() bool @primitive
      RETURN $f_argument != NIL && $f_argument.Size() > 0
    }
    FUNC $hasArgument(int i) bool @primitive
      RETURN i >= 0 && $f_argument != NIL && i < $f_argument.Size()
    }
    FUNC $clearArgument() MethodCall @primitive
      $f_argument = NIL
      RETURN THIS
    }
    Expression $f_vararg
    FUNC $setVararg(Expression v) MethodCall @primitive
      $f_vararg = v
      RETURN THIS
    }
    FUNC $newVararg() Expression
      $f_vararg = NEW()
      RETURN $f_vararg
    }
    FUNC $getVararg() Expression @primitive
      IF $f_vararg == NIL
        THROW "vararg was not set"
      }
      RETURN $f_vararg
    }
    FUNC $hasVararg() bool @primitive
      RETURN $f_vararg != NIL
    }
    FUNC $clearVararg() MethodCall @primitive
      $f_vararg = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_method = NIL
      $f_pos = NIL
      $f_name = NIL
      $f_argument = NIL
      $f_vararg = NIL
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $messageGet(int fieldNr) Message @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_method
        CASE 2; RETURN $f_pos
        CASE 3; RETURN $f_name
        CASE 5; RETURN $f_vararg
      }
      RETURN NIL
    }
    PROC $messageSet(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_method = m
        CASE 2; $f_pos = m
        CASE 3; $f_name = m
        CASE 5; $f_vararg = m
      }
    }
    FUNC $mergeMessageFromReader(int fieldNr, Proto.FileFormat format, Proto.I_Reader reader) bool @replace
      SWITCH fieldNr
        CASE 1
          IF $f_method == NIL
            $f_method = NEW()
          }
          reader.addRef($f_method)
          $f_method.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 2
          IF $f_pos == NIL
            $f_pos = NEW()
          }
          reader.addRef($f_pos)
          $f_pos.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 3
          IF $f_name == NIL
            $f_name = NEW()
          }
          reader.addRef($f_name)
          $f_name.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 4
          IF $f_argument == NIL
            $f_argument = NEW()
          }
          Expression m = NEW()
          $f_argument.add(m)
          reader.addRef(m)
          m.mergeFromReader(format, reader)
          RETURN TRUE
        CASE 5
          IF $f_vararg == NIL
            $f_vararg = NEW()
          }
          reader.addRef($f_vararg)
          $f_vararg.mergeFromReader(format, reader)
          RETURN TRUE
      }
      RETURN FALSE
    }
    FUNC $messageGet(int fieldNr, int idx) Message @replace @primitive
      SWITCH fieldNr
        CASE 4; RETURN $f_argument[idx]
      }
      RETURN NIL
    }
    PROC $messageAdd(int fieldNr, Message m) @replace @primitive
      SWITCH fieldNr
        CASE 4; IF $f_argument == NIL; $f_argument = NEW(); }
                $f_argument.add(m)
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasMethod()
        CASE 2; RETURN $hasPos()
        CASE 3; RETURN $hasName()
        CASE 5; RETURN $hasVararg()
      }
      RETURN FALSE
    }
    FUNC $size(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 4; RETURN $f_argument == NIL ? 0 : $f_argument.Size()
      }
      RETURN 0
    }
    FUNC $copy(bool deep) MethodCall
      MethodCall ret = NEW()
      IF $f_method != NIL
        ret.f_method = deep ? $f_method.copy(deep) : $f_method
      }
      IF $f_pos != NIL
        ret.f_pos = deep ? $f_pos.copy(deep) : $f_pos
      }
      IF $f_name != NIL
        ret.f_name = deep ? $f_name.copy(deep) : $f_name
      }
      IF deep
        IF $f_argument != NIL
          ret.f_argument = NEW()
          FOR i IN $f_argument
            ret.f_argument.add(i.copy(deep))
          }
        }
      ELSE
        ret.f_argument = $f_argument
      }
      IF $f_vararg != NIL
        ret.f_vararg = deep ? $f_vararg.copy(deep) : $f_vararg
      }
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) MethodCall
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) MethodCall
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) MethodCall
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) MethodCall
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) MethodCall
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) MethodCall
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) MethodCall
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("method", 1, Proto.Type.message, FALSE),
        NEW("pos", 2, Proto.Type.message, FALSE),
        NEW("name", 3, Proto.Type.message, FALSE),
        NEW("argument", 4, Proto.Type.message, TRUE),
        NEW("vararg", 5, Proto.Type.message, FALSE),
      ]
      FUNC newMessage() Message
        RETURN MethodCall.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) MethodCall
        RETURN MethodCall.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) MethodCall
        RETURN MethodCall.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) MethodCall
        RETURN MethodCall.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) MethodCall
        RETURN MethodCall.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) MethodCall
        RETURN MethodCall.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
  CLASS Position EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Position"
    }
    int $f_line
    bool $has_line
    FUNC $setLine(int v) Position @primitive
      $f_line = v
      $has_line = TRUE
      RETURN THIS
    }
    FUNC $getLine() int @primitive
      IF !$has_line
        RETURN 0
      }
      RETURN $f_line
    }
    FUNC $hasLine() bool @primitive
      RETURN $has_line
    }
    FUNC $clearLine() Position @primitive
      $f_line = 0
      $has_line = FALSE
      RETURN THIS
    }
    int $f_column
    bool $has_column
    FUNC $setColumn(int v) Position @primitive
      $f_column = v
      $has_column = TRUE
      RETURN THIS
    }
    FUNC $getColumn() int @primitive
      IF !$has_column
        RETURN 0
      }
      RETURN $f_column
    }
    FUNC $hasColumn() bool @primitive
      RETURN $has_column
    }
    FUNC $clearColumn() Position @primitive
      $f_column = 0
      $has_column = FALSE
      RETURN THIS
    }
    string $f_filename
    FUNC $setFilename(string v) Position @primitive
      $f_filename = v
      RETURN THIS
    }
    FUNC $getFilename() string @primitive
      IF $f_filename == NIL
        RETURN ""
      }
      RETURN $f_filename
    }
    FUNC $hasFilename() bool @primitive
      RETURN $f_filename != NIL
    }
    FUNC $clearFilename() Position @primitive
      $f_filename = NIL
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_line = 0
      $f_column = 0
      $f_filename = NIL
      $has_line = FALSE
      $has_column = FALSE
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $intGet(int fieldNr) int @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_line
        CASE 2; RETURN $f_column
      }
      RETURN 0
    }
    PROC $intSet(int fieldNr, int value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_line = value; $has_line = TRUE
        CASE 2; $f_column = value; $has_column = TRUE
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 3; RETURN $f_filename
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 3; $f_filename = value
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasLine()
        CASE 2; RETURN $hasColumn()
        CASE 3; RETURN $hasFilename()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Position
      Position ret = NEW()
      IF $has_line
        ret.has_line = TRUE
        ret.f_line = $f_line
      }
      IF $has_column
        ret.has_column = TRUE
        ret.f_column = $f_column
      }
      ret.f_filename = $f_filename
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Position
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Position
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Position
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Position
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Position
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Position
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Position
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("line", 1, Proto.Type.int64, FALSE),
        NEW("column", 2, Proto.Type.int64, FALSE),
        NEW("filename", 3, Proto.Type.string, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Position.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Position
        RETURN Position.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Position
        RETURN Position.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Position
        RETURN Position.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Position
        RETURN Position.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Position
        RETURN Position.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
}
