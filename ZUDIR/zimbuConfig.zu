# Generated from D:/zimbu/zimbuConfig.proto

IMPORT "$PLUGIN/proto/Proto.zu"
IMPORT "$PLUGIN/proto/Message.zu"

MODULE Zimbu @public @items=public
  CLASS Config EXTENDS Message @public @items=public
    NEW()
    }
    FUNC $name() string @replace @primitive
      RETURN "Config"
    }
    string $f_mallocArg
    FUNC $setMallocArg(string v) Config @primitive
      $f_mallocArg = v
      RETURN THIS
    }
    FUNC $getMallocArg() string @primitive
      IF $f_mallocArg == NIL
        RETURN ""
      }
      RETURN $f_mallocArg
    }
    FUNC $hasMallocArg() bool @primitive
      RETURN $f_mallocArg != NIL
    }
    FUNC $clearMallocArg() Config @primitive
      $f_mallocArg = NIL
      RETURN THIS
    }
    string $f_threadArg
    FUNC $setThreadArg(string v) Config @primitive
      $f_threadArg = v
      RETURN THIS
    }
    FUNC $getThreadArg() string @primitive
      IF $f_threadArg == NIL
        RETURN ""
      }
      RETURN $f_threadArg
    }
    FUNC $hasThreadArg() bool @primitive
      RETURN $f_threadArg != NIL
    }
    FUNC $clearThreadArg() Config @primitive
      $f_threadArg = NIL
      RETURN THIS
    }
    string $f_socketArg
    FUNC $setSocketArg(string v) Config @primitive
      $f_socketArg = v
      RETURN THIS
    }
    FUNC $getSocketArg() string @primitive
      IF $f_socketArg == NIL
        RETURN ""
      }
      RETURN $f_socketArg
    }
    FUNC $hasSocketArg() bool @primitive
      RETURN $f_socketArg != NIL
    }
    FUNC $clearSocketArg() Config @primitive
      $f_socketArg = NIL
      RETURN THIS
    }
    string $f_mathArg
    FUNC $setMathArg(string v) Config @primitive
      $f_mathArg = v
      RETURN THIS
    }
    FUNC $getMathArg() string @primitive
      IF $f_mathArg == NIL
        RETURN ""
      }
      RETURN $f_mathArg
    }
    FUNC $hasMathArg() bool @primitive
      RETURN $f_mathArg != NIL
    }
    FUNC $clearMathArg() Config @primitive
      $f_mathArg = NIL
      RETURN THIS
    }
    int $f_haveResolve
    FUNC $setHaveResolve(bool v) Config @primitive
      $f_haveResolve = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getHaveResolve() bool @primitive
      IF $f_haveResolve == 0
        RETURN FALSE
      }
      RETURN $f_haveResolve == 2
    }
    FUNC $hasHaveResolve() bool @primitive
      RETURN $f_haveResolve != 0
    }
    FUNC $clearHaveResolve() Config @primitive
      $f_haveResolve = 0
      RETURN THIS
    }
    int $f_haveFork
    FUNC $setHaveFork(bool v) Config @primitive
      $f_haveFork = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getHaveFork() bool @primitive
      IF $f_haveFork == 0
        RETURN FALSE
      }
      RETURN $f_haveFork == 2
    }
    FUNC $hasHaveFork() bool @primitive
      RETURN $f_haveFork != 0
    }
    FUNC $clearHaveFork() Config @primitive
      $f_haveFork = 0
      RETURN THIS
    }
    string $f_exeSuffix
    FUNC $setExeSuffix(string v) Config @primitive
      $f_exeSuffix = v
      RETURN THIS
    }
    FUNC $getExeSuffix() string @primitive
      IF $f_exeSuffix == NIL
        RETURN ""
      }
      RETURN $f_exeSuffix
    }
    FUNC $hasExeSuffix() bool @primitive
      RETURN $f_exeSuffix != NIL
    }
    FUNC $clearExeSuffix() Config @primitive
      $f_exeSuffix = NIL
      RETURN THIS
    }
    string $f_exePrefix
    FUNC $setExePrefix(string v) Config @primitive
      $f_exePrefix = v
      RETURN THIS
    }
    FUNC $getExePrefix() string @primitive
      IF $f_exePrefix == NIL
        RETURN ""
      }
      RETURN $f_exePrefix
    }
    FUNC $hasExePrefix() bool @primitive
      RETURN $f_exePrefix != NIL
    }
    FUNC $clearExePrefix() Config @primitive
      $f_exePrefix = NIL
      RETURN THIS
    }
    int $f_haveSigaction
    FUNC $setHaveSigaction(bool v) Config @primitive
      $f_haveSigaction = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getHaveSigaction() bool @primitive
      IF $f_haveSigaction == 0
        RETURN FALSE
      }
      RETURN $f_haveSigaction == 2
    }
    FUNC $hasHaveSigaction() bool @primitive
      RETURN $f_haveSigaction != 0
    }
    FUNC $clearHaveSigaction() Config @primitive
      $f_haveSigaction = 0
      RETURN THIS
    }
    int $f_gcWithThreads
    FUNC $setGcWithThreads(bool v) Config @primitive
      $f_gcWithThreads = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getGcWithThreads() bool @primitive
      IF $f_gcWithThreads == 0
        RETURN FALSE
      }
      RETURN $f_gcWithThreads == 2
    }
    FUNC $hasGcWithThreads() bool @primitive
      RETURN $f_gcWithThreads != 0
    }
    FUNC $clearGcWithThreads() Config @primitive
      $f_gcWithThreads = 0
      RETURN THIS
    }
    string $f_int16Name
    FUNC $setInt16Name(string v) Config @primitive
      $f_int16Name = v
      RETURN THIS
    }
    FUNC $getInt16Name() string @primitive
      IF $f_int16Name == NIL
        RETURN ""
      }
      RETURN $f_int16Name
    }
    FUNC $hasInt16Name() bool @primitive
      RETURN $f_int16Name != NIL
    }
    FUNC $clearInt16Name() Config @primitive
      $f_int16Name = NIL
      RETURN THIS
    }
    string $f_int32Name
    FUNC $setInt32Name(string v) Config @primitive
      $f_int32Name = v
      RETURN THIS
    }
    FUNC $getInt32Name() string @primitive
      IF $f_int32Name == NIL
        RETURN ""
      }
      RETURN $f_int32Name
    }
    FUNC $hasInt32Name() bool @primitive
      RETURN $f_int32Name != NIL
    }
    FUNC $clearInt32Name() Config @primitive
      $f_int32Name = NIL
      RETURN THIS
    }
    string $f_int64Name
    FUNC $setInt64Name(string v) Config @primitive
      $f_int64Name = v
      RETURN THIS
    }
    FUNC $getInt64Name() string @primitive
      IF $f_int64Name == NIL
        RETURN ""
      }
      RETURN $f_int64Name
    }
    FUNC $hasInt64Name() bool @primitive
      RETURN $f_int64Name != NIL
    }
    FUNC $clearInt64Name() Config @primitive
      $f_int64Name = NIL
      RETURN THIS
    }
    string $f_nat16Name
    FUNC $setNat16Name(string v) Config @primitive
      $f_nat16Name = v
      RETURN THIS
    }
    FUNC $getNat16Name() string @primitive
      IF $f_nat16Name == NIL
        RETURN ""
      }
      RETURN $f_nat16Name
    }
    FUNC $hasNat16Name() bool @primitive
      RETURN $f_nat16Name != NIL
    }
    FUNC $clearNat16Name() Config @primitive
      $f_nat16Name = NIL
      RETURN THIS
    }
    string $f_nat32Name
    FUNC $setNat32Name(string v) Config @primitive
      $f_nat32Name = v
      RETURN THIS
    }
    FUNC $getNat32Name() string @primitive
      IF $f_nat32Name == NIL
        RETURN ""
      }
      RETURN $f_nat32Name
    }
    FUNC $hasNat32Name() bool @primitive
      RETURN $f_nat32Name != NIL
    }
    FUNC $clearNat32Name() Config @primitive
      $f_nat32Name = NIL
      RETURN THIS
    }
    string $f_nat64Name
    FUNC $setNat64Name(string v) Config @primitive
      $f_nat64Name = v
      RETURN THIS
    }
    FUNC $getNat64Name() string @primitive
      IF $f_nat64Name == NIL
        RETURN ""
      }
      RETURN $f_nat64Name
    }
    FUNC $hasNat64Name() bool @primitive
      RETURN $f_nat64Name != NIL
    }
    FUNC $clearNat64Name() Config @primitive
      $f_nat64Name = NIL
      RETURN THIS
    }
    string $f_floatName
    FUNC $setFloatName(string v) Config @primitive
      $f_floatName = v
      RETURN THIS
    }
    FUNC $getFloatName() string @primitive
      IF $f_floatName == NIL
        RETURN ""
      }
      RETURN $f_floatName
    }
    FUNC $hasFloatName() bool @primitive
      RETURN $f_floatName != NIL
    }
    FUNC $clearFloatName() Config @primitive
      $f_floatName = NIL
      RETURN THIS
    }
    string $f_float32Name
    FUNC $setFloat32Name(string v) Config @primitive
      $f_float32Name = v
      RETURN THIS
    }
    FUNC $getFloat32Name() string @primitive
      IF $f_float32Name == NIL
        RETURN ""
      }
      RETURN $f_float32Name
    }
    FUNC $hasFloat32Name() bool @primitive
      RETURN $f_float32Name != NIL
    }
    FUNC $clearFloat32Name() Config @primitive
      $f_float32Name = NIL
      RETURN THIS
    }
    string $f_intPtrName
    FUNC $setIntPtrName(string v) Config @primitive
      $f_intPtrName = v
      RETURN THIS
    }
    FUNC $getIntPtrName() string @primitive
      IF $f_intPtrName == NIL
        RETURN ""
      }
      RETURN $f_intPtrName
    }
    FUNC $hasIntPtrName() bool @primitive
      RETURN $f_intPtrName != NIL
    }
    FUNC $clearIntPtrName() Config @primitive
      $f_intPtrName = NIL
      RETURN THIS
    }
    string $f_printIntFormat
    FUNC $setPrintIntFormat(string v) Config @primitive
      $f_printIntFormat = v
      RETURN THIS
    }
    FUNC $getPrintIntFormat() string @primitive
      IF $f_printIntFormat == NIL
        RETURN ""
      }
      RETURN $f_printIntFormat
    }
    FUNC $hasPrintIntFormat() bool @primitive
      RETURN $f_printIntFormat != NIL
    }
    FUNC $clearPrintIntFormat() Config @primitive
      $f_printIntFormat = NIL
      RETURN THIS
    }
    string $f_printNatFormat
    FUNC $setPrintNatFormat(string v) Config @primitive
      $f_printNatFormat = v
      RETURN THIS
    }
    FUNC $getPrintNatFormat() string @primitive
      IF $f_printNatFormat == NIL
        RETURN ""
      }
      RETURN $f_printNatFormat
    }
    FUNC $hasPrintNatFormat() bool @primitive
      RETURN $f_printNatFormat != NIL
    }
    FUNC $clearPrintNatFormat() Config @primitive
      $f_printNatFormat = NIL
      RETURN THIS
    }
    string $f_scanfHexFormat
    FUNC $setScanfHexFormat(string v) Config @primitive
      $f_scanfHexFormat = v
      RETURN THIS
    }
    FUNC $getScanfHexFormat() string @primitive
      IF $f_scanfHexFormat == NIL
        RETURN ""
      }
      RETURN $f_scanfHexFormat
    }
    FUNC $hasScanfHexFormat() bool @primitive
      RETURN $f_scanfHexFormat != NIL
    }
    FUNC $clearScanfHexFormat() Config @primitive
      $f_scanfHexFormat = NIL
      RETURN THIS
    }
    int $f_isMingw
    FUNC $setIsMingw(bool v) Config @primitive
      $f_isMingw = v ? 2 : 1
      RETURN THIS
    }
    FUNC $getIsMingw() bool @primitive
      IF $f_isMingw == 0
        RETURN FALSE
      }
      RETURN $f_isMingw == 2
    }
    FUNC $hasIsMingw() bool @primitive
      RETURN $f_isMingw != 0
    }
    FUNC $clearIsMingw() Config @primitive
      $f_isMingw = 0
      RETURN THIS
    }
    PROC $clear() @primitive
      $f_mallocArg = NIL
      $f_threadArg = NIL
      $f_socketArg = NIL
      $f_mathArg = NIL
      $f_haveResolve = 0
      $f_haveFork = 0
      $f_exeSuffix = NIL
      $f_exePrefix = NIL
      $f_haveSigaction = 0
      $f_gcWithThreads = 0
      $f_int16Name = NIL
      $f_int32Name = NIL
      $f_int64Name = NIL
      $f_nat16Name = NIL
      $f_nat32Name = NIL
      $f_nat64Name = NIL
      $f_floatName = NIL
      $f_float32Name = NIL
      $f_intPtrName = NIL
      $f_printIntFormat = NIL
      $f_printNatFormat = NIL
      $f_scanfHexFormat = NIL
      $f_isMingw = 0
    }
    FUNC $valid() bool @primitive
      RETURN TRUE
    }
    FUNC $boolGet(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 4; RETURN $f_haveResolve == 2
        CASE 5; RETURN $f_haveFork == 2
        CASE 8; RETURN $f_haveSigaction == 2
        CASE 9; RETURN $f_gcWithThreads == 2
        CASE 50; RETURN $f_isMingw == 2
      }
      RETURN FALSE
    }
    PROC $boolSet(int fieldNr, bool value) @replace @primitive
      SWITCH fieldNr
        CASE 4; $f_haveResolve = (value ? 2 : 1)
        CASE 5; $f_haveFork = (value ? 2 : 1)
        CASE 8; $f_haveSigaction = (value ? 2 : 1)
        CASE 9; $f_gcWithThreads = (value ? 2 : 1)
        CASE 50; $f_isMingw = (value ? 2 : 1)
      }
    }
    FUNC $stringGet(int fieldNr) string @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $f_mallocArg
        CASE 2; RETURN $f_threadArg
        CASE 3; RETURN $f_socketArg
        CASE 10; RETURN $f_mathArg
        CASE 6; RETURN $f_exeSuffix
        CASE 7; RETURN $f_exePrefix
        CASE 20; RETURN $f_int16Name
        CASE 21; RETURN $f_int32Name
        CASE 22; RETURN $f_int64Name
        CASE 23; RETURN $f_nat16Name
        CASE 24; RETURN $f_nat32Name
        CASE 25; RETURN $f_nat64Name
        CASE 26; RETURN $f_floatName
        CASE 27; RETURN $f_float32Name
        CASE 28; RETURN $f_intPtrName
        CASE 40; RETURN $f_printIntFormat
        CASE 41; RETURN $f_printNatFormat
        CASE 42; RETURN $f_scanfHexFormat
      }
      RETURN ""
    }
    PROC $stringSet(int fieldNr, string value) @replace @primitive
      SWITCH fieldNr
        CASE 1; $f_mallocArg = value
        CASE 2; $f_threadArg = value
        CASE 3; $f_socketArg = value
        CASE 10; $f_mathArg = value
        CASE 6; $f_exeSuffix = value
        CASE 7; $f_exePrefix = value
        CASE 20; $f_int16Name = value
        CASE 21; $f_int32Name = value
        CASE 22; $f_int64Name = value
        CASE 23; $f_nat16Name = value
        CASE 24; $f_nat32Name = value
        CASE 25; $f_nat64Name = value
        CASE 26; $f_floatName = value
        CASE 27; $f_float32Name = value
        CASE 28; $f_intPtrName = value
        CASE 40; $f_printIntFormat = value
        CASE 41; $f_printNatFormat = value
        CASE 42; $f_scanfHexFormat = value
      }
    }
    FUNC $hasField(int fieldNr) bool @replace @primitive
      SWITCH fieldNr
        CASE 1; RETURN $hasMallocArg()
        CASE 2; RETURN $hasThreadArg()
        CASE 3; RETURN $hasSocketArg()
        CASE 10; RETURN $hasMathArg()
        CASE 4; RETURN $hasHaveResolve()
        CASE 5; RETURN $hasHaveFork()
        CASE 6; RETURN $hasExeSuffix()
        CASE 7; RETURN $hasExePrefix()
        CASE 8; RETURN $hasHaveSigaction()
        CASE 9; RETURN $hasGcWithThreads()
        CASE 20; RETURN $hasInt16Name()
        CASE 21; RETURN $hasInt32Name()
        CASE 22; RETURN $hasInt64Name()
        CASE 23; RETURN $hasNat16Name()
        CASE 24; RETURN $hasNat32Name()
        CASE 25; RETURN $hasNat64Name()
        CASE 26; RETURN $hasFloatName()
        CASE 27; RETURN $hasFloat32Name()
        CASE 28; RETURN $hasIntPtrName()
        CASE 40; RETURN $hasPrintIntFormat()
        CASE 41; RETURN $hasPrintNatFormat()
        CASE 42; RETURN $hasScanfHexFormat()
        CASE 50; RETURN $hasIsMingw()
      }
      RETURN FALSE
    }
    FUNC $copy(bool deep) Config
      Config ret = NEW()
      ret.f_mallocArg = $f_mallocArg
      ret.f_threadArg = $f_threadArg
      ret.f_socketArg = $f_socketArg
      ret.f_mathArg = $f_mathArg
      ret.f_haveResolve = $f_haveResolve
      ret.f_haveFork = $f_haveFork
      ret.f_exeSuffix = $f_exeSuffix
      ret.f_exePrefix = $f_exePrefix
      ret.f_haveSigaction = $f_haveSigaction
      ret.f_gcWithThreads = $f_gcWithThreads
      ret.f_int16Name = $f_int16Name
      ret.f_int32Name = $f_int32Name
      ret.f_int64Name = $f_int64Name
      ret.f_nat16Name = $f_nat16Name
      ret.f_nat32Name = $f_nat32Name
      ret.f_nat64Name = $f_nat64Name
      ret.f_floatName = $f_floatName
      ret.f_float32Name = $f_float32Name
      ret.f_intPtrName = $f_intPtrName
      ret.f_printIntFormat = $f_printIntFormat
      ret.f_printNatFormat = $f_printNatFormat
      ret.f_scanfHexFormat = $f_scanfHexFormat
      ret.f_isMingw = $f_isMingw
      RETURN ret
    }
    FUNC $fieldSpecs() list<Proto.FieldSpec> @define @primitive
      RETURN fieldSpecs
    }
    FUNC $mergeFromReader(Proto.FileFormat format, Proto.I_Reader reader) Config
      Proto.mergeFromFields(THIS, format, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(Proto.I_Reader reader) Config
      Proto.mergeFromBinaryFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromBinary(IO.I_ByteReader reader) Config
      $mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    FUNC $mergeFromBinaryDeref(IO.I_ByteReader reader) Config
      $mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      RETURN THIS
    }
    FUNC $mergeFromText(Proto.I_Reader reader) Config
      Proto.mergeFromTextFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(Proto.I_Reader reader) Config
      Proto.mergeFromJsonFields(THIS, fieldSpecs, reader)
      RETURN THIS
    }
    FUNC $mergeFromJson(IO.I_CharReader reader) Config
      Proto.mergeFromJsonFields(THIS, fieldSpecs, Proto.Reader.NEW(reader, FALSE))
      RETURN THIS
    }
    SHARED
      list<Proto.FieldSpec> fieldSpecs = [
        NEW("mallocArg", 1, Proto.Type.string, FALSE),
        NEW("threadArg", 2, Proto.Type.string, FALSE),
        NEW("socketArg", 3, Proto.Type.string, FALSE),
        NEW("mathArg", 10, Proto.Type.string, FALSE),
        NEW("haveResolve", 4, Proto.Type.bool, FALSE),
        NEW("haveFork", 5, Proto.Type.bool, FALSE),
        NEW("exeSuffix", 6, Proto.Type.string, FALSE),
        NEW("exePrefix", 7, Proto.Type.string, FALSE),
        NEW("haveSigaction", 8, Proto.Type.bool, FALSE),
        NEW("gcWithThreads", 9, Proto.Type.bool, FALSE),
        NEW("int16Name", 20, Proto.Type.string, FALSE),
        NEW("int32Name", 21, Proto.Type.string, FALSE),
        NEW("int64Name", 22, Proto.Type.string, FALSE),
        NEW("nat16Name", 23, Proto.Type.string, FALSE),
        NEW("nat32Name", 24, Proto.Type.string, FALSE),
        NEW("nat64Name", 25, Proto.Type.string, FALSE),
        NEW("floatName", 26, Proto.Type.string, FALSE),
        NEW("float32Name", 27, Proto.Type.string, FALSE),
        NEW("intPtrName", 28, Proto.Type.string, FALSE),
        NEW("printIntFormat", 40, Proto.Type.string, FALSE),
        NEW("printNatFormat", 41, Proto.Type.string, FALSE),
        NEW("scanfHexFormat", 42, Proto.Type.string, FALSE),
        NEW("isMingw", 50, Proto.Type.bool, FALSE),
      ]
      FUNC newMessage() Message
        RETURN Config.NEW()
      }
      FUNC createFromBinary(IO.I_ByteReader reader) Config
        RETURN Config.NEW().mergeFromBinary(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromBinary(IO.I_ByteReader reader) Message
        RETURN createFromBinary(reader)
      }
      FUNC createMessageFromBinaryDeref(IO.I_ByteReader reader) Message
        RETURN createFromBinaryDeref(reader)
      }
      FUNC createFromText(IO.I_CharReader reader) Config
        RETURN Config.NEW().mergeFromText(Proto.Reader.NEW(reader, FALSE))
      }
      FUNC createMessageFromText(IO.I_CharReader reader) Message
        RETURN createFromText(reader)
      }
      FUNC createFromJson(IO.I_CharReader reader) Config
        RETURN Config.NEW().mergeFromJson(reader)
      }
      FUNC createMessageFromJson(IO.I_CharReader reader) Message
        RETURN createFromJson(reader)
      }
      FUNC createMessageFromJsonDeref(IO.I_CharReader reader) Message
        RETURN createFromJsonDeref(reader)
      }
      FUNC createFromBinaryDeref(IO.I_ByteReader reader) Config
        RETURN Config.NEW().mergeFromBinary(Proto.Reader.NEW(reader, TRUE))
      }
      FUNC createFromJsonDeref(IO.I_CharReader reader) Config
        RETURN Config.NEW().mergeFromJson(Proto.Reader.NEW(reader, TRUE))
      }
    }
  }
}
