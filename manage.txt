The Zimbu programming language: Memory management


Zimbu has a choice of memory management strategies:
- Reference counting.
- Reference counting plus table for references on the stack.
- Mark & Sweep garbage collection.

The alternatives compared:

1. Reference counting (like Python)
     + predictable
     - adds quite a bit of overhead
     - inefficient with multi-threading, may require locks
     - still needs "stop the world" to handle cyclic references

2. Garbage collection (automatic)
     + efficient
     - unpredictable when it happens
     - when it kicks in the process is unresponsive for an unpredictable
       amount of time: the "stop the world" effect (can be kept short with
       multi-threading).
     - unpredictable how much memory is in use
     - behaves badly when close to the maximum memory limit
     - requires tuning

3. Garbage collection (manually)
     + efficient
     + predictable
     - when it kicks in the process is unresponsive for an unpredictable
       amount of time: the "stop the world" effect (can be kept short with
       multi-threading).
     - very unpredictable how much memory is in use

Some ideas to improve reference counting can be found in:
  http://www.research.ibm.com/people/d/dfb/papers/Bacon01Concurrent.pdf
  http://www.research.ibm.com/people/d/dfb/papers/Bacon03Pure.pdf

Despite many years of work on tracing garbage collection it still has many of
the problems.  It's nice when it works nicely, but otherwise becomes a
difficult beast to tame.  You end up changing the code to fix problems, which
requires running measurements to find out what helps.

Reference counting is predictable, but it turns out it adds 60% - 80%
overhead.  And still requires a "stop the world" mechanism to handle cyclic
references.  Therefore garbage collection appears to be the best choice.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

BASELINE

To find out what works best for Zimbu a baseline is created and experiments
are run to find out what is most efficient.

Baseline basics:
- Every piece of allocated memory has a counter for how many references it
  has.
- Whenever adding a reference the counter is incremented.
- Whenever removing a references the counter is decremented. If the counter
  becomes zero the memory is freed.

Baseline cycle detection:
- At compile time detect which classes can be part of a cycle.  Only these
  classes are handle differently.
- When the reference counter is decremented and is not zero it is added to a
  list of roots.  This is a double-linked list.
- When the object is freed it is removed from the list of roots.
- Once per compiler pass inspect the list of roots to detect cycles and free
  the objects in a cycle.

Timing the build of zimbu_test_test2c by zimbu_test with the mentioned
argument. Subtract the gcc/clang time from the total time, thus only counting
the time that zimbu_test has run.

     (seconds)            clang       gcc      clang-O2      gcc-O2
--manage=none             12.9       12.3                      
--manage=none (6)         12.7       
--manage=collect          22.8       20.3
--manage=linked           21.7       20.0
--manage=linked (2)       21.0       20.6
--manage=collect (1)      19.3       18.6
--manage=linked (1)       19.7       18.5
--manage=linked (1)(2)    18,8       17.5        14.2
--manage=linked (3)       23.3       23.4
--manage=linked (3)(5)    16.7       16.3
--manage=linked (4)       18.0       16.8
--manage=linked (4)(6)    17.3
--manage=linked (4)(6)(7) 19.6

(1) GC.run() only every other pass (4 instead of 8 times)
(2) mark uses lowest 2 bits of pointer
(3) sweep phase in separate thread
(4) sweep phase in one thread
(5) link with tcmalloc
(6) optimized builtin module handling
(7) with temp vars for GC


Investigating size of variable storing flags:

     (seconds)           clang       gcc      clang-O2      gcc-O2
--manage=collect 8                  20.8
--manage=collect 16                 20.5
--manage=collect 32                 21.0
--manage=collect 64                 21.6
--manage=collect 8  (1)             20.0
--manage=collect 16 (1)             19.8
--manage=collect 32 (1)             19.6  <- best
--manage=collect 64 (1)  21.0       19.9
(1) ZgcColFree() using __builtin_ffsll()

Numbers before adding stack frames:

     (seconds)        clang       gcc      clang-O2      gcc-O2
--manage=none         15.8       14.4       (crash)        9.8
--manage=collect (1)  28.4       27.4        19.4         18.3
--manage=default (2)  28.4       26.1
--manage=dectable     32.0       31.7

(1) without --exitclean, first implementation
(2) reference counting with occasional cycle detection


Old numbers:
                    clang                clang-O2        gcc-O2
--manage=none:      12.5 sec             (crash)          8.2
without GC.run():   20.2 sec (62 % over)  12.0           12.6 (54 % over)
With GC.run() (1):  23.2 sec (80 % over)                 14.4 (75 % over) 

(1) GC.run() after every compiler pass.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

HOW --MANAGE=LINKED WORKS

Reference counting is too slow.  A multi-threaded solution won't help much.
Still need to "stop the world" to do cycle detection, can't avoid that.

- When allocating memory, link it in a list of items.  The allocated memory is
  4 or 8 bytes larger than what is used.
  Every thread has its own list of items.
- When compiling, make a list of all globally available memory locations with
  their type and write the table in the program.
- When a method is called, it adds a stackframe, which contains the pointers
  used in the method and their type.  Before the method returns the stack
  frame is removed.
- At garbage collect time, "stop the world" and force all normal threads to go
  to their list of used items and set the mark to "10" or "01".  The lowest 2
  bits of the pointer can be used.  If it already has that value don't
  recurse, otherwise find all pointers inside the item.
  The GC thread goes through the global items and does the same.
  The threads hand over their own list of items to the GC thread.
  When all threads are done the "stop the world" is released and all normal
  threads continue.  Each thread starts a new list of items.
- The GC thread goes through the lists of items it received and frees the ones
  that do not have the "10" or "01" flag set, these are unreachable.
  Gaps in the list of items are cleaned up.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

EXPERIMENT: No reference counting for pointers on stack

This uses a list for deferred decrements, decRef, so that they can be applied
when taking stack references into account.
Requires keeping track of what is on the stack (already happened when there is
exception handling).

When allocating memory, set the reference count to 1 and add the pointer to
decRef.
When changing a pointer on a stack variable, do nothing.
When changing a pointer on an object:
- Increment the reference count of the new value.
- For the old value, if the reference count > 1, decrement, otherwise add to
  decRef list.
At garbage collect time:
1. Go through all pointers on the stack, increment reference.
2a. Apply all decrements in decRef, free object when counter is zero.
2b. Optionally: Do cycle detection
3. Go through all pointers on the stack, add entry to decRef

This requires putting the object type "To *to" in every object, so that when
the counter goes to zero the members can be dereferenced.

                           clang                  gcc-O2
No memory management:      12.5 sec                8.2 sec
dectable (1):              27.6 sec (114 % over)  19.8 sec (140 % over)
dectable (2):              21.6 sec (63 % over)

(1): No cycle detection yet
(2): Never call GC.run()

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

MULTI-THREADING

To overcome the inefficiency with threads this solution can be used:
   Write refs and unrefs in a log, for each thread separately.  This doesn't
   require locking.  When a log block is full or after some time the log is
   handed over to the garbage collecter thread.
   The garbage collector merges the logs for all threads and frees memory no
   longer used when (ref count) - (unref count) goes to zero.
   It can do a mark+sweep to find cycles (requires one byte in every allocated
   item to store the marker).
        + no locking for ref and unref
        + linear with number of operations
        + garbage collection can run in a separate thread at any priority
        + garbage collection can run in idle time
        + no "stop the world"
        - not efficient, need to do this for every ref and unref:
                tl_log[idx++] = ref;
                if (idx > LIMIT) { ... }
   Possibly only toplevel references need to be logged, so long as the garbage
   collector thread can go through the stack of each thread.


Other papers:
  http://www.research.ibm.com/people/d/dfb/papers.html


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

MEMBER TYPES

For allocated members information is stored in a "To" structure list.
The first entry of this list specifies what kind of type it is.

typedef struct {
 int off;  /* offset into structure or list size */
 To *to;   /* type of item or special value */
} To;

Special value for the "to" field:
#define TOCYCLE (To*)1  /* object that can be part of a cycle */

There are five possible types for members, as far as memory management is
concerned:

1. Value types.  These are not allocated and do not have a To entry.

2. Not counted types.  For allocated items that do not use reference counting.
   To is always {-1, 0}.

3. Memberless types.  E.g. a string.  These can be freed without inspecting
   their contents.  To is always {0, 0}.  The type struct starts with:
        Ti c;  /* reference counter */

4. Non-cycle types.  These have members but are never part of a cycle.
   To is a list, the first entry is {size, 0}.  The type struct starts
   with:
        Ti c;   /* reference counter */
        To to;  /* object type */
   However, if "size" is zero (all members are value types), the "to" field is
   omitted.

5. Cycle types.  These have members that may create a cycle, refer back to
   this object.  To is a list, the first entry is {size, TOCYCLE}.  The type
   struct starts
   with:
        Ti c;   /* reference counter */
        To to;  /* object type */
        cycleClass cp;  /* previous cycle root */
        cycleClass cn;  /* next cycle root */

For an object the "size" of the first To entry in the To list is the number of
members.  That number of To entries is following.  For built-in containers the
size is zero and members are handled by additional code:
        ToOref    interface object
        ToArray   array
        ToDict    dict
        ToList    list

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Copyright 2009 Bram Moolenaar  All Rights Reserved
Licensed under the Apache License, Version 2.0.  See the LICENSE file or
obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0

vim: set tw=78 et sw=2 :
