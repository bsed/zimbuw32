#
# The Zimbu compiler written in Zimbu
#
# builtin module NAT - natural number support
#

#= Methods for the builtin nat type.
#
#*license
#* Copyright 2014 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#
MODULE NATModule @public

  #= The builtin type nat: 64 bit natural number.
  #- The object methods can be used on a nat variable or value:
  #% IO.print("0x" .. 1234.toHex())
  #
  #- NOTE: The implementation is incomplete, many methods fall back to the
  #- equivalent "int" method.
  #
  #- NOTE: When compiled to Javascript a nat is stored as a float, since
  #- Javascript only supports float numbers.
  CLASS STARTnat @public
    # For Zudocu: start of nat class.
    # This is not an actual class to make generating code easier.
  }

  #= Return the number of bytes in a nat.
  #- Always returns 8, since a nat is 64 bits
  FUNC Size(nat this) int @public
    ###### Only for generating documentation.
    RETURN 8
  }

  #= Return the number in decimal form.
  #- For example, 1234.ToString() returns "1234".
  FUNC ToString(nat this) string @public
    ###### Only for generating documentation.
    RETURN NIL
  }

  #= Return the number in the specified |format|.
  #- For example, 123.ToString(".5d") returns "00123",
  #- 123.ToString("5d") returns "  123".
  #
  #- The |format| has the fields: [width][.precision]{type}.
  #
  #- {type} can be d for decimal notation or x for hexadecimal notation.
  #
  #- [width] give the minimal width of the result.  When the number starts
  #- with zero padding is done with zero characters, otherwise with spaces.
  #
  #- [.precision] gives the minimum number of digits that will appear.  If the
  #- value requires fewer digits it is padded on the left with zeroes.  When
  #- the precision is zero and the value is zero the result is an empty
  #- string.
  FUNC ToString(nat this, string format) string @public
    ###### Only for generating documentation.
    RETURN NIL
  }

  #= Return < 0 when |other| is larger than this nat, zero when |other| is
  #= equal to this nat, and > 0 when |other| is smaller than this nat.
  FUNC Compare(nat this, nat other) int @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return TRUE when |other| is equal to this nat.
  FUNC Equal(nat this, nat other) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return a string with one character that is equal to the number.
  #- Same as T.int.asString()
  FUNC asString(nat this) string @public
    ###### Only for generating documentation.
    RETURN NIL
  }

  #= Return a byteString with one byte that is equal to the number.
  #- Same as T.int.asString()
  FUNC asByteString(nat this) byteString @public
    ###### Only for generating documentation.
    RETURN NIL
  }

  #= Return the number in decimal form with quotes.
  #- For example, 1000000.toQuotedString() returns "1'000'000".
  FUNC toQuotedString(nat this) string @public
    IF this == 0
      RETURN "0"
    }
    IO.StringWriter w = NEW()
    nat r = this
    nat beforeQuote = 3
    WHILE r > 0
      IF beforeQuote == 0
        w.writeChar('\'')
        beforeQuote = 3
      }
      nat n = r % 10
      w.write(n.ToString())
      r = r / 10
      --beforeQuote
    }
    RETURN w.ToString().reverse()
  }

  #!
  array<int> letters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                        'a', 'b', 'c', 'd', 'e', 'f']

  #= Return a string with the hex representation of the number.
  #- Uses lower case letters
  #
  #- For example: 123.toHex() returns "7b". 
  FUNC toHex(nat this) string @public
    RETURN toHex(this, 1)
  }

  #= Return a string with the hex representation of the number.
  #- Uses lower case letters 'a' to 'f'.
  #
  #- |minSize| is the minimum size of the string, leading zeroes are added
  #- when needed.  The string will get longer when needed.
  #
  #- For example: 123.toHex(4) returns "007b". 
  FUNC toHex(nat this, int minSize) string @public
    nat val = this
    # Build the result in |w| in reverse order.
    IO.StringWriter w = NEW()
    WHILE val != 0
      nat c = val & 15
      val = val >> 4
      w.writeChar(letters[c])
    }
    WHILE w.Size() < minSize
      w.writeChar('0')
    }
    RETURN w.ToString().reverse()
  }

  #= Return a string with the hex representation of the number.
  #- Uses upper case letters 'A' to 'F'.
  #
  #- For example: 123.toHex() returns "7B". 
  FUNC toHexUpper(nat this) string @public
    RETURN toHex(this).toUpperAscii()
  }

  #= Return a string with the hex representation of the number.
  #- Uses upper case letters 'A' to 'F'.
  #
  #- |minSize| is the minimum size of the string, leading zeroes are added
  #- when needed.  The string will get longer when needed.
  #
  #- For example: 123.toHex(4) returns "007B". 
  FUNC toHexUpper(nat this, int minSize) string @public
    RETURN toHex(this, minSize).toUpperAscii()
  }

  #= Return TRUE if the number is a white space character.
  #- That is for space, tab, control characters, etc.
  FUNC isWhite(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is a digit character.
  #- That is for '0' (48, 0x30) up to '9' (57, 0x39).
  FUNC isDigit(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is a hex digit character.
  #- That is for '0' (48, 0x30) up to '9' (57, 0x39),
  #- 'a' up to 'f' and 'A' up to 'F'.
  FUNC isHexDigit(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is an alphabetical character.
  #- That is for 'a' to 'z' and 'A' to 'Z'. TODO: Unicode support
  FUNC isAlpha(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is a lower case alphabetical character.
  #- That is for 'a' to 'z'. TODO: Unicode support
  FUNC isLower(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is an upper case alphabetical character.
  #- That is for 'A' to 'Z'. TODO: Unicode support
  FUNC isUpper(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is a white space character.
  #- That is for space, tab and control characters.
  FUNC isWhiteAscii(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is an alphabetical ASCII character.
  #- That is for 'a' to 'z' and 'A' to 'Z'
  FUNC isAlphaAscii(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is a lower case alphabetical ASCII character.
  #- That is for 'a' to 'z'.
  FUNC isLowerAscii(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return TRUE if the number is an upper case alphabetical ASCII character.
  #- That is for 'A' to 'Z'
  FUNC isUpperAscii(nat this) bool @public
    ###### Only for generating documentation.
    RETURN FALSE
  }

  #= Return the letter turned in to lower case for ASCII letters.
  #- Only works for ASCII, thus 'A' - 'Z' becomes 'a' - 'z'. All other
  #- characters are returned unchanged.
  FUNC toLowerAscii(nat this) nat @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return letter turned in to upper case for ASCII letters.
  #- Only works for ASCII, thus 'a' - 'z' becomes 'A' - 'Z'. All other
  #- characters are returned unchanged.
  FUNC toUpperAscii(nat this) nat @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the absolute value.
  #- This is a No-op, only provided for consistency.
  FUNC abs(nat this) nat @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the largest integral value not greater than the value.
  #- Same as T.float.floor().
  FUNC floor(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the smallest integral value not less than the value.
  #- Same as T.float.ceil().
  FUNC ceil(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the value rounded to integer, toward zero.
  #- Same as T.float.trunc().
  FUNC trunc(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the value rounded to integer, away from zero.
  #- Same as T.float.round().
  FUNC round(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the value of e (the base of natural logarithms) raised to the
  #= power of the value.
  #- Same as T.float.exp().
  FUNC exp(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the natural logarithm of the value.
  #- Same as T.float.log().
  FUNC log(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the base 10 logarithm of the value.
  #- Same as T.float.log10().
  FUNC log10(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the nonnegative quare root of the value.
  #- Same as T.float.sqrt().
  FUNC sqrt(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the value raised to the power of |x|.
  #- Same as T.float.pow().
  FUNC pow(nat this, float x) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the sine value, using the value as radians.
  #- Same as T.float.sin().
  FUNC sin(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the hyperbolic sine value.
  #- Same as T.float.sinh().
  FUNC sinh(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the cosine value, using the value as radians.
  #- Same as T.float.cos().
  FUNC cos(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the hyperbolic cosine value.
  #- Same as T.float.cosh().
  FUNC cosh(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the tangent value, using the value as radians.
  #- Same as T.float.tan().
  FUNC tan(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the hyperbolic tangent value.
  #- Same as T.float.tanh().
  FUNC tanh(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the principal value of the arc sine of the value.
  #- Same as T.float.asin().
  FUNC asin(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the principal value of the arc cosine of the value.
  #- Same as T.float.acos().
  FUNC acos(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the principal value of the arc tangent of the value.
  #- Same as T.float.atan().
  FUNC atan(nat this) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #= Return the principal value of the arg tangent of the value divided by
  #= |x|.
  #- Same as T.float.atan2().
  FUNC atan2(nat this, float x) float @public
    ###### Only for generating documentation.
    RETURN 0
  }

  #! For Zudocu: end of nat class.
  CLASS ENDnat
  }

  #= Maximum value of a nat.
  #- Used as T.nat.max
  nat max @public
          = 0xffff'ffff'ffff'ffff

  #= Minimum value of a nat.
  #- Used as T.nat.min
  nat min @public
          = 0
}
