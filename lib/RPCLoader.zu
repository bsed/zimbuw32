#
# The Zimbu compiler written in Zimbu
#
# RPC module loader
#
# Copyright 2009 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT "../Builtin.zu"
IMPORT "../Declaration.zu"
IMPORT "../SContext.zu"
IMPORT "../genJS/WriteJS.zu"

MODULE RPCLoader @public @items=public
  Declaration moduleDecl

  # Prepare for using the builtin RPC module.
  FUNC prepare() Builtin
    Builtin b = NEW()
    b.moduleName = "RPCModule"
    b.fileName = "RPCModule.zu"
    b.setup = setup
    RETURN b
  }

  # Invoked when the RPC module is used, after it was processed first time.
  PROC setup(Builtin builtin, SContext ctx)
    IF moduleDecl == NIL
      # Add this module to the list of predefined symbols.
      moduleDecl = Builtin.addLibModule("RPC", builtin)

      # Write headers later.
      WriteJS.funcWriters.add(writeInclJs)
    }
  }

  PROC writeInclJs(WriteJS gen, IO.File fd)
    IF gen.isDeclUsed(WriteJS.xhr)
      fd.write(''"
// TODO: remove
// function $debug(str){
//   $doc.getElementById('stdout').innerHTML += '<div>' + str + '</div>';
// }
function $createXMLHttpRequest() {
  return (window.XMLHttpRequest) ? new XMLHttpRequest() :
      new ActiveXObject('Microsoft.XMLHTTP');
}
function $createRequestChangeHandler(control, request, done) {
  return function() {
    // $debug("request change handler state: " + request.readyState);
    if (request.readyState == 4) {
      // $debug(request.responseText);
      done(control, request.responseText);
    }
  };
};
"'')
    }
  }
}
