#
# The Zimbu compiler written in Zimbu
#
# MULTIDICT module loader
#
# Copyright 2009 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT "../Builtin.zu"
IMPORT "../Declaration.zu"
IMPORT "../SContext.zu"
IMPORT "../Type.zu"

MODULE MULTIDICTLoader @public @items=public
  Declaration moduleDecl
  Declaration multiDictDecl

  # Prepare for using the builtin MULTIDICT module.
  FUNC prepare() Builtin
    Builtin b = NEW()
    b.moduleName = "MULTIDICTModule"
    b.fileName = "MULTIDICTModule.zu"
    b.setup = setup
    RETURN b
  }

  # Invoked when the MULTIDICT module is used, after the file has been parsed
  # and resolved once.
  PROC setup(Builtin builtin, SContext ctx)
    IF moduleDecl == NIL
      # Add this module to the list of predefined symbols.
      moduleDecl = Builtin.addLibModule("MULTIDICT", builtin)

      IF LOG.errorCount == 0
        # Define the "multiDict" class as an alias for MULTIDICT.MultiDict.
        multiDictDecl = moduleDecl.type.findMember("MultiDict", NIL)
        IF multiDictDecl == NIL || multiDictDecl.type.ttype != Type.Enum.class
          LOG.internal("cannot find MULTIDICT.MultiDict")
          EXIT 2
        }
        # TODO: this doesn't work for inheritance
        # multiDictSymbol = multiDictSymbol.copy()
        # multiDictSymbol.name = "multiDict"
      }
    }
  }

  FUNC getMultiDictDecl() Declaration
    RETURN multiDictDecl
  }

}
